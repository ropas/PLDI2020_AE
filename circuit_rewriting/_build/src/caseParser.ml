type token =
  | EOF
  | TK_opt
  | TK_target
  | TK_input
  | TK_list
  | TK_colon
  | TK_old
  | TK_new
  | TK_bexp
  | TK_LP
  | TK_RP
  | TK_BOOL
  | TK_BOOL_LITERAL of (bool)
  | TK_VAR of (string)
  | TK_AND
  | TK_OR
  | TK_XOR
  | TK_NOT

open Parsing;;
let _ = parse_error;;
# 2 "src/caseParser.mly"
	open Circuit
        exception ParsingError

# 28 "src/caseParser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* TK_opt *);
  258 (* TK_target *);
  259 (* TK_input *);
  260 (* TK_list *);
  261 (* TK_colon *);
  262 (* TK_old *);
  263 (* TK_new *);
  264 (* TK_bexp *);
  265 (* TK_LP *);
  266 (* TK_RP *);
  267 (* TK_BOOL *);
  270 (* TK_AND *);
  271 (* TK_OR *);
  272 (* TK_XOR *);
  273 (* TK_NOT *);
    0|]

let yytransl_block = [|
  268 (* TK_BOOL_LITERAL *);
  269 (* TK_VAR *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\003\000\005\000\005\000\005\000\005\000\
\005\000\005\000\005\000\004\000\004\000\006\000\000\000"

let yylen = "\002\000\
\001\000\002\000\000\000\019\000\003\000\003\000\003\000\003\000\
\002\000\001\000\001\000\002\000\000\000\004\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\015\000\001\000\000\000\000\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\013\000\
\000\000\000\000\000\000\012\000\000\000\000\000\000\000\000\000\
\000\000\010\000\011\000\000\000\000\000\014\000\000\000\009\000\
\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\
\008\000\000\000\000\000"

let yydgoto = "\002\000\
\004\000\005\000\006\000\017\000\029\000\020\000"

let yysindex = "\255\255\
\005\255\000\000\006\255\000\000\000\000\005\255\015\255\000\000\
\012\255\025\255\013\255\026\255\032\255\033\255\034\255\000\000\
\255\254\030\255\031\255\000\000\036\255\029\255\010\255\035\255\
\010\255\000\000\000\000\010\255\002\255\000\000\014\255\000\000\
\038\255\010\255\010\255\010\255\000\000\039\255\251\254\027\255\
\000\000\010\255\017\255"

let yyrindex = "\000\000\
\047\000\000\000\000\000\000\000\000\000\047\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\003\000\001\000\
\000\000\000\000\002\000"

let yygindex = "\000\000\
\000\000\042\000\000\000\000\000\235\255\000\000"

let yytablesize = 273
let yytable = "\001\000\
\007\000\004\000\006\000\031\000\018\000\003\000\032\000\007\000\
\033\000\035\000\036\000\019\000\039\000\040\000\041\000\034\000\
\035\000\036\000\025\000\009\000\043\000\026\000\027\000\037\000\
\010\000\012\000\028\000\034\000\035\000\036\000\034\000\035\000\
\036\000\011\000\014\000\013\000\015\000\021\000\016\000\022\000\
\023\000\024\000\036\000\042\000\030\000\038\000\003\000\008\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\004\000\006\000\000\000\000\000\000\000\007\000\
\000\000\006\000\007\000\000\000\006\000\000\000\007\000\007\000\
\006\000"

let yycheck = "\001\000\
\000\000\000\000\000\000\025\000\006\001\001\001\028\000\002\001\
\007\001\015\001\016\001\013\001\034\000\035\000\036\000\014\001\
\015\001\016\001\009\001\005\001\042\000\012\001\013\001\010\001\
\013\001\013\001\017\001\014\001\015\001\016\001\014\001\015\001\
\016\001\009\001\003\001\010\001\004\001\008\001\005\001\009\001\
\005\001\013\001\016\001\005\001\010\001\008\001\000\000\006\000\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\001\001\001\001\001\001\255\255\255\255\255\255\007\001\
\255\255\007\001\010\001\255\255\010\001\255\255\014\001\015\001\
\014\001"

let yynames_const = "\
  EOF\000\
  TK_opt\000\
  TK_target\000\
  TK_input\000\
  TK_list\000\
  TK_colon\000\
  TK_old\000\
  TK_new\000\
  TK_bexp\000\
  TK_LP\000\
  TK_RP\000\
  TK_BOOL\000\
  TK_AND\000\
  TK_OR\000\
  TK_XOR\000\
  TK_NOT\000\
  "

let yynames_block = "\
  TK_BOOL_LITERAL\000\
  TK_VAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'caselist) in
    Obj.repr(
# 37 "src/caseParser.mly"
          ( _1 )
# 197 "src/caseParser.ml"
               : (Circuit.bexp * Circuit.bexp) list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'case) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'caselist) in
    Obj.repr(
# 40 "src/caseParser.mly"
               ( _1::_2 )
# 205 "src/caseParser.ml"
               : 'caselist))
; (fun __caml_parser_env ->
    Obj.repr(
# 41 "src/caseParser.mly"
   ( [] )
# 211 "src/caseParser.ml"
               : 'caselist))
; (fun __caml_parser_env ->
    let _4 = (Parsing.peek_val __caml_parser_env 15 : string) in
    let _6 = (Parsing.peek_val __caml_parser_env 13 : string) in
    let _11 = (Parsing.peek_val __caml_parser_env 8 : 'inputlist) in
    let _15 = (Parsing.peek_val __caml_parser_env 4 : 'bexp) in
    let _19 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 47 "src/caseParser.mly"
                                     ( (_15, _19) )
# 222 "src/caseParser.ml"
               : 'case))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'bexp) in
    Obj.repr(
# 50 "src/caseParser.mly"
                    (_2)
# 229 "src/caseParser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 51 "src/caseParser.mly"
                    ( AND(_1, _3) )
# 237 "src/caseParser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 52 "src/caseParser.mly"
                   ( OR(_1, _3) )
# 245 "src/caseParser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'bexp) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 53 "src/caseParser.mly"
                    ( XOR(_1, _3) )
# 253 "src/caseParser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bexp) in
    Obj.repr(
# 54 "src/caseParser.mly"
               ( NOT(_2) )
# 260 "src/caseParser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 55 "src/caseParser.mly"
                   ( CONST _1 )
# 267 "src/caseParser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "src/caseParser.mly"
          (VAR _1)
# 274 "src/caseParser.ml"
               : 'bexp))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'inputlist) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'input) in
    Obj.repr(
# 59 "src/caseParser.mly"
                        ()
# 282 "src/caseParser.ml"
               : 'inputlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 60 "src/caseParser.mly"
   (  )
# 288 "src/caseParser.ml"
               : 'inputlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 63 "src/caseParser.mly"
                           ( )
# 296 "src/caseParser.ml"
               : 'input))
(* Entry main *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let main (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : (Circuit.bexp * Circuit.bexp) list)
