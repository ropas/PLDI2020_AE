cir to graph finished
old graph depth
---graph depth print---
var : om_0 depth : 1
var : om_1 depth : 2
var : om_2 depth : 3
var : om_3 depth : 4
var : om_4 depth : 4
var : om_5 depth : 5
var : om_6 depth : 5
var : om_7 depth : 5
var : om_8 depth : 5
var : om_9 depth : 6
var : om_10 depth : 6
var : om_11 depth : 6
var : om_12 depth : 6
var : om_13 depth : 6
var : om_14 depth : 6
var : om_15 depth : 6
var : om_16 depth : 6
var : om_17 depth : 7
var : om_18 depth : 7
var : om_19 depth : 7
var : om_20 depth : 7
var : om_21 depth : 7
var : om_22 depth : 7
var : om_23 depth : 7
var : om_24 depth : 7
var : om_25 depth : 7
var : om_26 depth : 7
var : om_27 depth : 7
var : om_28 depth : 7
var : om_29 depth : 7
var : om_30 depth : 7
var : om_31 depth : 7
---------------------
============================================= graph opt start ===================================================
initial graph size : 358
initial mult size : 183
whole case num : 500
reduced case num : 112
max case size : 38
min case size : 4
average case size : 13
median case size : 11
(and (not false) norm2) --> norm2
(and (and n325 norm2) n322) --> (and norm2 (and n322 n325))
(not (and (and norm3 norm7) n379)) --> (not (and (and norm7 n379) norm3))
(and n127 (not (and norm3 n63))) --> (xor (and norm3 (and n63 n127)) n127)
(and (and (and n392 norm3) norm7) i_9) --> (and (and norm3 norm7) (and i_9 n392))
(and (and (and n393 norm3) norm7) i_2) --> (and (and norm7 (and i_2 n393)) norm3)
(and (and (and n325 norm3) n322) i_25) --> (and (and norm3 (and i_25 n322)) n325)
(xor (and (and n554 n390) i_9) n618) --> (xor (and (and n390 i_9) n554) n618)
(and (xor (and n107 i_13) n118) n117) --> (xor (and (and n117 i_13) n107) (and n117 n118))
(and (not (and norm3 i_7)) (not i_4)) --> (xor (or (not norm3) (or (not i_7) i_4)) i_4)
(and (and (and n151 n136) norm3) i24) --> (and (and (and i24 n136) n151) norm3)
(and (and n379 (not (xor n371 n373))) n376) --> (and (xor (not n371) n373) (and n376 n379))
(and (and n441 (xor norm3 (not n218))) n225) --> (and (xor (not norm3) n218) (and n225 n441))
(xor (and n107 (not (and n78 n63))) n125) --> (xor (xor (and (and n107 n63) n78) n125) n107)
(and n261 (not (xor n215 (and n177 i_23)))) --> (xor (and (and i_23 n261) n177) (and (not n215) n261))
(and n199 (not (xor (and n195 norm4) norm4))) --> (xor (and norm4 (and (not n195) n199)) n199)
(and n101 (not (and (and n85 n78) n74))) --> (xor (and (and n74 n85) (and n78 n101)) n101)
(and (and (not n94) (not norm4)) (not n63)) --> (not (or norm4 (or n63 n94)))
(and (not (and (and n65 n66) n97)) i18) --> (xor (and (and (and i18 n66) n65) n97) i18)
(and (not (and n277 (and n271 n232))) i30) --> (xor (and (and (and i30 n277) n271) n232) i30)
(and (not (and n255 (and n237 n232))) i27) --> (xor (and (and (and i27 n237) n255) n232) i27)
(xor (xor n610 n609) (and (and n547 n322) i_24)) --> (xor (xor (and (and i_24 n322) n547) n610) n609)
(and (xor norm2 (and (not n313) (not n273))) norm2) --> norm2
(and (not (xor i_15 (not i_7))) (and norm5 norm11)) --> (and (and norm11 (xor i_15 i_7)) norm5)
(and n155 (and (and n135 (not n132)) (not n128))) --> (and (not (or n128 n132)) (and n155 n135))
(and (xor (xor n286 (and n269 n213)) n249) n193) --> (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
(and (xor n333 (and (and n329 norm4) n317)) n151) --> (and (xor (and norm4 (and n329 n317)) n333) n151)
(and (and (and n94 n87) (and n79 n72)) n69) --> (and (and (and n69 n72) n87) (and n94 n79))
(and (and n158 (and (not n148) (not n136))) n98) --> (and (not (or n148 n136)) (and n98 n158))
(not (and (not (and n250 (and n205 n162))) n247)) --> (xor (not (and (and (and n247 n205) n250) n162)) n247)
(and (and n230 n209) (and n193 (and n152 n117))) --> (and (and (and n152 n230) n117) (and n193 n209))
(and (xor norm2 (and i37 i5)) (and norm7 norm12)) --> (and (and norm7 norm2) norm12)
(and (and (and n379 (not (xor n371 n373))) n376) i_10) --> (and (and (xor (not n373) n371) (and i_10 n376)) n379)
(and (and (and n441 (xor norm4 (not n218))) n225) i_9) --> (and (and (xor (not norm4) n218) (and i_9 n225)) n441)
(and (not (xor (xor n286 (and n269 n213)) n249)) n184) --> (xor (and (xor (not n286) n249) n184) (and (and n184 n213) n269))
(and (not (and (not (and i_7 (not i_6))) norm6)) i_8) --> (xor (and (or (not i_7) i_6) (and norm6 i_8)) i_8)
(and (not (and (not i_6) i_4)) (not (and i_8 i_6))) --> (xor (not (and (xor i_8 i_4) i_6)) i_4)
(and (not (and n199 norm3)) (not (and n187 (not norm3)))) --> (xor (or (xor (not n187) n199) norm3) n199)
(and n218 (not (and (and n213 n212) (and n177 n85)))) --> (xor (and (and (and n212 n218) n85) (and n177 n213)) n218)
(and (not (and (and n261 n255) (and n237 n232))) i28) --> (xor (and (and (and (and i28 n261) n237) n255) n232) i28)
(and (not (and (and (and n284 n270) n232) n254)) i31) --> (xor (and (and (and (and i31 n284) n270) n232) n254) i31)
(xor (and (xor n325 (not (and n254 n207))) n210) i63) --> (xor (xor (and (and n210 n254) n207) (and (not n325) n210)) i63)
(xor n198 (not (and n194 (and n174 (and n114 n87))))) --> (xor (not (and (and (and n114 n194) n87) n174)) n198)
(xor (xor (xor n690 n689) (and (and n627 n322) i_24)) n686) --> (xor (xor (xor (and (and i_24 n322) n627) n686) n689) n690)
(and (and (not (or n217 n168)) (and (not n120) n226)) i_32) --> (and (and (and i_32 n226) (not n168)) (not (or n217 n120)))
(not (and (and (not (and (and n135 n133) n129)) norm6) n47)) --> (or (not (and norm6 n47)) (and (and n135 n129) n133))
(and (not (and (and n135 (not n132)) (not n128))) (not n47)) --> (xor (or (or (not n135) n47) (or n132 n128)) n47)
(and (xor (xor n286 (and n269 n213)) (and n248 n213)) n281) --> (xor (and (xor n269 n248) (and n281 n213)) (and n281 n286))
(and n251 (not (xor (and (not norm5) n143) (and norm5 i_25)))) --> (xor (and (and (xor i_25 n143) n251) norm5) (and (not n143) n251))
(and (xor (xor n359 (xor n272 (and n253 n215))) n186) n157) --> (xor (and (xor (xor n186 n272) n359) n157) (and (and n157 n215) n253))
(and (not (and (and norm4 i_6) i_7)) (not (and i_6 i_5))) --> (xor (or (or (not i_6) i_5) (and norm4 i_7)) i_6)
(and (xor (and (and i_6 i_8) i_7) i_4) (and i_7 i_6)) --> (and (and (xor i_8 i_4) i_6) i_7)
(and (and (not (and (not i_7) i_6)) i_3) (xor i_6 norm6)) --> (and (and (xor norm6 i_6) i_3) (or (not i_6) i_7))
(and (and n121 (not (and (not n115) n34))) (and norm6 i_3)) --> (and (and (and i_3 n121) norm6) (or (not n34) n115))
(and (not (xor n245 (not (and (and n240 n230) n226)))) n236) --> (xor (and (and (and n230 n236) n240) n226) (and n236 n245))
(and (and (and (not i22) (not i21)) (not i23)) (not i20)) --> (not (or (or i20 i21) (or i22 i23)))
(and n141 (and (and n103 (and n95 n80)) (and n114 n99))) --> (and (and (and (and n99 n141) n114) (and n103 n95)) n80)
(and (and (and n158 (and (not n148) (not n136))) n98) n65) --> (and (and (not (or n136 n148)) (and n65 n98)) n158)
(and (not (and (not i18) i17)) (not (and (not i17) i16))) --> (xor (not (or (xor i16 i18) i17)) i18)
(and n199 (and (and n192 n165) (and n152 (and n116 n103)))) --> (and (and (and (and n199 n192) n103) (and n116 n152)) n165)
(and n180 (and (and n173 n142) (and n114 (and n86 n74)))) --> (and (and (and (and n180 n86) n74) (and n114 n173)) n142)
(and (and (not (and norm4 n333)) n150) (not (and (not norm4) n336))) --> (and (xor (or (xor (not n336) n333) norm4) n333) n150)
(and (and (and n251 (xor n247 (not n237))) n218) (and n214 n207)) --> (and (and (and (and n251 n218) n207) (xor (not n247) n237)) n214)
(and (and n251 (xor n247 (not (and (and n235 n232) n222)))) n218) --> (and (and (xor (not (and (and n235 n222) n232)) n247) n218) n251)
(and n80 (and (not (xor (xor (xor n48 n45) i_2) i_10)) n53)) --> (and (xor (xor (xor (not i_2) i_10) n45) n48) (and n53 n80))
(and (not (xor (xor n199 (and n188 n152)) (and n175 n152))) n138) --> (xor (and (xor n188 n175) (and n138 n152)) (and (not n199) n138))
(and n211 (not (and (not (and (and n204 n199) norm6)) (not n187)))) --> (or (and (and (and n199 n211) n204) norm6) (and n211 n187))
(and (and (not (and (not i_9) i_3)) i_7) (not (and i_9 norm7))) --> (and (xor norm7 i_9) i_7)
(and (not (and (not (and i_9 i_7)) i_8)) (not (and i_7 i_4))) --> (xor (not (and (and (xor i_4 i_8) i_7) (or i_4 i_9))) i_8)
(and norm1 (not (and (not norm6) (not (and n158 (and n149 n137)))))) --> (and (or norm6 n158) norm1)
(and norm1 (xor (and (not n369) (and n365 n325)) (not (and n365 n325)))) --> norm1
(and (not (xor (and n203 (not (xor n200 n197))) (xor n200 n197))) n188) --> (and (xor (not n200) n197) (and (not n203) n188))
(and n388 (and n359 (xor (xor n271 (and n262 n215)) (and n253 n215)))) --> (and (xor (and (xor n253 n262) n215) n271) (and n359 n388))
(and (and (and n52 (not n47)) (not (and (and n30 n26) n23))) n22) --> (and (not (or (and (and n23 n26) n30) n47)) (and n22 n52))
(not (xor (not (and (and (and (xor n127 n133) n116) n104) n96)) n133)) --> (xor (and (and (xor n133 n127) n104) (and n116 n96)) n133)
(and (not n164) (and (and n151 n131) (and (not n115) (and n102 n85)))) --> (and (and (and (and n102 n131) n85) n151) (not (or n115 n164)))
(xor (and n199 (not (xor (and n195 norm5) norm5))) (xor (and n195 norm5) norm5)) --> (xor (and norm5 (not (or n195 n199))) n199)
(and (and (not (and i_8 (not i_7))) (not i_9)) (not (and (not i_8) i_7))) --> (not (or (xor i_7 i_8) i_9))
(xor (and (xor n359 (xor n271 (and n262 n215))) n186) (and (and n186 n215) n253)) --> (xor (and (and (xor n253 n262) n186) n215) (and (xor n359 n271) n186))
(and (and (not (and (not i_6) i_4)) i_5) (not (and (and norm8 i_6) (not i_4)))) --> (xor (and (and (xor i_4 i_6) i_5) (or norm8 i_4)) i_5)
(and (not (and (not (and i_9 i_5)) (and i_8 i_7))) (not (and (not i_7) i_5))) --> (xor (or (not (and i_7 i_8)) (and i_5 i_9)) (and (not i_7) i_5))
(and (not (not (or (xor i_7 i_8) i_9))) (not (and (not (and i_8 i_7)) i_5))) --> (and (xor (or (xor i_8 i_7) (xor i_5 i_9)) i_5) (or (not i_5) i_7))
(and (not (xor norm3 (not (and i33 i1)))) (and (not (xor i33 (not i1))) norm13)) --> (and (and (xor i33 i1) norm3) norm13)
(and norm1 (xor (and (xor (and n384 n369) n387) (and n384 n369)) (not (and n384 n369)))) --> norm1
(and (not (and n149 (not (and (not norm6) n126)))) (not (and n142 (and (not norm6) n126)))) --> (xor (or (not (and (xor n149 n142) n126)) norm6) n149)
(xor n212 (xor (and (not (xor (and n203 n202) n201)) n188) (xor (and n203 n202) n201))) --> (xor (xor (and (and (not n188) n203) n202) (or n188 n201)) n212)
(xor (and (not (xor (xor (and i_16 i_8) i_7) i_15)) (and norm7 norm15)) (and norm7 norm15)) --> (and (and norm7 (xor i_15 i_7)) norm15)
(and (and (not (and (not i7) i6)) (not (and norm7 i4))) (not (and (not i6) i5))) --> (and (xor (or (xor i6 i4) norm7) i4) (or (not i6) i7))
(and (and norm2 (not (xor (and (not n215) (not n167)) (not (and (not n216) (not n119)))))) n225) --> (and (xor (or n167 n215) (or n216 n119)) (and norm2 n225))
(not (and (and n135 (not (and (and n63 n130) norm6))) (not (and n127 (not (and norm6 n63)))))) --> (or (xor (and (and (xor n130 n127) n63) norm6) n127) (not n135))
(and (not (xor (or (not norm5) (or (not i_7) i_4)) i_4)) (not (and (and i_7 i_4) norm5))) --> (xor (and norm5 i_7) i_4)
(and (not (and (not i23) i22)) (and (not (and (not i22) i21)) (not (and (not i21) i20)))) --> (and (xor (not (or (xor i20 i22) i21)) i22) (or (not i22) i23))
(and (and n450 (not (xor norm4 (not norm10)))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) --> (and (xor norm10 norm4) n450)
(and (and n135 (not (and (and n63 n130) (not n77)))) (not (and n127 (not (and (not n77) n63))))) --> (and (xor (or (not (and (xor n130 n127) n63)) n77) n127) n135)
(and (not (and (not (and i_7 i_6)) i_9)) (not (and (and (not i_9) i_7) (not (and i_6 i_5))))) --> (xor (not (and (or i_5 i_9) (and i_6 i_7))) (or i_9 i_7))
(and (xor (and (or (not i_7) i_6) (and (not i_9) i_8)) i_8) (not (and (and i_9 i_7) norm10))) --> (and (xor (and norm10 i_7) i_9) i_8)
(and (not (and n133 (not (and n116 (and n104 n96))))) (not (and (and n127 n96) (and n104 n116)))) --> (xor (not (and (and (and (xor n127 n133) n116) n104) n96)) n133)
(and (and (xor (xor n313 n273) norm4) (xor (and (xor n313 n273) norm4) (and (not n313) (not n273)))) n322) --> (and (and norm4 n322) (not (or n313 n273)))
(and (and (and n387 (xor norm4 (not norm10))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) i_26) --> (and (not (or norm4 norm10)) (and i_26 n387))
(and (and (xor n216 (not n119)) (not (xor (and (not n215) (not n167)) (not (and norm11 (not n119)))))) n225) --> (and (and (xor norm11 n119) n225) (xor (or n167 n215) n119))
(and (not (and (not (and i_8 i_7)) i_5)) (xor (or (or (not i_6) i_5) (and (not i_8) i_7)) i_6)) --> (xor (not (or (and (xor i_6 i_8) i_7) (xor i_5 i_8))) i_8)
(and (and (xor (not n217) (xor n168 n120)) (xor (and (not n217) (xor n168 n120)) (and (not n168) norm11))) n226) --> (and (not (or n217 n168)) (and norm11 n226))
(and (and (xor (xor n313 n273) norm4) (not (xor (and (xor n313 n273) norm4) (and (not n313) (not n273))))) n322) --> (and (and (xor (xor norm4 n313) n273) n322) (or n313 n273))
(and (and (and n373 (not (xor norm5 (not norm12)))) (xor (and (not (xor norm5 (not norm12))) norm12) (not norm12))) i_24) --> (and (and (xor norm5 norm12) i_24) n373)
(and (and (not (and (not (and i_7 i_6)) (not i_3))) i_4) (not (and (and (xor (not i_2) i_6) i_3) (or (not i_6) i_7)))) --> (and (or (and (xor i_7 i_3) i_6) (and (xor i_6 i_2) i_3)) i_4)
(xor (and n305 (xor (and (xor n264 n257) (not n254)) (not n254))) (and n305 (not (xor (and (xor n264 n257) (not n254)) (not n254))))) --> n305
(and (xor (and (xor (xor n312 n288) (xor n167 n143)) norm6) (and (xor n312 n288) (xor n167 n143))) (and (xor (xor n312 n288) (xor n167 n143)) norm6)) --> (and (xor (xor (xor n288 n143) n312) n167) norm6)
(xor (and (xor (and (xor n313 n273) (xor n216 n192)) (and (not n313) (not n273))) (and (xor n313 n273) (xor n216 n192))) (not (and (xor n313 n273) (xor n216 n192)))) --> true
(and (not (xor (not (and (and (xor i_4 i_8) i_7) (or i_4 i_9))) i_8)) (not (and (and (not (and i_9 i_7)) i_8) (not (and (not (and (not i_9) (not i_7))) (not i_4)))))) --> (and (xor (and (xor i_9 i_7) i_8) i_4) (or (not i_4) i_7))
(and (and (xor norm3 (xor norm8 norm13)) (xor (and norm3 (xor norm8 norm13)) norm21)) (xor (and (xor (and norm3 (xor norm8 norm13)) norm21) (and norm3 (xor norm8 norm13))) (not (and norm3 (xor norm8 norm13))))) --> (and norm21 norm3)
(and (and (xor n364 (not n324)) (xor norm5 (not (and (not n364) (not n324))))) (xor (and (not (xor norm5 (not (and (not n364) (not n324))))) (and (not n364) (not n324))) (not (and (not n364) (not n324))))) --> (and (not norm5) (and n324 n364))
(and (and (xor (xor norm4 norm9) norm14) (xor (and (xor norm4 norm9) norm14) (and norm4 norm9))) (xor (and (xor (and (xor norm4 norm9) norm14) (and norm4 norm9)) (and (xor norm4 norm9) norm14)) (not (and (xor norm4 norm9) norm14)))) --> (and (and norm14 norm4) norm9)


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 358
selected cripath : 
om_23 n338 n332 n262 n254 n170 n164 n130 n126 n113 n111 n103 n97 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n170
tmpvar#2  -->  CVar_n253
tmpvar#0  -->  CVar_n261
tmpvar#3  -->  CVar_n331
---------------------

old bexp : (and (xor (and n107 i_13) n118) n117)
new bexp : (xor (and (and n117 i_13) n107) (and n117 n118))
tgt bexp     : (and (xor (and n170 n253) n261) n331)
sub old bexp : (and (xor (and n170 n253) n261) n331)
sub new bexp : (xor (and (and n331 n253) n170) (and n331 n261))
before depth : 7
after depth : 6
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_i33
tmpvar#2  -->  CVar_i1
tmpvar#0  -->  CVar_n97
tmpvar#3  -->  CVar_n107
---------------------

old bexp : (and (and (not (xor i33 (not i1))) norm13) (not (xor (not (and i1 i33)) norm3)))
new bexp : (and (and (xor i33 i1) norm3) norm13)
tgt bexp     : (and (and (not (xor i33 (not i1))) n97) (not (xor (not (and i1 i33)) n107)))
sub old bexp : (and (and (not (xor i33 (not i1))) n97) (not (xor (not (and i1 i33)) n107)))
sub new bexp : (and (and (xor i33 i1) n107) n97)
before depth : 3
after depth : 2
graph replaced


graph size : 362
graph mult size : 186
optimal graph replaced, cost : 40176
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 362
selected cripath : 
om_21 n312 n308 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 362
selected cripath : 
n211 n213 n225 n252 n253 n254 n262 n346 n354 om_24 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 362
selected cripath : 
om_28 n406 n398 n262 n254 n170 n169 n165 n146 n145 n135 n131 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 362
selected cripath : 
n290 n292 n294 n295 n345 n370 n371 n377 om_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 362
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n268 n269 om_17 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 362
selected cripath : 
om_26 n377 n376 n372 n353 n347 n301 n297 n278 n277 n267 n263 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n301
tmpvar#2  -->  CVar_n344
tmpvar#0  -->  CVar_n352
tmpvar#3  -->  CVar_n369
---------------------

old bexp : (and (xor (and n107 i_13) n118) n117)
new bexp : (xor (and (and n117 i_13) n107) (and n117 n118))
tgt bexp     : (and (xor (and n301 n344) n352) n369)
sub old bexp : (and (xor (and n301 n344) n352) n369)
sub new bexp : (xor (and (and n369 n344) n301) (and n369 n352))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
om_21 n312 n308 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
om_27 n390 n384 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n296 n302 om_20 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
om_20 n302 n296 n262 n254 n253 n252 n251 n236 n234 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
n114 n118 n128 n129 n130 n164 n170 n254 n262 n308 n312 om_21 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
om_21 n312 n308 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
om_21 n312 n308 n262 n254 n253 n252 n251 n236 n234 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
om_21 n312 n308 n262 n254 n170 n164 n130 n129 n128 n118 n114 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 365
selected cripath : 
om_28 n406 n405 n399 n353 n347 n301 n297 n278 n277 n267 n263 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n301
tmpvar#2  -->  CVar_n344
tmpvar#0  -->  CVar_n352
tmpvar#3  -->  CVar_n396
---------------------

old bexp : (and (xor (and n107 i_13) n118) n117)
new bexp : (xor (and (and n117 i_13) n107) (and n117 n118))
tgt bexp     : (and (xor (and n301 n344) n352) n396)
sub old bexp : (and (xor (and n301 n344) n352) n396)
sub new bexp : (xor (and (and n396 n344) n301) (and n396 n352))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 368
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n296 n302 om_20 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 368
selected cripath : 
om_29 n419 n413 n412 n345 n295 n294 n282 n280 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 368
selected cripath : 
n263 n267 n277 n278 n297 n301 n347 n353 n362 n363 n364 om_25 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n301
tmpvar#2  -->  CVar_n344
tmpvar#0  -->  CVar_n352
tmpvar#3  -->  CVar_n357
---------------------

old bexp : (and (xor (and n107 i_13) n118) n117)
new bexp : (xor (and (and n117 i_13) n107) (and n117 n118))
tgt bexp     : (and (xor (and n301 n344) n352) n357)
sub old bexp : (and (xor (and n301 n344) n352) n357)
sub new bexp : (xor (and (and n357 n344) n301) (and n357 n352))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n263 n267 n277 n278 n297 n301 n347 n353 n428 n434 n435 om_30 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
om_25 n364 n360 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n131 n135 n145 n146 n165 n169 n170 n254 n262 n308 n312 om_21 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n285 n289 om_19 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n221 n223 n225 n252 n253 n254 n262 n346 n354 om_24 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n131 n135 n145 n146 n165 n169 n170 n254 n262 n308 n312 om_21 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n275 n279 om_18 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n263 n265 n274 n295 n345 n442 n443 n451 om_31 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
om_25 n364 n360 n359 n345 n295 n294 n292 n290 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n313 n315 n317 n344 n345 n359 n360 n364 om_25 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
om_25 n364 n360 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
om_27 n390 n389 n385 n353 n347 n301 n297 n278 n277 n267 n263 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n301
tmpvar#2  -->  CVar_n344
tmpvar#0  -->  CVar_n352
tmpvar#3  -->  CVar_n382
---------------------

old bexp : (and (xor (and n107 i_13) n118) n117)
new bexp : (xor (and (and n117 i_13) n107) (and n117 n118))
tgt bexp     : (and (xor (and n301 n344) n352) n382)
sub old bexp : (and (xor (and n301 n344) n352) n382)
sub new bexp : (xor (and (and n382 n344) n301) (and n382 n352))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_17 n269 n268 n262 n254 n170 n164 n130 n129 n128 n118 n114 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_20 n302 n296 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_24 n354 n346 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_23 n338 n332 tmp76 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
n131 n135 n145 n146 n165 n169 n170 n254 n262 n275 n279 om_18 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_23 n338 n332 tmp76 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_17 n269 n268 n262 n254 n170 n169 n165 n146 n145 n135 n131 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_29 n419 n418 n414 n353 n347 n301 n297 n278 n277 n267 n263 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_18 n279 n275 n262 n254 n170 n164 n130 n129 n128 n118 n114 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
n178 n180 n182 n203 n253 n254 n262 n285 n289 om_19 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
om_29 n419 n413 n262 n254 n253 n252 n251 n236 n234 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n371 n377 om_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 374
selected cripath : 
n313 n315 n317 n344 n345 n359 n360 n364 om_25 

dangling node deleted : nodeVal : AND index : 37
dangling node deleted : nodeVal : AND index : 521
dangling node deleted : nodeVal : n110 index : 1
dangling node deleted : nodeVal : NOT index : 35
cleanup fin
sharing detect fin
cleanup fin
graph opt finished
INORDER = i9 i8 i7 i63 i62 i61 i60 i6 i59 i58 i57 i56 i55 i54 i53 i52 i51 i50 i5 i49 i48 i47 i46 i45 i44 i43 i42 i41 i40 i4 i39 i38 i37 i36 i35 i34 i33 i32 i31 i30 i3 i29 i28 i27 i26 i25 i24 i23 i22 i21 i20 i2 i19 i18 i17 i16 i15 i14 i13 i12 i11 i10 i1 i0;
OUTORDER = om_9 om_8 om_7 om_6 om_5 om_4 om_31 om_30 om_3 om_29 om_28 om_27 om_26 om_25 om_24 om_23 om_22 om_21 om_20 om_2 om_19 om_18 om_17 om_16 om_15 om_14 om_13 om_12 om_11 om_10 om_1 om_0;
n105 = (i1 * i33);
n107 = (!i2 * i34) + (i2 * !i34);
n114 = (i2 * i34);
n115 = (!i3 * i35) + (i3 * !i35);
n121 = (i3 * i35);
n122 = (!i36 * i4) + (i36 * !i4);
n131 = (i36 * i4);
n132 = (!i37 * i5) + (i37 * !i5);
n138 = (i37 * i5);
n139 = (!i38 * i6) + (i38 * !i6);
n148 = (i38 * i6);
n149 = (!i39 * i7) + (i39 * !i7);
n158 = (i39 * i7);
n159 = (!i40 * i8) + (i40 * !i8);
n171 = (i40 * i8);
n172 = (!i41 * i9) + (i41 * !i9);
n178 = (i41 * i9);
n179 = (!i10 * i42) + (i10 * !i42);
n188 = (i10 * i42);
n189 = (!i11 * i43) + (i11 * !i43);
n198 = (i11 * i43);
n199 = (!i12 * i44) + (i12 * !i44);
n211 = (i12 * i44);
n212 = (!i13 * i45) + (i13 * !i45);
n221 = (i13 * i45);
n222 = (!i14 * i46) + (i14 * !i46);
n234 = (i14 * i46);
n235 = (!i15 * i47) + (i15 * !i47);
n247 = (i15 * i47);
n248 = (!i16 * i48) + (i16 * !i48);
n263 = (i16 * i48);
n264 = (!i17 * i49) + (i17 * !i49);
n270 = (i17 * i49);
n271 = (!i18 * i50) + (i18 * !i50);
n280 = (i18 * i50);
n281 = (!i19 * i51) + (i19 * !i51);
n290 = (i19 * i51);
n291 = (!i20 * i52) + (i20 * !i52);
n303 = (i20 * i52);
n304 = (!i21 * i53) + (i21 * !i53);
n313 = (i21 * i53);
n314 = (!i22 * i54) + (i22 * !i54);
n326 = (i22 * i54);
n327 = (!i23 * i55) + (i23 * !i55);
n339 = (i23 * i55);
n340 = (!i24 * i56) + (i24 * !i56);
n355 = (i24 * i56);
n356 = (!i25 * i57) + (i25 * !i57);
n365 = (i25 * i57);
n366 = (!i26 * i58) + (i26 * !i58);
n378 = (i26 * i58);
n379 = (!i27 * i59) + (i27 * !i59);
n391 = (i27 * i59);
n392 = (!i28 * i60) + (i28 * !i60);
n407 = (i28 * i60);
n408 = (!i29 * i61) + (i29 * !i61);
n420 = (i29 * i61);
n421 = (!i30 * i62) + (i30 * !i62);
n436 = (i30 * i62);
n437 = (!i31 * i63) + (i31 * !i63);
n452 = (i31 * i63);
n97 = (i0 * i32);
n99 = (!i1);
tmp596 = (!i1 * i33) + (i1 * !i33);
n100 = (!i33 * n99) + (i33 * !n99);
n106 = (!n105);
n108 = (!n106 * n107) + (n106 * !n107);
n112 = (n105 * n107);
n116 = (!n114 * n115) + (n114 * !n115);
n118 = (n114 * n115);
n123 = (!n121 * n122) + (n121 * !n122);
n127 = (n121 * n122);
n133 = (!n131 * n132) + (n131 * !n132);
n135 = (n131 * n132);
n140 = (!n138 * n139) + (n138 * !n139);
n144 = (n138 * n139);
n150 = (!n148 * n149) + (n148 * !n149);
n154 = (n148 * n149);
n160 = (!n158 * n159) + (n158 * !n159);
n166 = (n158 * n159);
n173 = (!n171 * n172) + (n171 * !n172);
n175 = (n171 * n172);
n180 = (!n178 * n179) + (n178 * !n179);
n184 = (n178 * n179);
n190 = (!n188 * n189) + (n188 * !n189);
n194 = (n188 * n189);
n200 = (!n198 * n199) + (n198 * !n199);
n206 = (n198 * n199);
n213 = (!n211 * n212) + (n211 * !n212);
n217 = (n211 * n212);
n223 = (!n221 * n222) + (n221 * !n222);
n229 = (n221 * n222);
n236 = (!n234 * n235) + (n234 * !n235);
n242 = (n234 * n235);
n249 = (!n247 * n248) + (n247 * !n248);
n257 = (n247 * n248);
n265 = (!n263 * n264) + (n263 * !n264);
n267 = (n263 * n264);
n272 = (!n270 * n271) + (n270 * !n271);
n276 = (n270 * n271);
n282 = (!n280 * n281) + (n280 * !n281);
n286 = (n280 * n281);
n292 = (!n290 * n291) + (n290 * !n291);
n298 = (n290 * n291);
n305 = (!n303 * n304) + (n303 * !n304);
n309 = (n303 * n304);
n315 = (!n313 * n314) + (n313 * !n314);
n321 = (n313 * n314);
n328 = (!n326 * n327) + (n326 * !n327);
n334 = (n326 * n327);
n341 = (!n339 * n340) + (n339 * !n340);
n349 = (n339 * n340);
n357 = (!n355 * n356) + (n355 * !n356);
n361 = (n355 * n356);
n367 = (!n365 * n366) + (n365 * !n366);
n373 = (n365 * n366);
n380 = (!n378 * n379) + (n378 * !n379);
n386 = (n378 * n379);
n393 = (!n391 * n392) + (n391 * !n392);
n401 = (n391 * n392);
n409 = (!n407 * n408) + (n407 * !n408);
n415 = (n407 * n408);
n422 = (!n420 * n421) + (n420 * !n421);
n430 = (n420 * n421);
n438 = (!n436 * n437) + (n436 * !n437);
n446 = (n436 * n437);
n453 = (!n437 * n452) + (n437 * !n452);
n98 = (!n97);
tmp595 = (n107 * tmp596);
n102 = (!n100);
n111 = (n97 * tmp595);
n113 = (!n111 * n112) + (n111 * !n112);
n119 = (n113 * n116);
n120 = (!n118 * n119) + (n118 * !n119);
n125 = (n116 * n123);
n128 = (n118 * n123);
n129 = (!n127 * n128) + (n127 * !n128);
n142 = (n133 * n140);
n145 = (n135 * n140);
n146 = (!n144 * n145) + (n144 * !n145);
n152 = (n142 * n150);
n155 = (n146 * n150);
n156 = (!n154 * n155) + (n154 * !n155);
n162 = (n150 * n160);
n167 = (n154 * n160);
n168 = (!n166 * n167) + (n166 * !n167);
n182 = (n173 * n180);
n185 = (n175 * n180);
n186 = (!n184 * n185) + (n184 * !n185);
n192 = (n182 * n190);
n195 = (n186 * n190);
n196 = (!n194 * n195) + (n194 * !n195);
n202 = (n190 * n200);
n207 = (n194 * n200);
n208 = (!n206 * n207) + (n206 * !n207);
n225 = (n213 * n223);
n230 = (n217 * n223);
n231 = (!n229 * n230) + (n229 * !n230);
n238 = (n225 * n236);
n243 = (n231 * n236);
n244 = (!n242 * n243) + (n242 * !n243);
n251 = (n236 * n249);
n258 = (n242 * n249);
n259 = (!n257 * n258) + (n257 * !n258);
n274 = (n265 * n272);
n277 = (n267 * n272);
n278 = (!n276 * n277) + (n276 * !n277);
n284 = (n274 * n282);
n287 = (n278 * n282);
n288 = (!n286 * n287) + (n286 * !n287);
n294 = (n282 * n292);
n299 = (n286 * n292);
n300 = (!n298 * n299) + (n298 * !n299);
n317 = (n305 * n315);
n322 = (n309 * n315);
n323 = (!n321 * n322) + (n321 * !n322);
n330 = (n317 * n328);
n335 = (n323 * n328);
n336 = (!n334 * n335) + (n334 * !n335);
n343 = (n328 * n341);
n350 = (n334 * n341);
n351 = (!n349 * n350) + (n349 * !n350);
n369 = (n357 * n367);
n374 = (n361 * n367);
n375 = (!n373 * n374) + (n373 * !n374);
n382 = (n369 * n380);
n387 = (n375 * n380);
n388 = (!n386 * n387) + (n386 * !n387);
n395 = (n380 * n393);
n402 = (n386 * n393);
n403 = (!n401 * n402) + (n401 * !n402);
n424 = (n409 * n422);
n431 = (n415 * n422);
n432 = (!n430 * n431) + (n430 * !n431);
n440 = (n424 * n438);
n447 = (n432 * n438);
n448 = (!n446 * n447) + (n446 * !n447);
om_0 = (!n100 * n98) + (n100 * !n98);
om_2 = (!n113 * n116) + (n113 * !n116);
om_3 = (!n120 * n123) + (n120 * !n123);
n103 = (n102 * n97);
n126 = (n113 * n125);
n130 = (!n126 * n129) + (n126 * !n129);
n143 = (n130 * n142);
n147 = (!n143 * n146) + (n143 * !n146);
n153 = (n130 * n152);
n157 = (!n153 * n156) + (n153 * !n156);
n163 = (n142 * n162);
n165 = (n146 * n162);
n169 = (!n165 * n168) + (n165 * !n168);
n203 = (n182 * n202);
n205 = (n186 * n202);
n209 = (!n205 * n208) + (n205 * !n208);
n226 = (n203 * n225);
n228 = (n209 * n225);
n232 = (!n228 * n231) + (n228 * !n231);
n239 = (n203 * n238);
n241 = (n209 * n238);
n245 = (!n241 * n244) + (n241 * !n244);
n252 = (n225 * n251);
n256 = (n231 * n251);
n260 = (!n256 * n259) + (n256 * !n259);
n295 = (n274 * n294);
n297 = (n278 * n294);
n301 = (!n297 * n300) + (n297 * !n300);
n318 = (n295 * n317);
n320 = (n301 * n317);
n324 = (!n320 * n323) + (n320 * !n323);
n331 = (n295 * n330);
n333 = (n301 * n330);
n337 = (!n333 * n336) + (n333 * !n336);
n344 = (n317 * n343);
n348 = (n323 * n343);
n352 = (!n348 * n351) + (n348 * !n351);
n396 = (n369 * n395);
n400 = (n375 * n395);
n404 = (!n400 * n403) + (n400 * !n403);
n425 = (n396 * n424);
n429 = (n404 * n424);
n433 = (!n429 * n432) + (n429 * !n432);
n441 = (n396 * n440);
n445 = (n404 * n440);
n449 = (!n445 * n448) + (n445 * !n448);
n104 = (!n103);
n136 = (n130 * n133);
n164 = (n130 * n163);
n170 = (!n164 * n169) + (n164 * !n169);
n193 = (n170 * n192);
n197 = (!n193 * n196) + (n193 * !n196);
n204 = (n170 * n203);
n210 = (!n204 * n209) + (n204 * !n209);
n215 = (n203 * n213);
n218 = (n209 * n213);
n227 = (n170 * n226);
n233 = (!n227 * n232) + (n227 * !n232);
n240 = (n170 * n239);
n246 = (!n240 * n245) + (n240 * !n245);
n253 = (n203 * n252);
n255 = (n209 * n252);
n261 = (!n255 * n260) + (n255 * !n260);
n307 = (n295 * n305);
n310 = (n301 * n305);
n345 = (n295 * n344);
n347 = (n301 * n344);
n353 = (!n347 * n352) + (n347 * !n352);
n383 = (n345 * n382);
n385 = (n353 * n382);
n389 = (!n385 * n388) + (n385 * !n388);
n397 = (n345 * n396);
n399 = (n353 * n396);
n405 = (!n399 * n404) + (n399 * !n404);
n411 = (n396 * n409);
n416 = (n404 * n409);
n426 = (n345 * n425);
n428 = (n353 * n425);
n434 = (!n428 * n433) + (n428 * !n433);
n442 = (n345 * n441);
n444 = (n353 * n441);
n450 = (!n444 * n449) + (n444 * !n449);
om_4 = (!n130 * n133) + (n130 * !n133);
om_6 = (!n147 * n150) + (n147 * !n150);
om_7 = (!n157 * n160) + (n157 * !n160);
tmp75 = (n253 * n331);
tmp76 = (n261 * n331);
n137 = (!n135 * n136) + (n135 * !n136);
n176 = (n170 * n173);
n183 = (n170 * n182);
n216 = (n170 * n215);
n219 = (!n217 * n218) + (n217 * !n218);
n254 = (n170 * n253);
n262 = (!n254 * n261) + (n254 * !n261);
n308 = (n262 * n307);
n311 = (!n309 * n310) + (n309 * !n310);
n319 = (n262 * n318);
n325 = (!n319 * n324) + (n319 * !n324);
n346 = (n262 * n345);
n354 = (!n346 * n353) + (n346 * !n353);
n359 = (n345 * n357);
n362 = (n353 * n357);
n370 = (n345 * n369);
n372 = (n353 * n369);
n384 = (n262 * n383);
n390 = (!n384 * n389) + (n384 * !n389);
n398 = (n262 * n397);
n406 = (!n398 * n405) + (n398 * !n405);
n412 = (n345 * n411);
n414 = (n353 * n411);
n417 = (!n415 * n416) + (n415 * !n416);
n427 = (n262 * n426);
n435 = (!n427 * n434) + (n427 * !n434);
n443 = (n262 * n442);
n451 = (!n443 * n450) + (n443 * !n450);
om_1 = (!n104 * n108) + (n104 * !n108);
om_11 = (!n197 * n200) + (n197 * !n200);
om_12 = (!n210 * n213) + (n210 * !n213);
om_14 = (!n233 * n236) + (n233 * !n236);
om_15 = (!n246 * n249) + (n246 * !n249);
om_8 = (!n170 * n173) + (n170 * !n173);
tmp74 = (n170 * tmp75);
n177 = (!n175 * n176) + (n175 * !n176);
n187 = (!n183 * n186) + (n183 * !n186);
n220 = (!n216 * n219) + (n216 * !n219);
n268 = (n262 * n265);
n275 = (n262 * n274);
n285 = (n262 * n284);
n289 = (!n285 * n288) + (n285 * !n288);
n296 = (n262 * n295);
n302 = (!n296 * n301) + (n296 * !n301);
n312 = (!n308 * n311) + (n308 * !n311);
n332 = (!tmp74 * tmp76) + (tmp74 * !tmp76);
n338 = (!n332 * n337) + (n332 * !n337);
n360 = (n262 * n359);
n363 = (!n361 * n362) + (n361 * !n362);
n371 = (n262 * n370);
n376 = (!n372 * n375) + (n372 * !n375);
n413 = (n262 * n412);
n418 = (!n414 * n417) + (n414 * !n417);
om_16 = (!n262 * n265) + (n262 * !n265);
om_22 = (!n325 * n328) + (n325 * !n328);
om_24 = (!n354 * n357) + (n354 * !n357);
om_27 = (!n390 * n393) + (n390 * !n393);
om_28 = (!n406 * n409) + (n406 * !n409);
om_30 = (!n435 * n438) + (n435 * !n438);
om_31 = (!n451 * n453) + (n451 * !n453);
om_5 = (!n137 * n140) + (n137 * !n140);
n269 = (!n267 * n268) + (n267 * !n268);
n279 = (!n275 * n278) + (n275 * !n278);
n364 = (!n360 * n363) + (n360 * !n363);
n377 = (!n371 * n376) + (n371 * !n376);
n419 = (!n413 * n418) + (n413 * !n418);
om_10 = (!n187 * n190) + (n187 * !n190);
om_13 = (!n220 * n223) + (n220 * !n223);
om_19 = (!n289 * n292) + (n289 * !n292);
om_20 = (!n302 * n305) + (n302 * !n305);
om_21 = (!n312 * n315) + (n312 * !n315);
om_23 = (!n338 * n341) + (n338 * !n341);
om_9 = (!n177 * n180) + (n177 * !n180);
om_17 = (!n269 * n272) + (n269 * !n272);
om_18 = (!n279 * n282) + (n279 * !n282);
om_25 = (!n364 * n367) + (n364 * !n367);
om_26 = (!n377 * n380) + (n377 * !n380);
om_29 = (!n419 * n422) + (n419 * !n422);


new graph depth
---graph depth print---
var : om_0 depth : 1
var : om_1 depth : 2
var : om_2 depth : 2
var : om_3 depth : 3
var : om_4 depth : 3
var : om_5 depth : 4
var : om_6 depth : 4
var : om_7 depth : 4
var : om_8 depth : 4
var : om_9 depth : 5
var : om_10 depth : 5
var : om_11 depth : 5
var : om_12 depth : 5
var : om_13 depth : 5
var : om_14 depth : 5
var : om_15 depth : 5
var : om_16 depth : 5
var : om_17 depth : 6
var : om_18 depth : 6
var : om_19 depth : 6
var : om_20 depth : 6
var : om_21 depth : 6
var : om_22 depth : 6
var : om_23 depth : 6
var : om_24 depth : 6
var : om_25 depth : 6
var : om_26 depth : 6
var : om_27 depth : 6
var : om_28 depth : 6
var : om_29 depth : 6
var : om_30 depth : 6
var : om_31 depth : 6
---------------------
