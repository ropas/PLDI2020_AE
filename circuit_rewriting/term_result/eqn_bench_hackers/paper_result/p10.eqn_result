cir to graph finished
old graph depth
---graph depth print---
var : om_0 depth : 6
---------------------
============================================= graph opt start ===================================================
initial graph size : 271
whole case num : 500
reduced case num : 116


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n195 n165 n164 n124 n110 n109 n108 n107 n106 n104 n103 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
n129 n130 n132 n133 n143 n163 n164 n165 n195 n275 n276 om_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n195 n165 n164 n163 n143 n133 n132 n130 n129 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
n157 n158 n160 n161 n162 n163 n164 n165 n195 n275 n276 om_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n274 n234 n214 n213 n212 n210 n209 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n274 n234 n214 n213 n212 n210 n209 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n195 n165 n164 n163 n162 n161 n156 n154 n153 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n195 n165 n164 n163 n162 n152 n147 n145 n144 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n195 n165 n164 n124 n110 n109 n89 n83 n82 n72 n71 n70 n68 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
n244 n245 n247 n252 n253 n273 n274 n275 n276 om_0 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n195 n165 n164 n124 n110 n109 n89 n83 n82 n81 n76 n74 n73 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
om_0 n276 n275 n274 n234 n214 n204 n203 n201 n200 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 271
selected cripath : 
n263 n264 n266 n271 n272 n273 n274 n275 n276 om_0 

cleanup fin
redundant node deleted : nodeVal : n101 index : 1 is same with nodeVal : n111 index : 1
redundant node deleted : nodeVal : n118 index : 1 is same with nodeVal : n92 index : 1
redundant node deleted : nodeVal : n127 index : 1 is same with nodeVal : n188 index : 1
redundant node deleted : nodeVal : n136 index : 1 is same with nodeVal : n181 index : 1
redundant node deleted : nodeVal : n146 index : 1 is same with nodeVal : n174 index : 1
redundant node deleted : nodeVal : n155 index : 1 is same with nodeVal : n166 index : 1
redundant node deleted : nodeVal : n198 index : 1 is same with nodeVal : n330 index : 1
redundant node deleted : nodeVal : n207 index : 1 is same with nodeVal : n323 index : 1
redundant node deleted : nodeVal : n217 index : 1 is same with nodeVal : n316 index : 1
redundant node deleted : nodeVal : n226 index : 1 is same with nodeVal : n308 index : 1
redundant node deleted : nodeVal : n237 index : 1 is same with nodeVal : n300 index : 1
redundant node deleted : nodeVal : n246 index : 1 is same with nodeVal : n293 index : 1
redundant node deleted : nodeVal : n256 index : 1 is same with nodeVal : n285 index : 1
redundant node deleted : nodeVal : n265 index : 1 is same with nodeVal : n277 index : 1
redundant node deleted : nodeVal : n75 index : 1 is same with nodeVal : n84 index : 1
sharing detect fin
dangling node deleted : nodeVal : XOR index : 27
dangling node deleted : nodeVal : XOR index : 87
dangling node deleted : nodeVal : XOR index : 123
dangling node deleted : nodeVal : XOR index : 143
dangling node deleted : nodeVal : XOR index : 165
dangling node deleted : nodeVal : XOR index : 189
dangling node deleted : nodeVal : XOR index : 211
dangling node deleted : nodeVal : XOR index : 301
dangling node deleted : nodeVal : XOR index : 323
dangling node deleted : nodeVal : XOR index : 347
dangling node deleted : nodeVal : XOR index : 369
dangling node deleted : nodeVal : XOR index : 395
dangling node deleted : nodeVal : XOR index : 417
dangling node deleted : nodeVal : XOR index : 441
dangling node deleted : nodeVal : XOR index : 463
cleanup fin
graph opt finished
INORDER = i9 i8 i7 i63 i62 i61 i60 i6 i59 i58 i57 i56 i55 i54 i53 i52 i51 i50 i5 i49 i48 i47 i46 i45 i44 i43 i42 i41 i40 i4 i39 i38 i37 i36 i35 i34 i33 i32 i31 i30 i3 i29 i28 i27 i26 i25 i24 i23 i22 i21 i20 i2 i19 i18 i17 i16 i15 i14 i13 i12 i11 i10 i1 i0;
OUTORDER = om_0;
n103 = (i37 * i5);
n105 = (!i37 * i5) + (i37 * !i5);
n111 = (!i36 * i4) + (i36 * !i4);
n114 = (!i5);
n115 = (!i37 * n114) + (i37 * !n114);
n120 = (!i7);
n121 = (!i39 * n120) + (i39 * !n120);
n125 = (i14 * i46);
n129 = (i15 * i47);
n131 = (!i15 * i47) + (i15 * !i47);
n134 = (i12 * i44);
n138 = (i13 * i45);
n140 = (!i13 * i45) + (i13 * !i45);
n144 = (i10 * i42);
n148 = (i11 * i43);
n150 = (!i11 * i43) + (i11 * !i43);
n153 = (i40 * i8);
n157 = (i41 * i9);
n159 = (!i41 * i9) + (i41 * !i9);
n166 = (!i40 * i8) + (i40 * !i8);
n169 = (!i9);
n170 = (!i41 * n169) + (i41 * !n169);
n174 = (!i10 * i42) + (i10 * !i42);
n176 = (!i11);
n177 = (!i43 * n176) + (i43 * !n176);
n181 = (!i12 * i44) + (i12 * !i44);
n184 = (!i13);
n185 = (!i45 * n184) + (i45 * !n184);
n188 = (!i14 * i46) + (i14 * !i46);
n190 = (!i15);
n191 = (!i47 * n190) + (i47 * !n190);
n196 = (i30 * i62);
n200 = (i31 * i63);
n202 = (!i31 * i63) + (i31 * !i63);
n205 = (i28 * i60);
n209 = (i29 * i61);
n211 = (!i29 * i61) + (i29 * !i61);
n215 = (i26 * i58);
n219 = (i27 * i59);
n221 = (!i27 * i59) + (i27 * !i59);
n224 = (i24 * i56);
n228 = (i25 * i57);
n230 = (!i25 * i57) + (i25 * !i57);
n235 = (i22 * i54);
n239 = (i23 * i55);
n241 = (!i23 * i55) + (i23 * !i55);
n244 = (i20 * i52);
n248 = (i21 * i53);
n250 = (!i21 * i53) + (i21 * !i53);
n254 = (i18 * i50);
n258 = (i19 * i51);
n260 = (!i19 * i51) + (i19 * !i51);
n263 = (i16 * i48);
n267 = (i17 * i49);
n269 = (!i17 * i49) + (i17 * !i49);
n277 = (!i16 * i48) + (i16 * !i48);
n280 = (!i17);
n281 = (!i49 * n280) + (i49 * !n280);
n285 = (!i18 * i50) + (i18 * !i50);
n287 = (!i19);
n288 = (!i51 * n287) + (i51 * !n287);
n293 = (!i20 * i52) + (i20 * !i52);
n296 = (!i21);
n297 = (!i53 * n296) + (i53 * !n296);
n300 = (!i22 * i54) + (i22 * !i54);
n302 = (!i23);
n303 = (!i55 * n302) + (i55 * !n302);
n308 = (!i24 * i56) + (i24 * !i56);
n311 = (!i25);
n312 = (!i57 * n311) + (i57 * !n311);
n316 = (!i26 * i58) + (i26 * !i58);
n318 = (!i27);
n319 = (!i59 * n318) + (i59 * !n318);
n323 = (!i28 * i60) + (i28 * !i60);
n326 = (!i29);
n327 = (!i61 * n326) + (i61 * !n326);
n330 = (!i30 * i62) + (i30 * !i62);
n66 = (!i1 * i33) + (i1 * !i33);
n67 = (!i0 * i32) + (i0 * !i32);
n68 = (!i1);
n69 = (!i33);
n73 = (i2 * i34);
n77 = (i3 * i35);
n79 = (!i3 * i35) + (i3 * !i35);
n84 = (!i2 * i34) + (i2 * !i34);
n86 = (!i3);
n87 = (!i35 * n86) + (i35 * !n86);
n90 = (i38 * i6);
n92 = (!i38 * i6) + (i38 * !i6);
n94 = (i39 * i7);
n96 = (!i39 * i7) + (i39 * !i7);
n99 = (i36 * i4);
n100 = (!n99);
n102 = (!n100 * n111) + (n100 * !n111);
n104 = (!n103);
n106 = (!n104 * n105) + (n104 * !n105);
n112 = (n106 * n111);
n126 = (!n125);
n128 = (!n126 * n188) + (n126 * !n188);
n130 = (!n129);
n132 = (!n130 * n131) + (n130 * !n131);
n135 = (!n134);
n137 = (!n135 * n181) + (n135 * !n181);
n139 = (!n138);
n141 = (!n139 * n140) + (n139 * !n140);
n145 = (!n144);
n147 = (!n145 * n174) + (n145 * !n174);
n149 = (!n148);
n151 = (!n149 * n150) + (n149 * !n150);
n154 = (!n153);
n156 = (!n154 * n166) + (n154 * !n166);
n158 = (!n157);
n160 = (!n158 * n159) + (n158 * !n159);
n167 = (n160 * n166);
n175 = (n151 * n174);
n178 = (!n175 * n177) + (n175 * !n177);
n182 = (n141 * n181);
n189 = (n132 * n188);
n192 = (!n189 * n191) + (n189 * !n191);
n197 = (!n196);
n199 = (!n197 * n330) + (n197 * !n330);
n201 = (!n200);
n203 = (!n201 * n202) + (n201 * !n202);
n206 = (!n205);
n208 = (!n206 * n323) + (n206 * !n323);
n210 = (!n209);
n212 = (!n210 * n211) + (n210 * !n211);
n216 = (!n215);
n218 = (!n216 * n316) + (n216 * !n316);
n220 = (!n219);
n222 = (!n220 * n221) + (n220 * !n221);
n225 = (!n224);
n227 = (!n225 * n308) + (n225 * !n308);
n229 = (!n228);
n231 = (!n229 * n230) + (n229 * !n230);
n236 = (!n235);
n238 = (!n236 * n300) + (n236 * !n300);
n240 = (!n239);
n242 = (!n240 * n241) + (n240 * !n241);
n245 = (!n244);
n247 = (!n245 * n293) + (n245 * !n293);
n249 = (!n248);
n251 = (!n249 * n250) + (n249 * !n250);
n255 = (!n254);
n257 = (!n255 * n285) + (n255 * !n285);
n259 = (!n258);
n261 = (!n259 * n260) + (n259 * !n260);
n264 = (!n263);
n266 = (!n264 * n277) + (n264 * !n277);
n268 = (!n267);
n270 = (!n268 * n269) + (n268 * !n269);
n278 = (n270 * n277);
n286 = (n261 * n285);
n289 = (!n286 * n288) + (n286 * !n288);
n294 = (n251 * n293);
n301 = (n242 * n300);
n304 = (!n301 * n303) + (n301 * !n303);
n309 = (n231 * n308);
n317 = (n222 * n316);
n320 = (!n317 * n319) + (n317 * !n319);
n324 = (n212 * n323);
n331 = (n203 * n330);
n332 = (!n202 * n331) + (n202 * !n331);
n70 = (n68 * n69);
n71 = (n67 * n70);
n72 = (!n66 * n71) + (n66 * !n71);
n74 = (!n73);
n76 = (!n74 * n84) + (n74 * !n84);
n78 = (!n77);
n80 = (!n78 * n79) + (n78 * !n79);
n85 = (n80 * n84);
n88 = (!n85 * n87) + (n85 * !n87);
n91 = (!n90);
n93 = (!n91 * n92) + (n91 * !n92);
n95 = (!n94);
n97 = (!n95 * n96) + (n95 * !n96);
n107 = (n102 * n106);
n113 = (!n112);
n116 = (!n113 * n115) + (n113 * !n115);
n119 = (n92 * n97);
n122 = (!n119 * n121) + (n119 * !n121);
n133 = (n128 * n132);
n142 = (n137 * n141);
n152 = (n147 * n151);
n161 = (n156 * n160);
n168 = (!n167);
n171 = (!n168 * n170) + (n168 * !n170);
n183 = (!n182);
n186 = (!n183 * n185) + (n183 * !n185);
n204 = (n199 * n203);
n213 = (n208 * n212);
n223 = (n218 * n222);
n232 = (n227 * n231);
n243 = (n238 * n242);
n252 = (n247 * n251);
n262 = (n257 * n261);
n271 = (n266 * n270);
n279 = (!n278);
n282 = (!n279 * n281) + (n279 * !n281);
n295 = (!n294);
n298 = (!n295 * n297) + (n295 * !n297);
n310 = (!n309);
n313 = (!n310 * n312) + (n310 * !n312);
n325 = (!n324);
n328 = (!n325 * n327) + (n325 * !n327);
n81 = (n76 * n80);
n82 = (n72 * n81);
n98 = (n93 * n97);
n108 = (n107 * n98);
n117 = (n116 * n98);
n123 = (!n117 * n122) + (n117 * !n122);
n143 = (n133 * n142);
n162 = (n152 * n161);
n172 = (n152 * n171);
n187 = (n133 * n186);
n193 = (!n187 * n192) + (n187 * !n192);
n214 = (n204 * n213);
n233 = (n223 * n232);
n253 = (n243 * n252);
n272 = (n262 * n271);
n283 = (n262 * n282);
n299 = (n243 * n298);
n305 = (!n299 * n304) + (n299 * !n304);
n314 = (n223 * n313);
n329 = (n204 * n328);
n333 = (!n329 * n332) + (n329 * !n332);
n83 = (!n82);
n89 = (!n83 * n88) + (n83 * !n88);
n109 = (n108 * n89);
n163 = (n143 * n162);
n173 = (!n172);
n179 = (!n173 * n178) + (n173 * !n178);
n180 = (n143 * n179);
n194 = (!n180 * n193) + (n180 * !n193);
n234 = (n214 * n233);
n273 = (n253 * n272);
n284 = (!n283);
n290 = (!n284 * n289) + (n284 * !n289);
n291 = (n253 * n290);
n315 = (!n314);
n321 = (!n315 * n320) + (n315 * !n320);
n322 = (n214 * n321);
n334 = (!n322 * n333) + (n322 * !n333);
n110 = (!n109);
n124 = (!n110 * n123) + (n110 * !n123);
n164 = (n124 * n163);
n274 = (n234 * n273);
n292 = (!n291);
n306 = (!n292 * n305) + (n292 * !n305);
n307 = (n234 * n306);
n335 = (!n307 * n334) + (n307 * !n334);
n165 = (!n164);
n195 = (!n165 * n194) + (n165 * !n194);
n275 = (n195 * n274);
n276 = (!n275);
om_0 = (!n276 * n335) + (n276 * !n335);


new graph depth
---graph depth print---
var : om_0 depth : 6
---------------------
