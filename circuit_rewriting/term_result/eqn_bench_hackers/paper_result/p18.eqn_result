cir to graph finished
old graph depth
---graph depth print---
var : om_0 depth : 1
var : om_1 depth : 2
var : om_2 depth : 3
var : om_3 depth : 4
var : om_4 depth : 4
var : om_5 depth : 5
var : om_6 depth : 5
var : om_7 depth : 6
var : om_8 depth : 6
var : om_9 depth : 7
var : om_10 depth : 7
var : om_11 depth : 7
var : om_12 depth : 7
var : om_13 depth : 8
var : om_14 depth : 8
var : om_15 depth : 8
var : om_16 depth : 8
var : om_17 depth : 9
var : om_18 depth : 9
var : om_19 depth : 9
var : om_20 depth : 9
var : om_21 depth : 9
var : om_22 depth : 9
var : om_23 depth : 9
var : om_24 depth : 9
var : om_25 depth : 10
var : om_26 depth : 10
var : om_27 depth : 10
var : om_28 depth : 10
var : om_29 depth : 10
var : om_30 depth : 10
var : om_31 depth : 10
---------------------
============================================= graph opt start ===================================================
initial graph size : 586
initial mult size : 258
whole case num : 500
reduced case num : 116


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
om_31 n670 n662 n661 n506 n425 n390 n388 n384 n382 n381 n368 n216 n148 n118 n116 n97 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
om_29 n621 n615 n614 n613 n589 n588 n565 n561 n559 n558 n368 n216 n215 n214 n213 n197 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
n345 n364 n365 n366 n367 n368 n495 n496 n498 n502 n504 n505 n506 n568 n569 n575 om_27 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
om_25 n534 n530 n529 n506 n505 n504 n502 n498 n496 n495 n368 n216 n148 n118 n116 n97 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
n104 n117 n118 n148 n216 n368 n398 n399 n401 n405 n424 n425 n506 n590 n591 n599 om_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
om_31 n670 n662 n661 n506 n505 n504 n502 n498 n496 n495 n368 n367 n283 n245 n244 n231 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
om_28 n599 n591 n590 n506 n425 n424 n405 n401 n399 n398 n368 n216 n148 n147 n130 n120 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
n197 n213 n214 n215 n216 n368 n381 n382 n384 n388 n390 n425 n506 n568 n569 n575 om_27 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
n417 n433 n434 n435 n519 n557 n558 n559 n561 n565 n588 n589 n613 n614 n615 n621 om_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
om_29 n621 n615 n614 n506 n425 n424 n422 n418 n416 n415 n368 n216 n215 n177 n160 n150 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
om_28 n599 n591 n590 n506 n505 n504 n481 n477 n475 n474 n368 n367 n283 n245 n244 n231 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
n438 n451 n472 n518 n519 n624 n625 n626 n628 n632 n634 n659 n660 n661 n662 n670 om_31 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 586
selected cripath : 
n476 n492 n517 n518 n519 n536 n537 n538 n540 n544 n546 n589 n660 n661 n662 n670 om_31 

cleanup fin
sharing detect fin
cleanup fin
graph opt finished
INORDER = i9 i8 i7 i63 i62 i61 i60 i6 i59 i58 i57 i56 i55 i54 i53 i52 i51 i50 i5 i49 i48 i47 i46 i45 i44 i43 i42 i41 i40 i4 i39 i38 i37 i36 i35 i34 i33 i32 i31 i30 i3 i29 i28 i27 i26 i25 i24 i23 i22 i21 i20 i2 i19 i18 i17 i16 i15 i14 i13 i12 i11 i10 i1 i0;
OUTORDER = om_9 om_8 om_7 om_6 om_5 om_4 om_31 om_30 om_3 om_29 om_28 om_27 om_26 om_25 om_24 om_23 om_22 om_21 om_20 om_2 om_19 om_18 om_17 om_16 om_15 om_14 om_13 om_12 om_11 om_10 om_1 om_0;
n104 = (!i2 * i34) + (i2 * !i34);
n107 = (i1 * i33);
n108 = (!i1 * n107) + (i1 * !n107);
n109 = (!i33 * n108) + (i33 * !n108);
n120 = (!i3 * i35) + (i3 * !i35);
n122 = (i2 * i34);
n123 = (!i2 * n122) + (i2 * !n122);
n124 = (!i34 * n123) + (i34 * !n123);
n133 = (!i36 * i4) + (i36 * !i4);
n135 = (i3 * i35);
n136 = (!i3 * n135) + (i3 * !n135);
n137 = (!i35 * n136) + (i35 * !n136);
n150 = (!i37 * i5) + (i37 * !i5);
n152 = (i36 * i4);
n153 = (!i4 * n152) + (i4 * !n152);
n154 = (!i36 * n153) + (i36 * !n153);
n163 = (!i38 * i6) + (i38 * !i6);
n165 = (i37 * i5);
n166 = (!i5 * n165) + (i5 * !n165);
n167 = (!i37 * n166) + (i37 * !n166);
n180 = (!i39 * i7) + (i39 * !i7);
n182 = (i38 * i6);
n183 = (!i6 * n182) + (i6 * !n182);
n184 = (!i38 * n183) + (i38 * !n183);
n197 = (!i40 * i8) + (i40 * !i8);
n199 = (i39 * i7);
n200 = (!i7 * n199) + (i7 * !n199);
n201 = (!i39 * n200) + (i39 * !n200);
n218 = (!i41 * i9) + (i41 * !i9);
n220 = (i40 * i8);
n221 = (!i8 * n220) + (i8 * !n220);
n222 = (!i40 * n221) + (i40 * !n221);
n231 = (!i10 * i42) + (i10 * !i42);
n233 = (i41 * i9);
n234 = (!i9 * n233) + (i9 * !n233);
n235 = (!i41 * n234) + (i41 * !n234);
n248 = (!i11 * i43) + (i11 * !i43);
n250 = (i10 * i42);
n251 = (!i10 * n250) + (i10 * !n250);
n252 = (!i42 * n251) + (i42 * !n251);
n265 = (!i12 * i44) + (i12 * !i44);
n267 = (i11 * i43);
n268 = (!i11 * n267) + (i11 * !n267);
n269 = (!i43 * n268) + (i43 * !n268);
n286 = (!i13 * i45) + (i13 * !i45);
n288 = (i12 * i44);
n289 = (!i12 * n288) + (i12 * !n288);
n290 = (!i44 * n289) + (i44 * !n289);
n303 = (!i14 * i46) + (i14 * !i46);
n305 = (i13 * i45);
n306 = (!i13 * n305) + (i13 * !n305);
n307 = (!i45 * n306) + (i45 * !n306);
n324 = (!i15 * i47) + (i15 * !i47);
n326 = (i14 * i46);
n327 = (!i14 * n326) + (i14 * !n326);
n328 = (!i46 * n327) + (i46 * !n327);
n345 = (!i16 * i48) + (i16 * !i48);
n347 = (i15 * i47);
n348 = (!i15 * n347) + (i15 * !n347);
n349 = (!i47 * n348) + (i47 * !n348);
n370 = (!i17 * i49) + (i17 * !i49);
n372 = (i16 * i48);
n373 = (!i16 * n372) + (i16 * !n372);
n374 = (!i48 * n373) + (i48 * !n373);
n383 = (!i18 * i50) + (i18 * !i50);
n385 = (i17 * i49);
n386 = (!i17 * n385) + (i17 * !n385);
n387 = (!i49 * n386) + (i49 * !n386);
n400 = (!i19 * i51) + (i19 * !i51);
n402 = (i18 * i50);
n403 = (!i18 * n402) + (i18 * !n402);
n404 = (!i50 * n403) + (i50 * !n403);
n417 = (!i20 * i52) + (i20 * !i52);
n419 = (i19 * i51);
n420 = (!i19 * n419) + (i19 * !n419);
n421 = (!i51 * n420) + (i51 * !n420);
n438 = (!i21 * i53) + (i21 * !i53);
n440 = (i20 * i52);
n441 = (!i20 * n440) + (i20 * !n440);
n442 = (!i52 * n441) + (i52 * !n441);
n455 = (!i22 * i54) + (i22 * !i54);
n457 = (i21 * i53);
n458 = (!i21 * n457) + (i21 * !n457);
n459 = (!i53 * n458) + (i53 * !n458);
n476 = (!i23 * i55) + (i23 * !i55);
n478 = (i22 * i54);
n479 = (!i22 * n478) + (i22 * !n478);
n480 = (!i54 * n479) + (i54 * !n479);
n497 = (!i24 * i56) + (i24 * !i56);
n499 = (i23 * i55);
n500 = (!i23 * n499) + (i23 * !n499);
n501 = (!i55 * n500) + (i55 * !n500);
n522 = (!i25 * i57) + (i25 * !i57);
n524 = (i24 * i56);
n525 = (!i24 * n524) + (i24 * !n524);
n526 = (!i56 * n525) + (i56 * !n525);
n539 = (!i26 * i58) + (i26 * !i58);
n541 = (i25 * i57);
n542 = (!i25 * n541) + (i25 * !n541);
n543 = (!i57 * n542) + (i57 * !n542);
n560 = (!i27 * i59) + (i27 * !i59);
n562 = (i26 * i58);
n563 = (!i26 * n562) + (i26 * !n562);
n564 = (!i58 * n563) + (i58 * !n563);
n581 = (!i28 * i60) + (i28 * !i60);
n583 = (i27 * i59);
n584 = (!i27 * n583) + (i27 * !n583);
n585 = (!i59 * n584) + (i59 * !n584);
n606 = (!i29 * i61) + (i29 * !i61);
n608 = (i28 * i60);
n609 = (!i28 * n608) + (i28 * !n608);
n610 = (!i60 * n609) + (i60 * !n609);
n627 = (!i30 * i62) + (i30 * !i62);
n629 = (i29 * i61);
n630 = (!i29 * n629) + (i29 * !n629);
n631 = (!i61 * n630) + (i61 * !n630);
n652 = (!i31 * i63) + (i31 * !i63);
n654 = (i30 * i62);
n655 = (!i30 * n654) + (i30 * !n654);
n656 = (!i62 * n655) + (i62 * !n655);
n677 = (!i63);
n678 = (i31 * i63);
n679 = (!i31 * n678) + (i31 * !n678);
n97 = (!i1 * i33) + (i1 * !i33);
n98 = (i0 * i32);
n99 = (!i0 * n98) + (i0 * !n98);
n100 = (!i32 * n99) + (i32 * !n99);
n102 = (n100 * n97);
n105 = (!n104 * n97) + (n104 * !n97);
n114 = (n105 * n109);
n116 = (!n97);
n117 = (!n104);
n130 = (!n120);
n146 = (!n133);
n160 = (!n150);
n176 = (!n163);
n193 = (!n180);
n213 = (!n197);
n228 = (!n218);
n244 = (!n231);
n261 = (!n248);
n281 = (!n265);
n299 = (!n286);
n319 = (!n303);
n340 = (!n324);
n364 = (!n345);
n380 = (!n370);
n396 = (!n383);
n413 = (!n400);
n433 = (!n417);
n451 = (!n438);
n471 = (!n455);
n492 = (!n476);
n516 = (!n497);
n535 = (!n522);
n555 = (!n539);
n576 = (!n560);
n600 = (!n581);
n622 = (!n606);
n646 = (!n627);
n671 = (!n652);
n680 = (!n677 * n679) + (n677 * !n679);
om_0 = (!n100 * n97) + (n100 * !n97);
n103 = (!n102);
n106 = (!n105);
n110 = (!n106 * n109) + (n106 * !n109);
n118 = (n116 * n117);
n131 = (n118 * n130);
n147 = (n130 * n146);
n177 = (n160 * n176);
n194 = (n177 * n193);
n214 = (n193 * n213);
n245 = (n228 * n244);
n262 = (n245 * n261);
n282 = (n261 * n281);
n320 = (n299 * n319);
n341 = (n320 * n340);
n365 = (n340 * n364);
n397 = (n380 * n396);
n414 = (n397 * n413);
n434 = (n413 * n433);
n472 = (n451 * n471);
n493 = (n472 * n492);
n517 = (n492 * n516);
n556 = (n535 * n555);
n577 = (n556 * n576);
n601 = (n576 * n600);
n647 = (n622 * n646);
n672 = (n647 * n671);
n112 = (!n110);
n113 = (n102 * n112);
n115 = (!n113 * n114) + (n113 * !n114);
n119 = (!n118);
n132 = (!n131);
n148 = (n118 * n147);
n178 = (n148 * n177);
n195 = (n148 * n194);
n215 = (n177 * n214);
n283 = (n245 * n282);
n321 = (n283 * n320);
n342 = (n283 * n341);
n366 = (n320 * n365);
n435 = (n397 * n434);
n473 = (n435 * n472);
n494 = (n435 * n493);
n518 = (n472 * n517);
n602 = (n556 * n601);
n648 = (n602 * n647);
n673 = (n602 * n672);
om_1 = (!n103 * n110) + (n103 * !n110);
n121 = (!n119 * n120) + (n119 * !n120);
n134 = (!n132 * n133) + (n132 * !n133);
n149 = (!n148);
n161 = (n148 * n160);
n179 = (!n178);
n196 = (!n195);
n216 = (n148 * n215);
n263 = (n216 * n262);
n284 = (n216 * n283);
n300 = (n283 * n299);
n322 = (n216 * n321);
n343 = (n216 * n342);
n367 = (n283 * n366);
n452 = (n435 * n451);
n519 = (n435 * n518);
n578 = (n519 * n577);
n603 = (n519 * n602);
n623 = (n602 * n622);
n649 = (n519 * n648);
n674 = (n519 * n673);
n125 = (!n121 * n124) + (n121 * !n124);
n127 = (n121 * n124);
n128 = (n115 * n125);
n138 = (!n134 * n137) + (n134 * !n137);
n142 = (n134 * n137);
n151 = (!n149 * n150) + (n149 * !n150);
n162 = (!n161);
n181 = (!n179 * n180) + (n179 * !n180);
n198 = (!n196 * n197) + (n196 * !n197);
n217 = (!n216);
n229 = (n216 * n228);
n246 = (n216 * n245);
n264 = (!n263);
n285 = (!n284);
n301 = (n216 * n300);
n323 = (!n322);
n344 = (!n343);
n368 = (n216 * n367);
n453 = (n368 * n452);
n474 = (n368 * n473);
n495 = (n368 * n494);
n520 = (n368 * n519);
n536 = (n519 * n535);
n557 = (n519 * n556);
n579 = (n368 * n578);
n604 = (n368 * n603);
n624 = (n519 * n623);
n650 = (n368 * n649);
n675 = (n368 * n674);
om_2 = (!n115 * n125) + (n115 * !n125);
n129 = (!n127 * n128) + (n127 * !n128);
n140 = (n125 * n138);
n141 = (n115 * n140);
n143 = (n127 * n138);
n144 = (!n142 * n143) + (n142 * !n143);
n155 = (!n151 * n154) + (n151 * !n154);
n157 = (n151 * n154);
n164 = (!n162 * n163) + (n162 * !n163);
n185 = (!n181 * n184) + (n181 * !n184);
n189 = (n181 * n184);
n202 = (!n198 * n201) + (n198 * !n201);
n208 = (n198 * n201);
n219 = (!n217 * n218) + (n217 * !n218);
n230 = (!n229);
n247 = (!n246);
n266 = (!n264 * n265) + (n264 * !n265);
n287 = (!n285 * n286) + (n285 * !n286);
n302 = (!n301);
n325 = (!n323 * n324) + (n323 * !n324);
n346 = (!n344 * n345) + (n344 * !n345);
n369 = (!n368);
n381 = (n368 * n380);
n398 = (n368 * n397);
n415 = (n368 * n414);
n436 = (n368 * n435);
n454 = (!n453);
n475 = (!n474);
n496 = (!n495);
n521 = (!n520);
n537 = (n368 * n536);
n558 = (n368 * n557);
n580 = (!n579);
n605 = (!n604);
n625 = (n368 * n624);
n651 = (!n650);
n676 = (!n652 * n675) + (n652 * !n675);
om_3 = (!n129 * n138) + (n129 * !n138);
n145 = (!n141 * n144) + (n141 * !n144);
n158 = (n145 * n155);
n159 = (!n157 * n158) + (n157 * !n158);
n168 = (!n164 * n167) + (n164 * !n167);
n170 = (n155 * n168);
n172 = (n164 * n167);
n173 = (n157 * n168);
n187 = (n170 * n185);
n204 = (n185 * n202);
n209 = (n189 * n202);
n210 = (!n208 * n209) + (n208 * !n209);
n223 = (!n219 * n222) + (n219 * !n222);
n225 = (n219 * n222);
n232 = (!n230 * n231) + (n230 * !n231);
n249 = (!n247 * n248) + (n247 * !n248);
n270 = (!n266 * n269) + (n266 * !n269);
n276 = (n266 * n269);
n291 = (!n287 * n290) + (n287 * !n290);
n295 = (n287 * n290);
n304 = (!n302 * n303) + (n302 * !n303);
n329 = (!n325 * n328) + (n325 * !n328);
n335 = (n325 * n328);
n350 = (!n346 * n349) + (n346 * !n349);
n358 = (n346 * n349);
n371 = (!n369 * n370) + (n369 * !n370);
n382 = (!n381);
n399 = (!n398);
n416 = (!n415);
n437 = (!n436);
n456 = (!n454 * n455) + (n454 * !n455);
n477 = (!n475 * n476) + (n475 * !n476);
n498 = (!n496 * n497) + (n496 * !n497);
n523 = (!n521 * n522) + (n521 * !n522);
n538 = (!n537);
n559 = (!n558);
n582 = (!n580 * n581) + (n580 * !n581);
n607 = (!n605 * n606) + (n605 * !n606);
n626 = (!n625);
n653 = (!n651 * n652) + (n651 * !n652);
n681 = (!n676 * n680) + (n676 * !n680);
om_4 = (!n145 * n155) + (n145 * !n155);
n171 = (n145 * n170);
n174 = (!n172 * n173) + (n172 * !n173);
n188 = (n145 * n187);
n190 = (n174 * n185);
n191 = (!n189 * n190) + (n189 * !n190);
n205 = (n170 * n204);
n206 = (n145 * n205);
n207 = (n174 * n204);
n211 = (!n207 * n210) + (n207 * !n210);
n236 = (!n232 * n235) + (n232 * !n235);
n238 = (n223 * n236);
n240 = (n232 * n235);
n241 = (n225 * n236);
n253 = (!n249 * n252) + (n249 * !n252);
n257 = (n249 * n252);
n272 = (n253 * n270);
n277 = (n257 * n270);
n278 = (!n276 * n277) + (n276 * !n277);
n308 = (!n304 * n307) + (n304 * !n307);
n310 = (n291 * n308);
n314 = (n304 * n307);
n315 = (n295 * n308);
n331 = (n310 * n329);
n352 = (n329 * n350);
n359 = (n335 * n350);
n360 = (!n358 * n359) + (n358 * !n359);
n375 = (!n371 * n374) + (n371 * !n374);
n377 = (n371 * n374);
n384 = (!n382 * n383) + (n382 * !n383);
n401 = (!n399 * n400) + (n399 * !n400);
n418 = (!n416 * n417) + (n416 * !n417);
n439 = (!n437 * n438) + (n437 * !n438);
n460 = (!n456 * n459) + (n456 * !n459);
n466 = (n456 * n459);
n481 = (!n477 * n480) + (n477 * !n480);
n487 = (n477 * n480);
n502 = (!n498 * n501) + (n498 * !n501);
n510 = (n498 * n501);
n527 = (!n523 * n526) + (n523 * !n526);
n531 = (n523 * n526);
n540 = (!n538 * n539) + (n538 * !n539);
n561 = (!n559 * n560) + (n559 * !n560);
n586 = (!n582 * n585) + (n582 * !n585);
n594 = (n582 * n585);
n611 = (!n607 * n610) + (n607 * !n610);
n617 = (n607 * n610);
n628 = (!n626 * n627) + (n626 * !n627);
n657 = (!n653 * n656) + (n653 * !n656);
n665 = (n653 * n656);
om_5 = (!n159 * n168) + (n159 * !n168);
n175 = (!n171 * n174) + (n171 * !n174);
n192 = (!n188 * n191) + (n188 * !n191);
n212 = (!n206 * n211) + (n206 * !n211);
n239 = (n212 * n238);
n242 = (!n240 * n241) + (n240 * !n241);
n255 = (n238 * n253);
n258 = (n242 * n253);
n259 = (!n257 * n258) + (n257 * !n258);
n273 = (n238 * n272);
n275 = (n242 * n272);
n279 = (!n275 * n278) + (n275 * !n278);
n293 = (n273 * n291);
n296 = (n279 * n291);
n297 = (!n295 * n296) + (n295 * !n296);
n311 = (n273 * n310);
n313 = (n279 * n310);
n316 = (!n314 * n315) + (n314 * !n315);
n332 = (n273 * n331);
n334 = (n279 * n331);
n336 = (n316 * n329);
n337 = (!n335 * n336) + (n335 * !n336);
n353 = (n310 * n352);
n357 = (n316 * n352);
n361 = (!n357 * n360) + (n357 * !n360);
n388 = (!n384 * n387) + (n384 * !n387);
n390 = (n375 * n388);
n392 = (n384 * n387);
n393 = (n377 * n388);
n405 = (!n401 * n404) + (n401 * !n404);
n409 = (n401 * n404);
n422 = (!n418 * n421) + (n418 * !n421);
n428 = (n418 * n421);
n443 = (!n439 * n442) + (n439 * !n442);
n447 = (n439 * n442);
n462 = (n443 * n460);
n467 = (n447 * n460);
n468 = (!n466 * n467) + (n466 * !n467);
n483 = (n462 * n481);
n488 = (n468 * n481);
n489 = (!n487 * n488) + (n487 * !n488);
n504 = (n481 * n502);
n511 = (n487 * n502);
n512 = (!n510 * n511) + (n510 * !n511);
n544 = (!n540 * n543) + (n540 * !n543);
n546 = (n527 * n544);
n550 = (n540 * n543);
n551 = (n531 * n544);
n565 = (!n561 * n564) + (n561 * !n564);
n571 = (n561 * n564);
n588 = (n565 * n586);
n595 = (n571 * n586);
n596 = (!n594 * n595) + (n594 * !n595);
n632 = (!n628 * n631) + (n628 * !n631);
n634 = (n611 * n632);
n640 = (n628 * n631);
n641 = (n617 * n632);
n659 = (n634 * n657);
n226 = (n212 * n223);
n243 = (!n239 * n242) + (n239 * !n242);
n256 = (n212 * n255);
n260 = (!n256 * n259) + (n256 * !n259);
n274 = (n212 * n273);
n280 = (!n274 * n279) + (n274 * !n279);
n294 = (n212 * n293);
n298 = (!n294 * n297) + (n294 * !n297);
n312 = (n212 * n311);
n317 = (!n313 * n316) + (n313 * !n316);
n333 = (n212 * n332);
n338 = (!n334 * n337) + (n334 * !n337);
n354 = (n273 * n353);
n355 = (n212 * n354);
n356 = (n279 * n353);
n362 = (!n356 * n361) + (n356 * !n361);
n394 = (!n392 * n393) + (n392 * !n393);
n407 = (n390 * n405);
n410 = (n394 * n405);
n411 = (!n409 * n410) + (n409 * !n410);
n424 = (n405 * n422);
n425 = (n390 * n424);
n429 = (n409 * n422);
n430 = (!n428 * n429) + (n428 * !n429);
n445 = (n425 * n443);
n463 = (n425 * n462);
n484 = (n425 * n483);
n505 = (n462 * n504);
n509 = (n468 * n504);
n513 = (!n509 * n512) + (n509 * !n512);
n552 = (!n550 * n551) + (n550 * !n551);
n567 = (n546 * n565);
n572 = (n552 * n565);
n573 = (!n571 * n572) + (n571 * !n572);
n589 = (n546 * n588);
n593 = (n552 * n588);
n597 = (!n593 * n596) + (n593 * !n596);
n613 = (n589 * n611);
n618 = (n597 * n611);
n619 = (!n617 * n618) + (n617 * !n618);
n635 = (n589 * n634);
n639 = (n597 * n634);
n642 = (!n640 * n641) + (n640 * !n641);
n660 = (n589 * n659);
n664 = (n597 * n659);
n666 = (n642 * n657);
n667 = (!n665 * n666) + (n665 * !n666);
om_6 = (!n175 * n185) + (n175 * !n185);
om_7 = (!n192 * n202) + (n192 * !n202);
om_8 = (!n212 * n223) + (n212 * !n223);
n227 = (!n225 * n226) + (n225 * !n226);
n318 = (!n312 * n317) + (n312 * !n317);
n339 = (!n333 * n338) + (n333 * !n338);
n363 = (!n355 * n362) + (n355 * !n362);
n391 = (n363 * n390);
n395 = (!n391 * n394) + (n391 * !n394);
n408 = (n363 * n407);
n412 = (!n408 * n411) + (n408 * !n411);
n426 = (n363 * n425);
n427 = (n394 * n424);
n431 = (!n427 * n430) + (n427 * !n430);
n446 = (n363 * n445);
n464 = (n363 * n463);
n465 = (n431 * n462);
n469 = (!n465 * n468) + (n465 * !n468);
n485 = (n363 * n484);
n486 = (n431 * n483);
n490 = (!n486 * n489) + (n486 * !n489);
n506 = (n425 * n505);
n508 = (n431 * n505);
n514 = (!n508 * n513) + (n508 * !n513);
n547 = (n506 * n546);
n549 = (n514 * n546);
n553 = (!n549 * n552) + (n549 * !n552);
n568 = (n506 * n567);
n570 = (n514 * n567);
n574 = (!n570 * n573) + (n570 * !n573);
n590 = (n506 * n589);
n592 = (n514 * n589);
n598 = (!n592 * n597) + (n592 * !n597);
n614 = (n506 * n613);
n616 = (n514 * n613);
n620 = (!n616 * n619) + (n616 * !n619);
n636 = (n506 * n635);
n638 = (n514 * n635);
n643 = (!n639 * n642) + (n639 * !n642);
n661 = (n506 * n660);
n663 = (n514 * n660);
n668 = (!n664 * n667) + (n664 * !n667);
om_10 = (!n243 * n253) + (n243 * !n253);
om_11 = (!n260 * n270) + (n260 * !n270);
om_12 = (!n280 * n291) + (n280 * !n291);
om_13 = (!n298 * n308) + (n298 * !n308);
n378 = (n363 * n375);
n432 = (!n426 * n431) + (n426 * !n431);
n448 = (n431 * n443);
n470 = (!n464 * n469) + (n464 * !n469);
n491 = (!n485 * n490) + (n485 * !n490);
n507 = (n363 * n506);
n515 = (!n507 * n514) + (n507 * !n514);
n529 = (n506 * n527);
n530 = (n363 * n529);
n532 = (n514 * n527);
n548 = (n363 * n547);
n554 = (!n548 * n553) + (n548 * !n553);
n569 = (n363 * n568);
n575 = (!n569 * n574) + (n569 * !n574);
n591 = (n363 * n590);
n599 = (!n591 * n598) + (n591 * !n598);
n615 = (n363 * n614);
n621 = (!n615 * n620) + (n615 * !n620);
n637 = (n363 * n636);
n644 = (!n638 * n643) + (n638 * !n643);
n662 = (n363 * n661);
n669 = (!n663 * n668) + (n663 * !n668);
om_14 = (!n318 * n329) + (n318 * !n329);
om_15 = (!n339 * n350) + (n339 * !n350);
om_16 = (!n363 * n375) + (n363 * !n375);
om_18 = (!n395 * n405) + (n395 * !n405);
om_19 = (!n412 * n422) + (n412 * !n422);
om_9 = (!n227 * n236) + (n227 * !n236);
n379 = (!n377 * n378) + (n377 * !n378);
n449 = (!n447 * n448) + (n447 * !n448);
n450 = (!n446 * n449) + (n446 * !n449);
n533 = (!n531 * n532) + (n531 * !n532);
n534 = (!n530 * n533) + (n530 * !n533);
n645 = (!n637 * n644) + (n637 * !n644);
n670 = (!n662 * n669) + (n662 * !n669);
om_20 = (!n432 * n443) + (n432 * !n443);
om_22 = (!n470 * n481) + (n470 * !n481);
om_23 = (!n491 * n502) + (n491 * !n502);
om_24 = (!n515 * n527) + (n515 * !n527);
om_26 = (!n554 * n565) + (n554 * !n565);
om_27 = (!n575 * n586) + (n575 * !n586);
om_28 = (!n599 * n611) + (n599 * !n611);
om_29 = (!n621 * n632) + (n621 * !n632);
om_17 = (!n379 * n388) + (n379 * !n388);
om_21 = (!n450 * n460) + (n450 * !n460);
om_25 = (!n534 * n544) + (n534 * !n544);
om_30 = (!n645 * n657) + (n645 * !n657);
om_31 = (!n670 * n681) + (n670 * !n681);


new graph depth
---graph depth print---
var : om_0 depth : 1
var : om_1 depth : 2
var : om_2 depth : 3
var : om_3 depth : 4
var : om_4 depth : 4
var : om_5 depth : 5
var : om_6 depth : 5
var : om_7 depth : 6
var : om_8 depth : 6
var : om_9 depth : 7
var : om_10 depth : 7
var : om_11 depth : 7
var : om_12 depth : 7
var : om_13 depth : 8
var : om_14 depth : 8
var : om_15 depth : 8
var : om_16 depth : 8
var : om_17 depth : 9
var : om_18 depth : 9
var : om_19 depth : 9
var : om_20 depth : 9
var : om_21 depth : 9
var : om_22 depth : 9
var : om_23 depth : 9
var : om_24 depth : 9
var : om_25 depth : 10
var : om_26 depth : 10
var : om_27 depth : 10
var : om_28 depth : 10
var : om_29 depth : 10
var : om_30 depth : 10
var : om_31 depth : 10
---------------------
