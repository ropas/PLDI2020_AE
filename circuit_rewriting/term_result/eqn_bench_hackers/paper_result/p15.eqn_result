cir to graph finished
old graph depth
---graph depth print---
var : om_0 depth : 1
var : om_1 depth : 2
var : om_2 depth : 3
var : om_3 depth : 4
var : om_4 depth : 4
var : om_5 depth : 5
var : om_6 depth : 5
var : om_7 depth : 5
var : om_8 depth : 5
var : om_9 depth : 6
var : om_10 depth : 6
var : om_11 depth : 6
var : om_12 depth : 6
var : om_13 depth : 6
var : om_14 depth : 6
var : om_15 depth : 6
var : om_16 depth : 6
var : om_17 depth : 7
var : om_18 depth : 7
var : om_19 depth : 7
var : om_20 depth : 7
var : om_21 depth : 7
var : om_22 depth : 7
var : om_23 depth : 7
var : om_24 depth : 7
var : om_25 depth : 7
var : om_26 depth : 7
var : om_27 depth : 7
var : om_28 depth : 7
var : om_29 depth : 7
var : om_30 depth : 7
var : om_31 depth : 7
---------------------
============================================= graph opt start ===================================================
initial graph size : 358
initial mult size : 183
whole case num : 500
reduced case num : 116


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 358
selected cripath : 
om_31 n451 n443 n262 n254 n170 n164 n130 n126 n113 n111 n103 n97 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_i33
tmpvar#2  -->  CVar_i1
tmpvar#0  -->  CVar_n97
tmpvar#3  -->  CVar_n107
---------------------

old bexp : (and (and (not (xor i33 (not i1))) norm13) (not (xor (not (and i1 i33)) norm3)))
new bexp : (and (and (xor i33 i1) norm3) norm13)
tgt bexp     : (and (and (not (xor i33 (not i1))) n97) (not (xor (not (and i1 i33)) n107)))
sub old bexp : (and (and (not (xor i33 (not i1))) n97) (not (xor (not (and i1 i33)) n107)))
sub new bexp : (and (and (xor i33 i1) n107) n97)
before depth : 3
after depth : 2
graph replaced


graph mult size : 184
optimal graph replaced, cost : 39744
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
n263 n265 n274 n295 n345 n370 n371 n377 om_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_22 n325 n319 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_29 n419 n418 n414 n353 n347 n301 n297 n278 n277 n267 n263 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_21 n312 n308 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n296 n302 om_20 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_31 n451 n450 n444 n353 n347 n301 n297 n278 n277 n267 n263 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
n114 n118 n128 n129 n130 n164 n170 n254 n262 n275 n279 om_18 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n275 n279 om_18 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_28 n406 n398 n262 n254 n170 n169 n165 n146 n145 n135 n131 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_24 n354 n346 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_20 n302 n296 n262 n254 n170 n169 n165 n146 n145 n135 n131 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
om_18 n279 n275 n262 n261 n255 n209 n205 n186 n185 n175 n171 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
n171 n175 n185 n186 n205 n209 n255 n261 n262 n296 n302 om_20 

dangling node deleted : nodeVal : AND index : 37
dangling node deleted : nodeVal : n110 index : 1
dangling node deleted : nodeVal : NOT index : 35
cleanup fin
sharing detect fin
cleanup fin
graph opt finished
INORDER = i9 i8 i7 i63 i62 i61 i60 i6 i59 i58 i57 i56 i55 i54 i53 i52 i51 i50 i5 i49 i48 i47 i46 i45 i44 i43 i42 i41 i40 i4 i39 i38 i37 i36 i35 i34 i33 i32 i31 i30 i3 i29 i28 i27 i26 i25 i24 i23 i22 i21 i20 i2 i19 i18 i17 i16 i15 i14 i13 i12 i11 i10 i1 i0;
OUTORDER = om_9 om_8 om_7 om_6 om_5 om_4 om_31 om_30 om_3 om_29 om_28 om_27 om_26 om_25 om_24 om_23 om_22 om_21 om_20 om_2 om_19 om_18 om_17 om_16 om_15 om_14 om_13 om_12 om_11 om_10 om_1 om_0;
n105 = (i1 * i33);
n107 = (!i2 * i34) + (i2 * !i34);
n114 = (i2 * i34);
n115 = (!i3 * i35) + (i3 * !i35);
n121 = (i3 * i35);
n122 = (!i36 * i4) + (i36 * !i4);
n131 = (i36 * i4);
n132 = (!i37 * i5) + (i37 * !i5);
n138 = (i37 * i5);
n139 = (!i38 * i6) + (i38 * !i6);
n148 = (i38 * i6);
n149 = (!i39 * i7) + (i39 * !i7);
n158 = (i39 * i7);
n159 = (!i40 * i8) + (i40 * !i8);
n171 = (i40 * i8);
n172 = (!i41 * i9) + (i41 * !i9);
n178 = (i41 * i9);
n179 = (!i10 * i42) + (i10 * !i42);
n188 = (i10 * i42);
n189 = (!i11 * i43) + (i11 * !i43);
n198 = (i11 * i43);
n199 = (!i12 * i44) + (i12 * !i44);
n211 = (i12 * i44);
n212 = (!i13 * i45) + (i13 * !i45);
n221 = (i13 * i45);
n222 = (!i14 * i46) + (i14 * !i46);
n234 = (i14 * i46);
n235 = (!i15 * i47) + (i15 * !i47);
n247 = (i15 * i47);
n248 = (!i16 * i48) + (i16 * !i48);
n263 = (i16 * i48);
n264 = (!i17 * i49) + (i17 * !i49);
n270 = (i17 * i49);
n271 = (!i18 * i50) + (i18 * !i50);
n280 = (i18 * i50);
n281 = (!i19 * i51) + (i19 * !i51);
n290 = (i19 * i51);
n291 = (!i20 * i52) + (i20 * !i52);
n303 = (i20 * i52);
n304 = (!i21 * i53) + (i21 * !i53);
n313 = (i21 * i53);
n314 = (!i22 * i54) + (i22 * !i54);
n326 = (i22 * i54);
n327 = (!i23 * i55) + (i23 * !i55);
n339 = (i23 * i55);
n340 = (!i24 * i56) + (i24 * !i56);
n355 = (i24 * i56);
n356 = (!i25 * i57) + (i25 * !i57);
n365 = (i25 * i57);
n366 = (!i26 * i58) + (i26 * !i58);
n378 = (i26 * i58);
n379 = (!i27 * i59) + (i27 * !i59);
n391 = (i27 * i59);
n392 = (!i28 * i60) + (i28 * !i60);
n407 = (i28 * i60);
n408 = (!i29 * i61) + (i29 * !i61);
n420 = (i29 * i61);
n421 = (!i30 * i62) + (i30 * !i62);
n436 = (i30 * i62);
n437 = (!i31 * i63) + (i31 * !i63);
n452 = (i31 * i63);
n97 = (i0 * i32);
n99 = (!i1);
tmp847 = (!i1 * i33) + (i1 * !i33);
n100 = (!i33 * n99) + (i33 * !n99);
n106 = (!n105);
n108 = (!n106 * n107) + (n106 * !n107);
n112 = (n105 * n107);
n116 = (!n114 * n115) + (n114 * !n115);
n118 = (n114 * n115);
n123 = (!n121 * n122) + (n121 * !n122);
n127 = (n121 * n122);
n133 = (!n131 * n132) + (n131 * !n132);
n135 = (n131 * n132);
n140 = (!n138 * n139) + (n138 * !n139);
n144 = (n138 * n139);
n150 = (!n148 * n149) + (n148 * !n149);
n154 = (n148 * n149);
n160 = (!n158 * n159) + (n158 * !n159);
n166 = (n158 * n159);
n173 = (!n171 * n172) + (n171 * !n172);
n175 = (n171 * n172);
n180 = (!n178 * n179) + (n178 * !n179);
n184 = (n178 * n179);
n190 = (!n188 * n189) + (n188 * !n189);
n194 = (n188 * n189);
n200 = (!n198 * n199) + (n198 * !n199);
n206 = (n198 * n199);
n213 = (!n211 * n212) + (n211 * !n212);
n217 = (n211 * n212);
n223 = (!n221 * n222) + (n221 * !n222);
n229 = (n221 * n222);
n236 = (!n234 * n235) + (n234 * !n235);
n242 = (n234 * n235);
n249 = (!n247 * n248) + (n247 * !n248);
n257 = (n247 * n248);
n265 = (!n263 * n264) + (n263 * !n264);
n267 = (n263 * n264);
n272 = (!n270 * n271) + (n270 * !n271);
n276 = (n270 * n271);
n282 = (!n280 * n281) + (n280 * !n281);
n286 = (n280 * n281);
n292 = (!n290 * n291) + (n290 * !n291);
n298 = (n290 * n291);
n305 = (!n303 * n304) + (n303 * !n304);
n309 = (n303 * n304);
n315 = (!n313 * n314) + (n313 * !n314);
n321 = (n313 * n314);
n328 = (!n326 * n327) + (n326 * !n327);
n334 = (n326 * n327);
n341 = (!n339 * n340) + (n339 * !n340);
n349 = (n339 * n340);
n357 = (!n355 * n356) + (n355 * !n356);
n361 = (n355 * n356);
n367 = (!n365 * n366) + (n365 * !n366);
n373 = (n365 * n366);
n380 = (!n378 * n379) + (n378 * !n379);
n386 = (n378 * n379);
n393 = (!n391 * n392) + (n391 * !n392);
n401 = (n391 * n392);
n409 = (!n407 * n408) + (n407 * !n408);
n415 = (n407 * n408);
n422 = (!n420 * n421) + (n420 * !n421);
n430 = (n420 * n421);
n438 = (!n436 * n437) + (n436 * !n437);
n446 = (n436 * n437);
n453 = (!n437 * n452) + (n437 * !n452);
n98 = (!n97);
tmp846 = (n107 * tmp847);
n102 = (!n100);
n111 = (n97 * tmp846);
n113 = (!n111 * n112) + (n111 * !n112);
n119 = (n113 * n116);
n120 = (!n118 * n119) + (n118 * !n119);
n125 = (n116 * n123);
n128 = (n118 * n123);
n129 = (!n127 * n128) + (n127 * !n128);
n142 = (n133 * n140);
n145 = (n135 * n140);
n146 = (!n144 * n145) + (n144 * !n145);
n152 = (n142 * n150);
n155 = (n146 * n150);
n156 = (!n154 * n155) + (n154 * !n155);
n162 = (n150 * n160);
n167 = (n154 * n160);
n168 = (!n166 * n167) + (n166 * !n167);
n182 = (n173 * n180);
n185 = (n175 * n180);
n186 = (!n184 * n185) + (n184 * !n185);
n192 = (n182 * n190);
n195 = (n186 * n190);
n196 = (!n194 * n195) + (n194 * !n195);
n202 = (n190 * n200);
n207 = (n194 * n200);
n208 = (!n206 * n207) + (n206 * !n207);
n225 = (n213 * n223);
n230 = (n217 * n223);
n231 = (!n229 * n230) + (n229 * !n230);
n238 = (n225 * n236);
n243 = (n231 * n236);
n244 = (!n242 * n243) + (n242 * !n243);
n251 = (n236 * n249);
n258 = (n242 * n249);
n259 = (!n257 * n258) + (n257 * !n258);
n274 = (n265 * n272);
n277 = (n267 * n272);
n278 = (!n276 * n277) + (n276 * !n277);
n284 = (n274 * n282);
n287 = (n278 * n282);
n288 = (!n286 * n287) + (n286 * !n287);
n294 = (n282 * n292);
n299 = (n286 * n292);
n300 = (!n298 * n299) + (n298 * !n299);
n317 = (n305 * n315);
n322 = (n309 * n315);
n323 = (!n321 * n322) + (n321 * !n322);
n330 = (n317 * n328);
n335 = (n323 * n328);
n336 = (!n334 * n335) + (n334 * !n335);
n343 = (n328 * n341);
n350 = (n334 * n341);
n351 = (!n349 * n350) + (n349 * !n350);
n369 = (n357 * n367);
n374 = (n361 * n367);
n375 = (!n373 * n374) + (n373 * !n374);
n382 = (n369 * n380);
n387 = (n375 * n380);
n388 = (!n386 * n387) + (n386 * !n387);
n395 = (n380 * n393);
n402 = (n386 * n393);
n403 = (!n401 * n402) + (n401 * !n402);
n424 = (n409 * n422);
n431 = (n415 * n422);
n432 = (!n430 * n431) + (n430 * !n431);
n440 = (n424 * n438);
n447 = (n432 * n438);
n448 = (!n446 * n447) + (n446 * !n447);
om_0 = (!n100 * n98) + (n100 * !n98);
om_2 = (!n113 * n116) + (n113 * !n116);
om_3 = (!n120 * n123) + (n120 * !n123);
n103 = (n102 * n97);
n126 = (n113 * n125);
n130 = (!n126 * n129) + (n126 * !n129);
n143 = (n130 * n142);
n147 = (!n143 * n146) + (n143 * !n146);
n153 = (n130 * n152);
n157 = (!n153 * n156) + (n153 * !n156);
n163 = (n142 * n162);
n165 = (n146 * n162);
n169 = (!n165 * n168) + (n165 * !n168);
n203 = (n182 * n202);
n205 = (n186 * n202);
n209 = (!n205 * n208) + (n205 * !n208);
n226 = (n203 * n225);
n228 = (n209 * n225);
n232 = (!n228 * n231) + (n228 * !n231);
n239 = (n203 * n238);
n241 = (n209 * n238);
n245 = (!n241 * n244) + (n241 * !n244);
n252 = (n225 * n251);
n256 = (n231 * n251);
n260 = (!n256 * n259) + (n256 * !n259);
n295 = (n274 * n294);
n297 = (n278 * n294);
n301 = (!n297 * n300) + (n297 * !n300);
n318 = (n295 * n317);
n320 = (n301 * n317);
n324 = (!n320 * n323) + (n320 * !n323);
n331 = (n295 * n330);
n333 = (n301 * n330);
n337 = (!n333 * n336) + (n333 * !n336);
n344 = (n317 * n343);
n348 = (n323 * n343);
n352 = (!n348 * n351) + (n348 * !n351);
n396 = (n369 * n395);
n400 = (n375 * n395);
n404 = (!n400 * n403) + (n400 * !n403);
n425 = (n396 * n424);
n429 = (n404 * n424);
n433 = (!n429 * n432) + (n429 * !n432);
n441 = (n396 * n440);
n445 = (n404 * n440);
n449 = (!n445 * n448) + (n445 * !n448);
n104 = (!n103);
n136 = (n130 * n133);
n164 = (n130 * n163);
n170 = (!n164 * n169) + (n164 * !n169);
n193 = (n170 * n192);
n197 = (!n193 * n196) + (n193 * !n196);
n204 = (n170 * n203);
n210 = (!n204 * n209) + (n204 * !n209);
n215 = (n203 * n213);
n218 = (n209 * n213);
n227 = (n170 * n226);
n233 = (!n227 * n232) + (n227 * !n232);
n240 = (n170 * n239);
n246 = (!n240 * n245) + (n240 * !n245);
n253 = (n203 * n252);
n255 = (n209 * n252);
n261 = (!n255 * n260) + (n255 * !n260);
n307 = (n295 * n305);
n310 = (n301 * n305);
n345 = (n295 * n344);
n347 = (n301 * n344);
n353 = (!n347 * n352) + (n347 * !n352);
n383 = (n345 * n382);
n385 = (n353 * n382);
n389 = (!n385 * n388) + (n385 * !n388);
n397 = (n345 * n396);
n399 = (n353 * n396);
n405 = (!n399 * n404) + (n399 * !n404);
n411 = (n396 * n409);
n416 = (n404 * n409);
n426 = (n345 * n425);
n428 = (n353 * n425);
n434 = (!n428 * n433) + (n428 * !n433);
n442 = (n345 * n441);
n444 = (n353 * n441);
n450 = (!n444 * n449) + (n444 * !n449);
om_4 = (!n130 * n133) + (n130 * !n133);
om_6 = (!n147 * n150) + (n147 * !n150);
om_7 = (!n157 * n160) + (n157 * !n160);
n137 = (!n135 * n136) + (n135 * !n136);
n176 = (n170 * n173);
n183 = (n170 * n182);
n216 = (n170 * n215);
n219 = (!n217 * n218) + (n217 * !n218);
n254 = (n170 * n253);
n262 = (!n254 * n261) + (n254 * !n261);
n308 = (n262 * n307);
n311 = (!n309 * n310) + (n309 * !n310);
n319 = (n262 * n318);
n325 = (!n319 * n324) + (n319 * !n324);
n332 = (n262 * n331);
n338 = (!n332 * n337) + (n332 * !n337);
n346 = (n262 * n345);
n354 = (!n346 * n353) + (n346 * !n353);
n359 = (n345 * n357);
n362 = (n353 * n357);
n370 = (n345 * n369);
n372 = (n353 * n369);
n384 = (n262 * n383);
n390 = (!n384 * n389) + (n384 * !n389);
n398 = (n262 * n397);
n406 = (!n398 * n405) + (n398 * !n405);
n412 = (n345 * n411);
n414 = (n353 * n411);
n417 = (!n415 * n416) + (n415 * !n416);
n427 = (n262 * n426);
n435 = (!n427 * n434) + (n427 * !n434);
n443 = (n262 * n442);
n451 = (!n443 * n450) + (n443 * !n450);
om_1 = (!n104 * n108) + (n104 * !n108);
om_11 = (!n197 * n200) + (n197 * !n200);
om_12 = (!n210 * n213) + (n210 * !n213);
om_14 = (!n233 * n236) + (n233 * !n236);
om_15 = (!n246 * n249) + (n246 * !n249);
om_8 = (!n170 * n173) + (n170 * !n173);
n177 = (!n175 * n176) + (n175 * !n176);
n187 = (!n183 * n186) + (n183 * !n186);
n220 = (!n216 * n219) + (n216 * !n219);
n268 = (n262 * n265);
n275 = (n262 * n274);
n285 = (n262 * n284);
n289 = (!n285 * n288) + (n285 * !n288);
n296 = (n262 * n295);
n302 = (!n296 * n301) + (n296 * !n301);
n312 = (!n308 * n311) + (n308 * !n311);
n360 = (n262 * n359);
n363 = (!n361 * n362) + (n361 * !n362);
n371 = (n262 * n370);
n376 = (!n372 * n375) + (n372 * !n375);
n413 = (n262 * n412);
n418 = (!n414 * n417) + (n414 * !n417);
om_16 = (!n262 * n265) + (n262 * !n265);
om_22 = (!n325 * n328) + (n325 * !n328);
om_23 = (!n338 * n341) + (n338 * !n341);
om_24 = (!n354 * n357) + (n354 * !n357);
om_27 = (!n390 * n393) + (n390 * !n393);
om_28 = (!n406 * n409) + (n406 * !n409);
om_30 = (!n435 * n438) + (n435 * !n438);
om_31 = (!n451 * n453) + (n451 * !n453);
om_5 = (!n137 * n140) + (n137 * !n140);
n269 = (!n267 * n268) + (n267 * !n268);
n279 = (!n275 * n278) + (n275 * !n278);
n364 = (!n360 * n363) + (n360 * !n363);
n377 = (!n371 * n376) + (n371 * !n376);
n419 = (!n413 * n418) + (n413 * !n418);
om_10 = (!n187 * n190) + (n187 * !n190);
om_13 = (!n220 * n223) + (n220 * !n223);
om_19 = (!n289 * n292) + (n289 * !n292);
om_20 = (!n302 * n305) + (n302 * !n305);
om_21 = (!n312 * n315) + (n312 * !n315);
om_9 = (!n177 * n180) + (n177 * !n180);
om_17 = (!n269 * n272) + (n269 * !n272);
om_18 = (!n279 * n282) + (n279 * !n282);
om_25 = (!n364 * n367) + (n364 * !n367);
om_26 = (!n377 * n380) + (n377 * !n380);
om_29 = (!n419 * n422) + (n419 * !n422);


new graph depth
---graph depth print---
var : om_0 depth : 1
var : om_1 depth : 2
var : om_2 depth : 2
var : om_3 depth : 3
var : om_4 depth : 3
var : om_5 depth : 4
var : om_6 depth : 4
var : om_7 depth : 4
var : om_8 depth : 4
var : om_9 depth : 5
var : om_10 depth : 5
var : om_11 depth : 5
var : om_12 depth : 5
var : om_13 depth : 5
var : om_14 depth : 5
var : om_15 depth : 5
var : om_16 depth : 5
var : om_17 depth : 6
var : om_18 depth : 6
var : om_19 depth : 6
var : om_20 depth : 6
var : om_21 depth : 6
var : om_22 depth : 6
var : om_23 depth : 6
var : om_24 depth : 6
var : om_25 depth : 6
var : om_26 depth : 6
var : om_27 depth : 6
var : om_28 depth : 6
var : om_29 depth : 6
var : om_30 depth : 6
var : om_31 depth : 6
---------------------
