cir to graph finished
old graph depth
---graph depth print---
var : om_0 depth : 0
var : om_1 depth : 0
var : om_2 depth : 1
var : om_3 depth : 2
var : om_4 depth : 2
var : om_5 depth : 3
var : om_6 depth : 3
var : om_7 depth : 3
var : om_8 depth : 3
var : om_9 depth : 4
var : om_10 depth : 4
var : om_11 depth : 4
var : om_12 depth : 4
var : om_13 depth : 4
var : om_14 depth : 4
var : om_15 depth : 4
var : om_16 depth : 4
var : om_17 depth : 5
var : om_18 depth : 5
var : om_19 depth : 5
var : om_20 depth : 5
var : om_21 depth : 5
var : om_22 depth : 5
var : om_23 depth : 5
var : om_24 depth : 5
var : om_25 depth : 5
var : om_26 depth : 5
var : om_27 depth : 5
var : om_28 depth : 5
var : om_29 depth : 5
var : om_30 depth : 5
var : om_31 depth : 5
---------------------
============================================= graph opt start ===================================================
initial graph size : 289
whole case num : 500
reduced case num : 116


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
om_26 n289 n288 n283 n193 n186 n185 n143 n142 n133 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
n88 n94 n111 n112 n117 n186 n193 n239 n244 n245 om_22 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
n209 n218 n219 n261 n282 n283 n288 n289 om_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
n88 n94 n111 n112 n117 n186 n193 n211 n214 n215 om_19 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
n70 n71 n72 n82 n85 n112 n117 n186 n193 n239 n244 n245 om_22 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
n88 n94 n111 n112 n117 n186 n193 n239 n244 n245 om_22 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
om_27 n300 n299 n294 n193 n186 n185 n143 n126 n120 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
om_19 n215 n214 n211 n193 n186 n117 n112 n85 n82 n81 n69 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
n71 n72 n82 n85 n112 n117 n186 n193 n250 n255 n256 om_23 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
n171 n183 n184 n185 n186 n193 n220 n225 n226 om_20 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
om_18 n207 n206 n203 n193 n186 n117 n112 n85 n82 n72 n71 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
om_19 n215 n214 n211 n193 n186 n185 n143 n126 n120 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 289
selected cripath : 
om_19 n215 n214 n211 n193 n186 n117 n112 n111 n94 n88 

cleanup fin
sharing detect fin
cleanup fin
graph opt finished
INORDER = i9 i8 i7 i6 i5 i4 i31 i30 i3 i29 i28 i27 i26 i25 i24 i23 i22 i21 i20 i2 i19 i18 i17 i16 i15 i14 i13 i12 i11 i10 i1 i0;
OUTORDER = om_9 om_8 om_7 om_6 om_5 om_4 om_31 om_30 om_3 om_29 om_28 om_27 om_26 om_25 om_24 om_23 om_22 om_21 om_20 om_2 om_19 om_18 om_17 om_16 om_15 om_14 om_13 om_12 om_11 om_10 om_1 om_0;
om_0 = true;
n101 = (!i7);
n109 = (!i8);
n114 = (i6 * n101);
n115 = (!i7 * n114) + (i7 * !n114);
n120 = (!i9);
n125 = (!i10);
n128 = (i8 * n120);
n129 = (!i9 * n128) + (i9 * !n128);
n133 = (!i11);
n141 = (!i12);
n146 = (i10 * n133);
n147 = (!i11 * n146) + (i11 * !n146);
n152 = (!i13);
n160 = (!i14);
n165 = (i12 * n152);
n166 = (!i13 * n165) + (i13 * !n165);
n171 = (!i15);
n182 = (!i16);
n189 = (i14 * n171);
n190 = (!i15 * n189) + (i15 * !n189);
n196 = (!i17);
n201 = (!i18);
n204 = (i16 * n196);
n205 = (!i17 * n204) + (i17 * !n204);
n209 = (!i19);
n217 = (!i20);
n222 = (i18 * n209);
n223 = (!i19 * n222) + (i19 * !n222);
n228 = (!i21);
n236 = (!i22);
n241 = (i20 * n228);
n242 = (!i21 * n241) + (i21 * !n241);
n247 = (!i23);
n258 = (!i24);
n265 = (i22 * n247);
n266 = (!i23 * n265) + (i23 * !n265);
n272 = (!i25);
n280 = (!i26);
n285 = (i24 * n272);
n286 = (!i25 * n285) + (i25 * !n285);
n291 = (!i27);
n302 = (!i28);
n309 = (i26 * n291);
n310 = (!i27 * n309) + (i27 * !n309);
n316 = (!i29);
n327 = (!i30);
n334 = (i28 * n316);
n335 = (!i29 * n334) + (i29 * !n334);
n341 = (!i31);
n66 = (!i0);
n67 = (!i1 * n66) + (i1 * !n66);
n69 = (!i2);
n70 = (!i1);
n71 = (i0 * n70);
n72 = (!i1 * n71) + (i1 * !n71);
n75 = (!i3);
n80 = (!i4);
n83 = (i2 * n75);
n84 = (!i3 * n83) + (i3 * !n83);
n88 = (!i5);
n93 = (!i6);
n96 = (i4 * n88);
n97 = (!i5 * n96) + (i5 * !n96);
om_1 = (!i1 * n67) + (i1 * !n67);
n104 = (n93 * n97);
n110 = (n101 * n93);
n113 = (n110 * n97);
n116 = (!n113 * n115) + (n113 * !n115);
n126 = (n109 * n120);
n134 = (n125 * n126);
n136 = (n125 * n129);
n142 = (n125 * n133);
n145 = (n129 * n142);
n148 = (!n145 * n147) + (n145 * !n147);
n155 = (n141 * n148);
n161 = (n141 * n152);
n172 = (n160 * n161);
n176 = (n160 * n166);
n183 = (n160 * n171);
n188 = (n166 * n183);
n191 = (!n188 * n190) + (n188 * !n190);
n202 = (n182 * n196);
n210 = (n201 * n202);
n212 = (n201 * n205);
n218 = (n201 * n209);
n221 = (n205 * n218);
n224 = (!n221 * n223) + (n221 * !n223);
n231 = (n217 * n224);
n237 = (n217 * n228);
n248 = (n236 * n237);
n252 = (n236 * n242);
n259 = (n236 * n247);
n264 = (n242 * n259);
n267 = (!n264 * n266) + (n264 * !n266);
n281 = (n258 * n272);
n292 = (n280 * n281);
n296 = (n280 * n286);
n303 = (n280 * n291);
n308 = (n286 * n303);
n311 = (!n308 * n310) + (n308 * !n310);
n321 = (n302 * n311);
n328 = (n302 * n316);
n342 = (n327 * n328);
n348 = (n327 * n335);
n73 = (!n69 * n72) + (n69 * !n72);
n76 = (n69 * n72);
n81 = (n69 * n75);
n82 = (n72 * n81);
n85 = (!n82 * n84) + (n82 * !n84);
n86 = (!n80 * n85) + (n80 * !n85);
n89 = (n80 * n85);
n94 = (n80 * n88);
n102 = (n93 * n94);
n103 = (n102 * n85);
n105 = (!i6 * n104) + (i6 * !n104);
n111 = (n110 * n94);
n112 = (n111 * n85);
n117 = (!n112 * n116) + (n112 * !n116);
n127 = (n117 * n126);
n130 = (!n127 * n129) + (n127 * !n129);
n135 = (n117 * n134);
n137 = (!i10 * n136) + (i10 * !n136);
n143 = (n126 * n142);
n156 = (!i12 * n155) + (i12 * !n155);
n162 = (n143 * n161);
n164 = (n148 * n161);
n167 = (!n164 * n166) + (n164 * !n166);
n173 = (n143 * n172);
n175 = (n148 * n172);
n177 = (!i14 * n176) + (i14 * !n176);
n184 = (n161 * n183);
n187 = (n148 * n184);
n192 = (!n187 * n191) + (n187 * !n191);
n213 = (!i18 * n212) + (i18 * !n212);
n219 = (n202 * n218);
n232 = (!i20 * n231) + (i20 * !n231);
n238 = (n219 * n237);
n240 = (n224 * n237);
n243 = (!n240 * n242) + (n240 * !n242);
n249 = (n219 * n248);
n251 = (n224 * n248);
n253 = (!i22 * n252) + (i22 * !n252);
n260 = (n237 * n259);
n263 = (n224 * n260);
n268 = (!n263 * n267) + (n263 * !n267);
n284 = (n268 * n281);
n287 = (!n284 * n286) + (n284 * !n286);
n295 = (n268 * n292);
n297 = (!i26 * n296) + (i26 * !n296);
n304 = (n281 * n303);
n322 = (!i28 * n321) + (i28 * !n321);
n329 = (n304 * n328);
n333 = (n311 * n328);
n336 = (!n333 * n335) + (n333 * !n335);
n343 = (n304 * n342);
n347 = (n311 * n342);
n349 = (!i30 * n348) + (i30 * !n348);
n77 = (!i2 * n76) + (i2 * !n76);
n90 = (!i4 * n89) + (i4 * !n89);
n95 = (n85 * n94);
n98 = (!n95 * n97) + (n95 * !n97);
om_2 = (!i2 * n73) + (i2 * !n73);
om_4 = (!i4 * n86) + (i4 * !n86);
n106 = (!n103 * n105) + (n103 * !n105);
n118 = (!n109 * n117) + (n109 * !n117);
n121 = (n109 * n117);
n131 = (!n125 * n130) + (n125 * !n130);
n138 = (!n135 * n137) + (n135 * !n137);
n144 = (n117 * n143);
n149 = (!n144 * n148) + (n144 * !n148);
n153 = (n141 * n143);
n154 = (n117 * n153);
n157 = (!n154 * n156) + (n154 * !n156);
n163 = (n117 * n162);
n168 = (!n163 * n167) + (n163 * !n167);
n174 = (n117 * n173);
n178 = (!n175 * n177) + (n175 * !n177);
n185 = (n143 * n184);
n186 = (n117 * n185);
n193 = (!n186 * n192) + (n186 * !n192);
n211 = (n193 * n210);
n214 = (!n211 * n213) + (n211 * !n213);
n220 = (n193 * n219);
n225 = (!n220 * n224) + (n220 * !n224);
n229 = (n217 * n219);
n239 = (n193 * n238);
n244 = (!n239 * n243) + (n239 * !n243);
n250 = (n193 * n249);
n254 = (!n251 * n253) + (n251 * !n253);
n261 = (n219 * n260);
n275 = (n258 * n268);
n293 = (n261 * n292);
n298 = (!n295 * n297) + (n295 * !n297);
n305 = (n261 * n304);
n307 = (n268 * n304);
n312 = (!n307 * n311) + (n307 * !n311);
n317 = (n302 * n304);
n320 = (n268 * n317);
n323 = (!n320 * n322) + (n320 * !n322);
n330 = (n261 * n329);
n332 = (n268 * n329);
n337 = (!n332 * n336) + (n332 * !n336);
n344 = (n261 * n343);
n346 = (n268 * n343);
n350 = (!n347 * n349) + (n347 * !n349);
n78 = (!n75 * n77) + (n75 * !n77);
n91 = (!n88 * n90) + (n88 * !n90);
n99 = (!n93 * n98) + (n93 * !n98);
n107 = (!n101 * n106) + (n101 * !n106);
n122 = (!i8 * n121) + (i8 * !n121);
n139 = (!n133 * n138) + (n133 * !n138);
n150 = (!n141 * n149) + (n141 * !n149);
n158 = (!n152 * n157) + (n152 * !n157);
n169 = (!n160 * n168) + (n160 * !n168);
n179 = (!n174 * n178) + (n174 * !n178);
n194 = (!n182 * n193) + (n182 * !n193);
n197 = (n182 * n193);
n203 = (n193 * n202);
n215 = (!n209 * n214) + (n209 * !n214);
n226 = (!n217 * n225) + (n217 * !n225);
n230 = (n193 * n229);
n233 = (!n230 * n232) + (n230 * !n232);
n245 = (!n236 * n244) + (n236 * !n244);
n255 = (!n250 * n254) + (n250 * !n254);
n262 = (n193 * n261);
n269 = (!n262 * n268) + (n262 * !n268);
n273 = (n258 * n261);
n274 = (n193 * n273);
n276 = (!i24 * n275) + (i24 * !n275);
n282 = (n261 * n281);
n283 = (n193 * n282);
n288 = (!n283 * n287) + (n283 * !n287);
n294 = (n193 * n293);
n299 = (!n294 * n298) + (n294 * !n298);
n306 = (n193 * n305);
n313 = (!n306 * n312) + (n306 * !n312);
n318 = (n261 * n317);
n319 = (n193 * n318);
n324 = (!n319 * n323) + (n319 * !n323);
n331 = (n193 * n330);
n338 = (!n331 * n337) + (n331 * !n337);
n345 = (n193 * n344);
n351 = (!n346 * n350) + (n346 * !n350);
om_10 = (!i10 * n131) + (i10 * !n131);
om_3 = (!i3 * n78) + (i3 * !n78);
om_5 = (!i5 * n91) + (i5 * !n91);
om_6 = (!i6 * n99) + (i6 * !n99);
om_8 = (!i8 * n118) + (i8 * !n118);
n123 = (!n120 * n122) + (n120 * !n122);
n180 = (!n171 * n179) + (n171 * !n179);
n198 = (!i16 * n197) + (i16 * !n197);
n206 = (!n203 * n205) + (n203 * !n205);
n234 = (!n228 * n233) + (n228 * !n233);
n256 = (!n247 * n255) + (n247 * !n255);
n270 = (!n258 * n269) + (n258 * !n269);
n277 = (!n274 * n276) + (n274 * !n276);
n289 = (!n280 * n288) + (n280 * !n288);
n300 = (!n291 * n299) + (n291 * !n299);
n314 = (!n302 * n313) + (n302 * !n313);
n325 = (!n316 * n324) + (n316 * !n324);
n339 = (!n327 * n338) + (n327 * !n338);
n352 = (!n345 * n351) + (n345 * !n351);
om_11 = (!i11 * n139) + (i11 * !n139);
om_12 = (!i12 * n150) + (i12 * !n150);
om_13 = (!i13 * n158) + (i13 * !n158);
om_14 = (!i14 * n169) + (i14 * !n169);
om_16 = (!i16 * n194) + (i16 * !n194);
om_19 = (!i19 * n215) + (i19 * !n215);
om_20 = (!i20 * n226) + (i20 * !n226);
om_22 = (!i22 * n245) + (i22 * !n245);
om_7 = (!i7 * n107) + (i7 * !n107);
n199 = (!n196 * n198) + (n196 * !n198);
n207 = (!n201 * n206) + (n201 * !n206);
n278 = (!n272 * n277) + (n272 * !n277);
n353 = (!n341 * n352) + (n341 * !n352);
om_15 = (!i15 * n180) + (i15 * !n180);
om_21 = (!i21 * n234) + (i21 * !n234);
om_23 = (!i23 * n256) + (i23 * !n256);
om_24 = (!i24 * n270) + (i24 * !n270);
om_26 = (!i26 * n289) + (i26 * !n289);
om_27 = (!i27 * n300) + (i27 * !n300);
om_28 = (!i28 * n314) + (i28 * !n314);
om_29 = (!i29 * n325) + (i29 * !n325);
om_30 = (!i30 * n339) + (i30 * !n339);
om_9 = (!i9 * n123) + (i9 * !n123);
om_17 = (!i17 * n199) + (i17 * !n199);
om_18 = (!i18 * n207) + (i18 * !n207);
om_25 = (!i25 * n278) + (i25 * !n278);
om_31 = (!i31 * n353) + (i31 * !n353);


new graph depth
---graph depth print---
var : om_0 depth : 0
var : om_1 depth : 0
var : om_2 depth : 1
var : om_3 depth : 2
var : om_4 depth : 2
var : om_5 depth : 3
var : om_6 depth : 3
var : om_7 depth : 3
var : om_8 depth : 3
var : om_9 depth : 4
var : om_10 depth : 4
var : om_11 depth : 4
var : om_12 depth : 4
var : om_13 depth : 4
var : om_14 depth : 4
var : om_15 depth : 4
var : om_16 depth : 4
var : om_17 depth : 5
var : om_18 depth : 5
var : om_19 depth : 5
var : om_20 depth : 5
var : om_21 depth : 5
var : om_22 depth : 5
var : om_23 depth : 5
var : om_24 depth : 5
var : om_25 depth : 5
var : om_26 depth : 5
var : om_27 depth : 5
var : om_28 depth : 5
var : om_29 depth : 5
var : om_30 depth : 5
var : om_31 depth : 5
---------------------
