cir to graph finished
old graph depth
---graph depth print---
var : om_0 depth : 0
var : om_1 depth : 1
var : om_2 depth : 2
var : om_3 depth : 3
var : om_4 depth : 3
var : om_5 depth : 4
var : om_6 depth : 4
var : om_7 depth : 4
var : om_8 depth : 4
var : om_9 depth : 5
var : om_10 depth : 5
var : om_11 depth : 5
var : om_12 depth : 5
var : om_13 depth : 5
var : om_14 depth : 5
var : om_15 depth : 5
var : om_16 depth : 5
var : om_17 depth : 6
var : om_18 depth : 6
var : om_19 depth : 6
var : om_20 depth : 6
var : om_21 depth : 6
var : om_22 depth : 6
var : om_23 depth : 6
var : om_24 depth : 6
var : om_25 depth : 6
var : om_26 depth : 6
var : om_27 depth : 6
var : om_28 depth : 6
var : om_29 depth : 6
var : om_30 depth : 6
var : om_31 depth : 6
---------------------
============================================= graph opt start ===================================================
initial graph size : 292
whole case num : 500
reduced case num : 116


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 292
selected cripath : 
n167 n180 n181 n182 n183 n184 n191 n307 n308 n315 om_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 292
selected cripath : 
om_17 n195 n194 n191 n184 n183 n113 n108 n107 n81 n78 n77 n69 n68 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i17
tmpvar#1  -->  CVar_i16
tmpvar#2  -->  CVar_n191
tmpvar#3  -->  CVar_n193
---------------------

old bexp : (and n117 (xor n118 (and n107 i_13)))
new bexp : (xor (and (and n117 i_13) n107) (and n117 n118))
tgt bexp     : (and i17 (xor i16 (and n191 n193)))
sub old bexp : (and i17 (xor i16 (and n191 n193)))
sub new bexp : (xor (and (and i17 n193) n191) (and i17 i16))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_26 n289 n284 n283 n191 n184 n183 n182 n181 n157 n156 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_26 n289 n284 n283 n191 n184 n183 n113 n108 n107 n106 n105 n95 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_26 n289 n284 n283 n282 n260 n216 n215 n205 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_25 n278 n274 n273 n191 n184 n183 n113 n108 n107 n81 n78 n77 n76 n71 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
n83 n88 n106 n107 n108 n113 n183 n184 n191 n347 n348 n356 om_31 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_23 n255 n249 n248 n191 n184 n183 n113 n108 n107 n106 n105 n95 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
n156 n157 n181 n182 n183 n184 n191 n227 n228 n232 om_21 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_27 n301 n295 n294 n293 n260 n216 n198 n197 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_22 n243 n238 n237 n191 n184 n183 n113 n108 n107 n106 n105 n95 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
n83 n88 n106 n107 n108 n113 n183 n184 n191 n294 n295 n301 om_27 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_25 n278 n274 n273 n191 n184 n183 n113 n108 n107 n81 n78 n77 n69 n68 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
n214 n215 n216 n260 n282 n283 n284 n289 om_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 293
selected cripath : 
om_28 n315 n308 n307 n191 n184 n183 n182 n181 n180 n167 

cleanup fin
sharing detect fin
cleanup fin
graph opt finished
INORDER = i9 i8 i7 i6 i5 i4 i31 i30 i3 i29 i28 i27 i26 i25 i24 i23 i22 i21 i20 i2 i19 i18 i17 i16 i15 i14 i13 i12 i11 i10 i1 i0;
OUTORDER = om_9 om_8 om_7 om_6 om_5 om_4 om_31 om_30 om_3 om_29 om_28 om_27 om_26 om_25 om_24 om_23 om_22 om_21 om_20 om_2 om_19 om_18 om_17 om_16 om_15 om_14 om_13 om_12 om_11 om_10 om_1 om_0;
om_0 = false;
n104 = (!i7);
n110 = (i6 * n104);
n115 = (!i8);
n119 = (!i9);
n123 = (i8 * n119);
n127 = (!i10);
n136 = (!i11);
n142 = (i10 * n136);
n147 = (!i12);
n156 = (!i13);
n162 = (i12 * n156);
n167 = (!i14);
n179 = (!i15);
n187 = (i14 * n179);
n193 = (!i16);
n197 = (!i17);
n201 = (i16 * n197);
n205 = (!i18);
n214 = (!i19);
n220 = (i18 * n214);
n225 = (!i20);
n234 = (!i21);
n240 = (i20 * n234);
n245 = (!i22);
n257 = (!i23);
n265 = (i22 * n257);
n271 = (!i24);
n280 = (!i25);
n286 = (i24 * n280);
n291 = (!i26);
n303 = (!i27);
n311 = (i26 * n303);
n317 = (!i28);
n329 = (!i29);
n337 = (i28 * n329);
n343 = (!i30);
n67 = (!i1);
n68 = (i0 * n67);
n69 = (!i1 * n68) + (i1 * !n68);
n71 = (!i2);
n75 = (!i3);
n79 = (i2 * n75);
n83 = (!i4);
n87 = (!i5);
n91 = (i4 * n87);
n95 = (!i6);
om_1 = (i0 * i1);
om_2 = (i2 * n69);
n105 = (n104 * n95);
n111 = (!n104 * n110) + (n104 * !n110);
n120 = (n115 * n119);
n124 = (!n119 * n123) + (n119 * !n123);
n128 = (n120 * n127);
n137 = (n127 * n136);
n143 = (!n136 * n142) + (n136 * !n142);
n157 = (n147 * n156);
n163 = (!n156 * n162) + (n156 * !n162);
n168 = (n157 * n167);
n180 = (n167 * n179);
n188 = (!n179 * n187) + (n179 * !n187);
n198 = (n193 * n197);
n202 = (!n197 * n201) + (n197 * !n201);
n206 = (n198 * n205);
n215 = (n205 * n214);
n221 = (!n214 * n220) + (n214 * !n220);
n235 = (n225 * n234);
n241 = (!n234 * n240) + (n234 * !n240);
n246 = (n235 * n245);
n258 = (n245 * n257);
n266 = (!n257 * n265) + (n257 * !n265);
n281 = (n271 * n280);
n287 = (!n280 * n286) + (n280 * !n286);
n292 = (n281 * n291);
n304 = (n291 * n303);
n312 = (!n303 * n311) + (n303 * !n311);
n330 = (n317 * n329);
n338 = (!n329 * n337) + (n329 * !n337);
n344 = (n330 * n343);
n72 = (n69 * n71);
n76 = (n71 * n75);
n77 = (n69 * n76);
n80 = (!n75 * n79) + (n75 * !n79);
n88 = (n83 * n87);
n92 = (!n87 * n91) + (n87 * !n91);
n96 = (n88 * n95);
n106 = (n105 * n88);
n131 = (!n124);
n138 = (n120 * n137);
n141 = (n131 * n137);
n144 = (!n141 * n143) + (n141 * !n143);
n158 = (n138 * n157);
n169 = (n138 * n168);
n173 = (!n163);
n181 = (n157 * n180);
n186 = (n173 * n180);
n189 = (!n186 * n188) + (n186 * !n188);
n209 = (!n202);
n216 = (n198 * n215);
n219 = (n209 * n215);
n222 = (!n219 * n221) + (n219 * !n221);
n236 = (n216 * n235);
n247 = (n216 * n246);
n251 = (!n241);
n259 = (n235 * n258);
n264 = (n251 * n258);
n267 = (!n264 * n266) + (n264 * !n266);
n297 = (!n287);
n305 = (n281 * n304);
n310 = (n297 * n304);
n313 = (!n310 * n312) + (n310 * !n312);
n331 = (n305 * n330);
n345 = (n305 * n344);
n351 = (!n338);
n73 = (!i2 * n72) + (i2 * !n72);
n78 = (!n77);
n81 = (!n78 * n80) + (n78 * !n80);
n89 = (n81 * n88);
n97 = (n81 * n96);
n99 = (!n92);
n100 = (n95 * n99);
n107 = (n106 * n81);
n109 = (n105 * n99);
n112 = (!n109 * n111) + (n109 * !n111);
n132 = (n127 * n131);
n148 = (n138 * n147);
n151 = (!n144);
n172 = (n151 * n168);
n174 = (n167 * n173);
n182 = (n138 * n181);
n185 = (n151 * n181);
n190 = (!n185 * n189) + (n185 * !n189);
n210 = (n205 * n209);
n226 = (n216 * n225);
n229 = (!n222);
n250 = (n229 * n246);
n252 = (n245 * n251);
n260 = (n216 * n259);
n263 = (n229 * n259);
n268 = (!n263 * n267) + (n263 * !n267);
n293 = (n260 * n292);
n298 = (n291 * n297);
n306 = (n260 * n305);
n318 = (n305 * n317);
n323 = (!n313);
n332 = (n260 * n331);
n346 = (n260 * n345);
n350 = (n323 * n344);
n352 = (n343 * n351);
n84 = (n81 * n83);
n90 = (!n89);
n93 = (!n90 * n92) + (n90 * !n92);
n98 = (!n97);
om_3 = (i3 * n73);
om_4 = (i4 * n81);
n101 = (!n100 * n95) + (n100 * !n95);
n102 = (!n101 * n98) + (n101 * !n98);
n108 = (!n107);
n113 = (!n108 * n112) + (n108 * !n112);
n133 = (!n127 * n132) + (n127 * !n132);
n149 = (n113 * n148);
n152 = (n147 * n151);
n159 = (n113 * n158);
n161 = (n151 * n157);
n170 = (n113 * n169);
n175 = (!n167 * n174) + (n167 * !n174);
n176 = (!n172 * n175) + (n172 * !n175);
n183 = (n113 * n182);
n211 = (!n205 * n210) + (n205 * !n210);
n230 = (n225 * n229);
n239 = (n229 * n235);
n253 = (!n245 * n252) + (n245 * !n252);
n254 = (!n250 * n253) + (n250 * !n253);
n272 = (n260 * n271);
n275 = (!n268);
n282 = (n260 * n281);
n299 = (!n291 * n298) + (n291 * !n298);
n319 = (n260 * n318);
n322 = (n275 * n318);
n324 = (n317 * n323);
n335 = (n275 * n331);
n336 = (n323 * n330);
n349 = (n275 * n345);
n353 = (!n343 * n352) + (n343 * !n352);
n354 = (!n350 * n353) + (n350 * !n353);
n85 = (!i4 * n84) + (i4 * !n84);
om_6 = (i6 * n93);
n116 = (n113 * n115);
n121 = (n113 * n120);
n129 = (n113 * n128);
n139 = (n113 * n138);
n150 = (!n149);
n153 = (!n147 * n152) + (n147 * !n152);
n160 = (!n159);
n164 = (!n161 * n163) + (n161 * !n163);
n171 = (!n170);
n177 = (!n171 * n176) + (n171 * !n176);
n184 = (!n183);
n191 = (!n184 * n190) + (n184 * !n190);
n231 = (!n225 * n230) + (n225 * !n230);
n242 = (!n239 * n241) + (n239 * !n241);
n273 = (n191 * n272);
n276 = (n271 * n275);
n283 = (n191 * n282);
n285 = (n275 * n281);
n294 = (n191 * n293);
n296 = (n275 * n292);
n300 = (!n296 * n299) + (n296 * !n299);
n307 = (n191 * n306);
n309 = (n275 * n305);
n314 = (!n309 * n313) + (n309 * !n313);
n320 = (n191 * n319);
n325 = (!n317 * n324) + (n317 * !n324);
n326 = (!n322 * n325) + (n322 * !n325);
n333 = (n191 * n332);
n339 = (!n336 * n338) + (n336 * !n338);
n340 = (!n335 * n339) + (n335 * !n339);
n347 = (n191 * n346);
n355 = (!n349 * n354) + (n349 * !n354);
om_5 = (i5 * n85);
om_7 = (i7 * n102);
om_8 = (i8 * n113);
n117 = (!i8 * n116) + (i8 * !n116);
n122 = (!n121);
n130 = (!n129);
n134 = (!n130 * n133) + (n130 * !n133);
n140 = (!n139);
n145 = (!n140 * n144) + (n140 * !n144);
n154 = (!n150 * n153) + (n150 * !n153);
n165 = (!n160 * n164) + (n160 * !n164);
n194 = (n191 * n193);
n199 = (n191 * n198);
n207 = (n191 * n206);
n217 = (n191 * n216);
n227 = (n191 * n226);
n237 = (n191 * n236);
n248 = (n191 * n247);
n261 = (n191 * n260);
n274 = (!n273);
n277 = (!n271 * n276) + (n271 * !n276);
n284 = (!n283);
n288 = (!n285 * n287) + (n285 * !n287);
n295 = (!n294);
n301 = (!n295 * n300) + (n295 * !n300);
n308 = (!n307);
n315 = (!n308 * n314) + (n308 * !n314);
n321 = (!n320);
n327 = (!n321 * n326) + (n321 * !n326);
n334 = (!n333);
n341 = (!n334 * n340) + (n334 * !n340);
n348 = (!n347);
n356 = (!n348 * n355) + (n348 * !n355);
om_15 = (i15 * n177);
om_16 = (i16 * n191);
n125 = (!n122 * n124) + (n122 * !n124);
n195 = (!i16 * n194) + (i16 * !n194);
n200 = (!n199);
n208 = (!n207);
n218 = (!n217);
n228 = (!n227);
n232 = (!n228 * n231) + (n228 * !n231);
n238 = (!n237);
n243 = (!n238 * n242) + (n238 * !n242);
n249 = (!n248);
n255 = (!n249 * n254) + (n249 * !n254);
n262 = (!n261);
n269 = (!n262 * n268) + (n262 * !n268);
n278 = (!n274 * n277) + (n274 * !n277);
n289 = (!n284 * n288) + (n284 * !n288);
om_11 = (i11 * n134);
om_12 = (i12 * n145);
om_13 = (i13 * n154);
om_14 = (i14 * n165);
om_27 = (i27 * n301);
om_28 = (i28 * n315);
om_29 = (i29 * n327);
om_30 = (i30 * n341);
om_31 = (i31 * n356);
om_9 = (i9 * n117);
n203 = (!n200 * n202) + (n200 * !n202);
n212 = (!n208 * n211) + (n208 * !n211);
n223 = (!n218 * n222) + (n218 * !n222);
om_10 = (i10 * n125);
om_17 = (i17 * n195);
om_21 = (i21 * n232);
om_22 = (i22 * n243);
om_23 = (i23 * n255);
om_24 = (i24 * n269);
om_25 = (i25 * n278);
om_26 = (i26 * n289);
om_18 = (i18 * n203);
om_19 = (i19 * n212);
om_20 = (i20 * n223);


new graph depth
---graph depth print---
var : om_0 depth : 0
var : om_1 depth : 1
var : om_2 depth : 2
var : om_3 depth : 3
var : om_4 depth : 3
var : om_5 depth : 4
var : om_6 depth : 4
var : om_7 depth : 4
var : om_8 depth : 4
var : om_9 depth : 5
var : om_10 depth : 5
var : om_11 depth : 5
var : om_12 depth : 5
var : om_13 depth : 5
var : om_14 depth : 5
var : om_15 depth : 5
var : om_16 depth : 5
var : om_17 depth : 6
var : om_18 depth : 6
var : om_19 depth : 6
var : om_20 depth : 6
var : om_21 depth : 6
var : om_22 depth : 6
var : om_23 depth : 6
var : om_24 depth : 6
var : om_25 depth : 6
var : om_26 depth : 6
var : om_27 depth : 6
var : om_28 depth : 6
var : om_29 depth : 6
var : om_30 depth : 6
var : om_31 depth : 6
---------------------
