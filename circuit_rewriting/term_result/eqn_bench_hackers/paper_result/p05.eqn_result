cir to graph finished
old graph depth
---graph depth print---
var : om_0 depth : 0
var : om_1 depth : 1
var : om_2 depth : 2
var : om_3 depth : 3
var : om_4 depth : 3
var : om_5 depth : 4
var : om_6 depth : 4
var : om_7 depth : 4
var : om_8 depth : 4
var : om_9 depth : 5
var : om_10 depth : 5
var : om_11 depth : 5
var : om_12 depth : 5
var : om_13 depth : 5
var : om_14 depth : 5
var : om_15 depth : 5
var : om_16 depth : 5
var : om_17 depth : 6
var : om_18 depth : 6
var : om_19 depth : 6
var : om_20 depth : 6
var : om_21 depth : 6
var : om_22 depth : 6
var : om_23 depth : 6
var : om_24 depth : 6
var : om_25 depth : 6
var : om_26 depth : 6
var : om_27 depth : 6
var : om_28 depth : 6
var : om_29 depth : 6
var : om_30 depth : 6
var : om_31 depth : 6
---------------------
============================================= graph opt start ===================================================
initial graph size : 351
whole case num : 500
reduced case num : 116


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 351
selected cripath : 
n113 n124 n125 n126 n131 n216 n223 n281 n286 n287 n288 n289 om_22 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i22
tmpvar#1  -->  CVar_n278
tmpvar#3  -->  CVar_n223
tmpvar#2  -->  CVar_n280
tmpvar#4  -->  CVar_n285
---------------------

old bexp : (and n193 (xor n249 (xor (and n269 n213) n286)))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i22 (xor n278 (xor (and n223 n280) n285)))
sub old bexp : (and i22 (xor n278 (xor (and n223 n280) n285)))
sub new bexp : (xor (and (xor n285 n278) i22) (and (and i22 n280) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 355
selected cripath : 
n123 n144 n165 n215 n216 n223 n229 n230 n231 n232 n233 om_17 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i17
tmpvar#1  -->  CVar_n228
tmpvar#2  -->  CVar_i16
tmpvar#3  -->  CVar_n212
tmpvar#4  -->  CVar_n223
---------------------

old bexp : (and n193 (xor n249 (xor n286 (and n213 n269))))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i17 (xor n228 (xor i16 (and n212 n223))))
sub old bexp : (and i17 (xor n228 (xor i16 (and n212 n223))))
sub new bexp : (xor (and (xor i16 n228) i17) (and (and i17 n212) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
n245 n256 n257 n307 n374 n375 n380 n381 n382 n383 om_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 359
selected cripath : 
n163 n187 n214 n215 n216 n223 n258 n263 n264 n265 n266 om_20 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i20
tmpvar#1  -->  CVar_n255
tmpvar#3  -->  CVar_n223
tmpvar#2  -->  CVar_n257
tmpvar#4  -->  CVar_n262
---------------------

old bexp : (and n193 (xor n249 (xor (and n269 n213) n286)))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i20 (xor n255 (xor (and n223 n257) n262)))
sub old bexp : (and i20 (xor n255 (xor (and n223 n257) n262)))
sub new bexp : (xor (and (xor n262 n255) i20) (and (and i20 n257) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 363
selected cripath : 
n71 n87 n88 n91 n126 n131 n216 n223 n333 n338 n339 n340 n341 om_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 363
selected cripath : 
n86 n104 n125 n126 n131 n216 n223 n308 n315 n316 n317 n318 om_24 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i24
tmpvar#1  -->  CVar_n304
tmpvar#3  -->  CVar_n223
tmpvar#2  -->  CVar_n307
tmpvar#4  -->  CVar_n314
---------------------

old bexp : (and n193 (xor n249 (xor (and n269 n213) n286)))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i24 (xor n304 (xor (and n223 n307) n314)))
sub old bexp : (and i24 (xor n304 (xor (and n223 n307) n314)))
sub new bexp : (xor (and (xor n314 n304) i24) (and (and i24 n307) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 367
selected cripath : 
n96 n104 n125 n126 n131 n216 n223 n270 n273 n274 n275 n276 om_21 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i21
tmpvar#1  -->  CVar_n268
tmpvar#3  -->  CVar_n223
tmpvar#2  -->  CVar_n269
tmpvar#4  -->  CVar_n272
---------------------

old bexp : (and n193 (xor n249 (xor (and n269 n213) n286)))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i21 (xor n268 (xor (and n223 n269) n272)))
sub old bexp : (and i21 (xor n268 (xor (and n223 n269) n272)))
sub new bexp : (xor (and (xor n272 n268) i21) (and (and i21 n269) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
n235 n256 n257 n307 n345 n346 n351 n352 n353 n354 om_27 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
om_30 n399 n398 n397 n396 n389 n223 n216 n131 n126 n125 n124 n113 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 371
selected cripath : 
om_19 n253 n252 n251 n250 n247 n223 n216 n215 n165 n144 n136 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i19
tmpvar#1  -->  CVar_n245
tmpvar#3  -->  CVar_n223
tmpvar#2  -->  CVar_n246
tmpvar#4  -->  CVar_n249
---------------------

old bexp : (and n193 (xor n249 (xor (and n269 n213) n286)))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i19 (xor n245 (xor (and n223 n246) n249)))
sub old bexp : (and i19 (xor n245 (xor (and n223 n246) n249)))
sub new bexp : (xor (and (xor n249 n245) i19) (and (and i19 n246) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 375
selected cripath : 
om_28 n370 n369 n368 n367 n360 n223 n216 n131 n126 n125 n124 n113 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 375
selected cripath : 
om_23 n302 n301 n300 n299 n294 n223 n216 n131 n126 n91 n88 n74 n73 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i23
tmpvar#1  -->  CVar_n291
tmpvar#3  -->  CVar_n223
tmpvar#2  -->  CVar_n293
tmpvar#4  -->  CVar_n298
---------------------

old bexp : (and n193 (xor n249 (xor (and n269 n213) n286)))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i23 (xor n291 (xor (and n223 n293) n298)))
sub old bexp : (and i23 (xor n291 (xor (and n223 n293) n298)))
sub new bexp : (xor (and (xor n298 n291) i23) (and (and i23 n293) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 379
selected cripath : 
om_18 n243 n242 n241 n240 n237 n223 n216 n131 n126 n125 n124 n103 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_i18
tmpvar#1  -->  CVar_n235
tmpvar#3  -->  CVar_n223
tmpvar#2  -->  CVar_n236
tmpvar#4  -->  CVar_n239
---------------------

old bexp : (and n193 (xor n249 (xor (and n269 n213) n286)))
new bexp : (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
tgt bexp     : (and i18 (xor n235 (xor (and n223 n236) n239)))
sub old bexp : (and i18 (xor n235 (xor (and n223 n236) n239)))
sub new bexp : (xor (and (xor n239 n235) i18) (and (and i18 n236) n223))
before depth : 6
after depth : 5
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
om_29 n383 n382 n381 n380 n375 n223 n216 n131 n126 n91 n88 n74 n73 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
n235 n256 n257 n307 n321 n322 n325 n326 n327 n328 om_25 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
om_25 n328 n327 n326 n325 n322 n223 n216 n131 n126 n91 n88 n87 n79 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
n153 n164 n165 n215 n216 n223 n360 n367 n368 n369 n370 om_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
n291 n305 n306 n307 n359 n360 n367 n368 n369 n370 om_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
n255 n279 n306 n307 n345 n346 n351 n352 n353 n354 om_27 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
om_28 n370 n369 n368 n367 n360 n359 n307 n306 n305 n291 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
om_27 n354 n353 n352 n351 n346 n223 n216 n215 n165 n144 n123 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
n113 n124 n125 n126 n131 n216 n223 n333 n338 n339 n340 n341 om_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
n176 n187 n214 n215 n216 n223 n360 n367 n368 n369 n370 om_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
om_26 n341 n340 n339 n338 n333 n332 n307 n257 n256 n245 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
om_26 n341 n340 n339 n338 n333 n223 n216 n131 n126 n125 n124 n113 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 383
selected cripath : 
om_25 n328 n327 n326 n325 n322 n223 n216 n131 n126 n125 n124 n103 

cleanup fin
sharing detect fin
cleanup fin
graph opt finished
INORDER = i9 i8 i7 i6 i5 i4 i31 i30 i3 i29 i28 i27 i26 i25 i24 i23 i22 i21 i20 i2 i19 i18 i17 i16 i15 i14 i13 i12 i11 i10 i1 i0;
OUTORDER = om_9 om_8 om_7 om_6 om_5 om_4 om_31 om_30 om_3 om_29 om_28 om_27 om_26 om_25 om_24 om_23 om_22 om_21 om_20 om_2 om_19 om_18 om_17 om_16 om_15 om_14 om_13 om_12 om_11 om_10 om_1 om_0;
om_0 = true;
n103 = (!i6);
n113 = (!i7);
n123 = (!i8);
n128 = (i6 * n113);
n129 = (!i7 * n128) + (i7 * !n128);
n136 = (!i9);
n143 = (!i10);
n146 = (i8 * n136);
n147 = (!i9 * n146) + (i9 * !n146);
n153 = (!i11);
n163 = (!i12);
n168 = (i10 * n153);
n169 = (!i11 * n168) + (i11 * !n168);
n176 = (!i13);
n186 = (!i14);
n191 = (i12 * n176);
n192 = (!i13 * n191) + (i13 * !n191);
n199 = (!i15);
n212 = (!i16);
n219 = (i14 * n199);
n220 = (!i15 * n219) + (i15 * !n219);
n228 = (!i17);
n235 = (!i18);
n238 = (i16 * n228);
n239 = (!i17 * n238) + (i17 * !n238);
n245 = (!i19);
n255 = (!i20);
n260 = (i18 * n245);
n261 = (!i19 * n260) + (i19 * !n260);
n268 = (!i21);
n278 = (!i22);
n283 = (i20 * n268);
n284 = (!i21 * n283) + (i21 * !n283);
n291 = (!i23);
n304 = (!i24);
n311 = (i22 * n291);
n312 = (!i23 * n311) + (i23 * !n311);
n320 = (!i25);
n330 = (!i26);
n335 = (i24 * n320);
n336 = (!i25 * n335) + (i25 * !n335);
n343 = (!i27);
n356 = (!i28);
n363 = (i26 * n343);
n364 = (!i27 * n363) + (i27 * !n363);
n372 = (!i29);
n385 = (!i30);
n392 = (i28 * n372);
n393 = (!i29 * n392) + (i29 * !n392);
n401 = (!i31);
n66 = (i0 * i1);
n67 = (!i1 * n66) + (i1 * !n66);
n68 = (!i0);
n69 = (!i1 * n68) + (i1 * !n68);
n71 = (!i2);
n72 = (!i1);
n73 = (i0 * n72);
n74 = (!i1 * n73) + (i1 * !n73);
n79 = (!i3);
n86 = (!i4);
n89 = (i2 * n79);
n90 = (!i3 * n89) + (i3 * !n89);
n96 = (!i5);
n104 = (n86 * n96);
n106 = (i4 * n96);
n114 = (n103 * n104);
n124 = (n103 * n113);
n144 = (n123 * n136);
n154 = (n143 * n144);
n156 = (n143 * n147);
n164 = (n143 * n153);
n167 = (n147 * n164);
n170 = (!n167 * n169) + (n167 * !n169);
n179 = (n163 * n170);
n187 = (n163 * n176);
n200 = (n186 * n187);
n204 = (n186 * n192);
n213 = (n186 * n199);
n218 = (n192 * n213);
n221 = (!n218 * n220) + (n218 * !n220);
n236 = (n212 * n228);
n246 = (n235 * n236);
n248 = (n235 * n239);
n256 = (n235 * n245);
n259 = (n239 * n256);
n262 = (!n259 * n261) + (n259 * !n261);
n271 = (n255 * n262);
n279 = (n255 * n268);
n292 = (n278 * n279);
n296 = (n278 * n284);
n305 = (n278 * n291);
n310 = (n284 * n305);
n313 = (!n310 * n312) + (n310 * !n312);
n331 = (n304 * n320);
n344 = (n330 * n331);
n348 = (n330 * n336);
n357 = (n330 * n343);
n362 = (n336 * n357);
n365 = (!n362 * n364) + (n362 * !n364);
n377 = (n356 * n365);
n386 = (n356 * n372);
n402 = (n385 * n386);
n408 = (n385 * n393);
n75 = (!n71 * n74) + (n71 * !n74);
n80 = (n71 * n74);
n87 = (n71 * n79);
n88 = (n74 * n87);
n91 = (!n88 * n90) + (n88 * !n90);
n92 = (!n86 * n91) + (n86 * !n91);
n97 = (n86 * n91);
om_1 = (!n67 * n69) + (n67 * !n69);
n105 = (n104 * n91);
n107 = (!i5 * n106) + (i5 * !n106);
n115 = (n114 * n91);
n125 = (n104 * n124);
n126 = (n125 * n91);
n127 = (n107 * n124);
n130 = (!n127 * n129) + (n127 * !n129);
n157 = (!i10 * n156) + (i10 * !n156);
n165 = (n144 * n164);
n180 = (!i12 * n179) + (i12 * !n179);
n188 = (n165 * n187);
n190 = (n170 * n187);
n193 = (!n190 * n192) + (n190 * !n192);
n201 = (n165 * n200);
n203 = (n170 * n200);
n205 = (!i14 * n204) + (i14 * !n204);
n214 = (n187 * n213);
n217 = (n170 * n214);
n222 = (!n217 * n221) + (n217 * !n221);
n249 = (!i18 * n248) + (i18 * !n248);
n257 = (n236 * n256);
n272 = (!i20 * n271) + (i20 * !n271);
n280 = (n257 * n279);
n282 = (n262 * n279);
n285 = (!n282 * n284) + (n282 * !n284);
n293 = (n257 * n292);
n295 = (n262 * n292);
n297 = (!i22 * n296) + (i22 * !n296);
n306 = (n279 * n305);
n309 = (n262 * n306);
n314 = (!n309 * n313) + (n309 * !n313);
n334 = (n314 * n331);
n337 = (!n334 * n336) + (n334 * !n336);
n347 = (n314 * n344);
n349 = (!i26 * n348) + (i26 * !n348);
n358 = (n331 * n357);
n378 = (!i28 * n377) + (i28 * !n377);
n387 = (n358 * n386);
n391 = (n365 * n386);
n394 = (!n391 * n393) + (n391 * !n393);
n403 = (n358 * n402);
n407 = (n365 * n402);
n409 = (!i30 * n408) + (i30 * !n408);
n76 = (i2 * n75);
n81 = (!i2 * n80) + (i2 * !n80);
n93 = (i4 * n92);
n98 = (!i4 * n97) + (i4 * !n97);
n108 = (!n105 * n107) + (n105 * !n107);
n116 = (n103 * n107);
n131 = (!n126 * n130) + (n126 * !n130);
n155 = (n131 * n154);
n158 = (!n155 * n157) + (n155 * !n157);
n166 = (n131 * n165);
n171 = (!n166 * n170) + (n166 * !n170);
n177 = (n163 * n165);
n189 = (n131 * n188);
n194 = (!n189 * n193) + (n189 * !n193);
n202 = (n131 * n201);
n206 = (!n203 * n205) + (n203 * !n205);
n215 = (n165 * n214);
n269 = (n255 * n257);
n298 = (!n295 * n297) + (n295 * !n297);
n307 = (n257 * n306);
n323 = (n304 * n314);
n345 = (n307 * n344);
n350 = (!n347 * n349) + (n347 * !n349);
n359 = (n307 * n358);
n361 = (n314 * n358);
n366 = (!n361 * n365) + (n361 * !n365);
n373 = (n356 * n358);
n376 = (n314 * n373);
n379 = (!n376 * n378) + (n376 * !n378);
n388 = (n307 * n387);
n390 = (n314 * n387);
n395 = (!n390 * n394) + (n390 * !n394);
n404 = (n307 * n403);
n406 = (n314 * n403);
n410 = (!n407 * n409) + (n407 * !n409);
n77 = (!i2 * n76) + (i2 * !n76);
n82 = (!n79 * n81) + (n79 * !n81);
n94 = (!i4 * n93) + (i4 * !n93);
n99 = (!n96 * n98) + (n96 * !n98);
om_2 = (!n75 * n77) + (n75 * !n77);
om_4 = (!n92 * n94) + (n92 * !n94);
n100 = (i5 * n99);
n109 = (!n103 * n108) + (n103 * !n108);
n117 = (!i6 * n116) + (i6 * !n116);
n118 = (!n115 * n117) + (n115 * !n117);
n132 = (!n123 * n131) + (n123 * !n131);
n137 = (n123 * n131);
n145 = (n131 * n144);
n159 = (!n153 * n158) + (n153 * !n158);
n172 = (!n163 * n171) + (n163 * !n171);
n178 = (n131 * n177);
n181 = (!n178 * n180) + (n178 * !n180);
n195 = (!n186 * n194) + (n186 * !n194);
n207 = (!n202 * n206) + (n202 * !n206);
n216 = (n131 * n215);
n223 = (!n216 * n222) + (n216 * !n222);
n270 = (n223 * n269);
n273 = (!n270 * n272) + (n270 * !n272);
n281 = (n223 * n280);
n286 = (!n281 * n285) + (n281 * !n285);
n294 = (n223 * n293);
n299 = (!n294 * n298) + (n294 * !n298);
n308 = (n223 * n307);
n315 = (!n308 * n314) + (n308 * !n314);
n321 = (n304 * n307);
n324 = (!i24 * n323) + (i24 * !n323);
n332 = (n307 * n331);
n346 = (n223 * n345);
n351 = (!n346 * n350) + (n346 * !n350);
n360 = (n223 * n359);
n367 = (!n360 * n366) + (n360 * !n366);
n374 = (n307 * n373);
n389 = (n223 * n388);
n396 = (!n389 * n395) + (n389 * !n395);
n405 = (n223 * n404);
n411 = (!n406 * n410) + (n406 * !n410);
n83 = (i3 * n82);
n101 = (!i5 * n100) + (i5 * !n100);
n110 = (i6 * n109);
n119 = (!n113 * n118) + (n113 * !n118);
n133 = (i8 * n132);
n138 = (!i8 * n137) + (i8 * !n137);
n148 = (!n145 * n147) + (n145 * !n147);
n160 = (i11 * n159);
n173 = (i12 * n172);
n182 = (!n176 * n181) + (n176 * !n181);
n196 = (i14 * n195);
n208 = (!n199 * n207) + (n199 * !n207);
n224 = (!n212 * n223) + (n212 * !n223);
n229 = (n212 * n223);
n237 = (n223 * n236);
n247 = (n223 * n246);
n250 = (!n247 * n249) + (n247 * !n249);
n258 = (n223 * n257);
n263 = (!n258 * n262) + (n258 * !n262);
n274 = (!n268 * n273) + (n268 * !n273);
n287 = (!n278 * n286) + (n278 * !n286);
n300 = (!n291 * n299) + (n291 * !n299);
n316 = (!n304 * n315) + (n304 * !n315);
n322 = (n223 * n321);
n325 = (!n322 * n324) + (n322 * !n324);
n333 = (n223 * n332);
n338 = (!n333 * n337) + (n333 * !n337);
n352 = (!n343 * n351) + (n343 * !n351);
n368 = (!n356 * n367) + (n356 * !n367);
n375 = (n223 * n374);
n380 = (!n375 * n379) + (n375 * !n379);
n397 = (!n385 * n396) + (n385 * !n396);
n412 = (!n405 * n411) + (n405 * !n411);
n84 = (!i3 * n83) + (i3 * !n83);
om_3 = (!n82 * n84) + (n82 * !n84);
om_5 = (!n101 * n99) + (n101 * !n99);
n111 = (!i6 * n110) + (i6 * !n110);
n120 = (i7 * n119);
n134 = (!i8 * n133) + (i8 * !n133);
n139 = (!n136 * n138) + (n136 * !n138);
n149 = (!n143 * n148) + (n143 * !n148);
n161 = (!i11 * n160) + (i11 * !n160);
n174 = (!i12 * n173) + (i12 * !n173);
n183 = (i13 * n182);
n197 = (!i14 * n196) + (i14 * !n196);
n209 = (i15 * n208);
n225 = (i16 * n224);
n230 = (!i16 * n229) + (i16 * !n229);
n240 = (!n237 * n239) + (n237 * !n239);
n251 = (!n245 * n250) + (n245 * !n250);
n264 = (!n255 * n263) + (n255 * !n263);
n275 = (i21 * n274);
n288 = (i22 * n287);
n301 = (i23 * n300);
n317 = (i24 * n316);
n326 = (!n320 * n325) + (n320 * !n325);
n339 = (!n330 * n338) + (n330 * !n338);
n353 = (i27 * n352);
n369 = (i28 * n368);
n381 = (!n372 * n380) + (n372 * !n380);
n398 = (i30 * n397);
n413 = (!n401 * n412) + (n401 * !n412);
om_11 = (!n159 * n161) + (n159 * !n161);
om_12 = (!n172 * n174) + (n172 * !n174);
om_14 = (!n195 * n197) + (n195 * !n197);
om_6 = (!n109 * n111) + (n109 * !n111);
om_8 = (!n132 * n134) + (n132 * !n134);
n121 = (!i7 * n120) + (i7 * !n120);
n140 = (i9 * n139);
n150 = (i10 * n149);
n184 = (!i13 * n183) + (i13 * !n183);
n210 = (!i15 * n209) + (i15 * !n209);
n226 = (!i16 * n225) + (i16 * !n225);
n231 = (!n228 * n230) + (n228 * !n230);
n241 = (!n235 * n240) + (n235 * !n240);
n252 = (i19 * n251);
n265 = (i20 * n264);
n276 = (!i21 * n275) + (i21 * !n275);
n289 = (!i22 * n288) + (i22 * !n288);
n302 = (!i23 * n301) + (i23 * !n301);
n318 = (!i24 * n317) + (i24 * !n317);
n327 = (i25 * n326);
n340 = (i26 * n339);
n354 = (!i27 * n353) + (i27 * !n353);
n370 = (!i28 * n369) + (i28 * !n369);
n382 = (i29 * n381);
n399 = (!i30 * n398) + (i30 * !n398);
n414 = (i31 * n413);
om_13 = (!n182 * n184) + (n182 * !n184);
om_15 = (!n208 * n210) + (n208 * !n210);
om_16 = (!n224 * n226) + (n224 * !n226);
om_21 = (!n274 * n276) + (n274 * !n276);
om_22 = (!n287 * n289) + (n287 * !n289);
om_23 = (!n300 * n302) + (n300 * !n302);
om_24 = (!n316 * n318) + (n316 * !n318);
om_27 = (!n352 * n354) + (n352 * !n354);
om_28 = (!n368 * n370) + (n368 * !n370);
om_30 = (!n397 * n399) + (n397 * !n399);
om_7 = (!n119 * n121) + (n119 * !n121);
n141 = (!i9 * n140) + (i9 * !n140);
n151 = (!i10 * n150) + (i10 * !n150);
n232 = (i17 * n231);
n242 = (i18 * n241);
n253 = (!i19 * n252) + (i19 * !n252);
n266 = (!i20 * n265) + (i20 * !n265);
n328 = (!i25 * n327) + (i25 * !n327);
n341 = (!i26 * n340) + (i26 * !n340);
n383 = (!i29 * n382) + (i29 * !n382);
n415 = (!i31 * n414) + (i31 * !n414);
om_10 = (!n149 * n151) + (n149 * !n151);
om_19 = (!n251 * n253) + (n251 * !n253);
om_20 = (!n264 * n266) + (n264 * !n266);
om_25 = (!n326 * n328) + (n326 * !n328);
om_26 = (!n339 * n341) + (n339 * !n341);
om_29 = (!n381 * n383) + (n381 * !n383);
om_31 = (!n413 * n415) + (n413 * !n415);
om_9 = (!n139 * n141) + (n139 * !n141);
n233 = (!i17 * n232) + (i17 * !n232);
n243 = (!i18 * n242) + (i18 * !n242);
om_17 = (!n231 * n233) + (n231 * !n233);
om_18 = (!n241 * n243) + (n241 * !n243);


new graph depth
---graph depth print---
var : om_0 depth : 0
var : om_1 depth : 1
var : om_2 depth : 2
var : om_3 depth : 3
var : om_4 depth : 3
var : om_5 depth : 4
var : om_6 depth : 4
var : om_7 depth : 4
var : om_8 depth : 4
var : om_9 depth : 5
var : om_10 depth : 5
var : om_11 depth : 5
var : om_12 depth : 5
var : om_13 depth : 5
var : om_14 depth : 5
var : om_15 depth : 5
var : om_16 depth : 5
var : om_17 depth : 6
var : om_18 depth : 6
var : om_19 depth : 6
var : om_20 depth : 6
var : om_21 depth : 6
var : om_22 depth : 6
var : om_23 depth : 6
var : om_24 depth : 6
var : om_25 depth : 6
var : om_26 depth : 6
var : om_27 depth : 6
var : om_28 depth : 6
var : om_29 depth : 6
var : om_30 depth : 6
var : om_31 depth : 6
---------------------
