cir to graph finished
old graph depth
---graph depth print---
var : m_0 depth : 0
var : m_1 depth : 0
var : m_2 depth : 0
var : m_3 depth : 0
var : m_4 depth : 0
var : m_5 depth : 0
var : m_6 depth : 0
var : m_7 depth : 0
var : m_8 depth : 0
var : m_9 depth : 0
var : m_10 depth : 0
var : m_11 depth : 0
var : m_12 depth : 0
var : m_13 depth : 0
var : m_14 depth : 0
var : m_15 depth : 0
var : m_16 depth : 0
var : m_17 depth : 0
var : m_18 depth : 0
var : m_19 depth : 0
var : m_20 depth : 0
var : m_21 depth : 0
var : m_22 depth : 0
var : m_23 depth : 0
var : m_24 depth : 0
var : m_25 depth : 0
var : m_26 depth : 0
var : m_27 depth : 0
var : m_28 depth : 16
var : m_29 depth : 18
var : m_30 depth : 13
var : m_31 depth : 11
---------------------
============================================= graph opt start ===================================================
initial graph size : 652
initial mult size : 391
whole case num : 394
reduced case num : 62
max case size : 38
min case size : 4
average case size : 13
median case size : 12
(and (not false) norm2) --> norm2
(and (and n325 norm2) n322) --> (and norm2 (and n322 n325))
(not (and (and norm3 norm7) n379)) --> (not (and (and norm7 n379) norm3))
(and n127 (not (and norm3 n63))) --> (xor (and norm3 (and n63 n127)) n127)
(and (and (and n392 norm3) norm7) i_9) --> (and (and norm3 norm7) (and i_9 n392))
(and (and (and n393 norm3) norm7) i_2) --> (and (and norm7 (and i_2 n393)) norm3)
(and (and (and n325 norm3) n322) i_25) --> (and (and norm3 (and i_25 n322)) n325)
(xor (and (and n554 n390) i_9) n618) --> (xor (and (and n390 i_9) n554) n618)
(and (xor (and n107 i_13) n118) n117) --> (xor (and (and n117 i_13) n107) (and n117 n118))
(and (and n379 (not (xor n371 n373))) n376) --> (and (xor (not n371) n373) (and n376 n379))
(and (and n441 (xor norm3 (not n218))) n225) --> (and (xor (not norm3) n218) (and n225 n441))
(xor (and n107 (not (and n78 n63))) n125) --> (xor (xor (and (and n107 n63) n78) n125) n107)
(and n261 (not (xor n215 (and n177 i_23)))) --> (xor (and (and i_23 n261) n177) (and (not n215) n261))
(and n199 (not (xor (and n195 norm4) norm4))) --> (xor (and norm4 (and (not n195) n199)) n199)
(xor (xor n610 n609) (and (and n547 n322) i_24)) --> (xor (xor (and (and i_24 n322) n547) n610) n609)
(and (xor norm2 (and (not n313) (not n273))) norm2) --> norm2
(and (not (xor i_15 (not i_7))) (and norm5 norm11)) --> (and (and norm11 (xor i_15 i_7)) norm5)
(and n155 (and (and n135 (not n132)) (not n128))) --> (and (not (or n128 n132)) (and n155 n135))
(and (xor (xor n286 (and n269 n213)) n249) n193) --> (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
(and (xor n333 (and (and n329 norm4) n317)) n151) --> (and (xor (and norm4 (and n329 n317)) n333) n151)
(and (and (and n379 (not (xor n371 n373))) n376) i_10) --> (and (and (xor (not n373) n371) (and i_10 n376)) n379)
(and (and (and n441 (xor norm4 (not n218))) n225) i_9) --> (and (and (xor (not norm4) n218) (and i_9 n225)) n441)
(and (not (xor (xor n286 (and n269 n213)) n249)) n184) --> (xor (and (xor (not n286) n249) n184) (and (and n184 n213) n269))
(xor (xor (xor n690 n689) (and (and n627 n322) i_24)) n686) --> (xor (xor (xor (and (and i_24 n322) n627) n686) n689) n690)
(and (and (not (or n217 n168)) (and (not n120) n226)) i_32) --> (and (and (and i_32 n226) (not n168)) (not (or n217 n120)))
(not (and (and (not (and (and n135 n133) n129)) norm6) n47)) --> (or (not (and norm6 n47)) (and (and n135 n129) n133))
(and (not (and (and n135 (not n132)) (not n128))) (not n47)) --> (xor (or (or (not n135) n47) (or n132 n128)) n47)
(and (xor (xor n286 (and n269 n213)) (and n248 n213)) n281) --> (xor (and (xor n269 n248) (and n281 n213)) (and n281 n286))
(and n251 (not (xor (and (not norm5) n143) (and norm5 i_25)))) --> (xor (and (and (xor i_25 n143) n251) norm5) (and (not n143) n251))
(and (xor (xor n359 (xor n272 (and n253 n215))) n186) n157) --> (xor (and (xor (xor n186 n272) n359) n157) (and (and n157 n215) n253))
(and (not (xor n245 (not (and (and n240 n230) n226)))) n236) --> (xor (and (and (and n230 n236) n240) n226) (and n236 n245))
(and (and (not (and norm4 n333)) n150) (not (and (not norm4) n336))) --> (and (xor (or (xor (not n336) n333) norm4) n333) n150)
(and (and (and n251 (xor n247 (not n237))) n218) (and n214 n207)) --> (and (and (and (and n251 n218) n207) (xor (not n247) n237)) n214)
(and (and n251 (xor n247 (not (and (and n235 n232) n222)))) n218) --> (and (and (xor (not (and (and n235 n222) n232)) n247) n218) n251)
(and n80 (and (not (xor (xor (xor n48 n45) i_2) i_10)) n53)) --> (and (xor (xor (xor (not i_2) i_10) n45) n48) (and n53 n80))
(and (not (xor (xor n199 (and n188 n152)) (and n175 n152))) n138) --> (xor (and (xor n188 n175) (and n138 n152)) (and (not n199) n138))
(and (and (and (xor (xor norm5 n168) n120) n226) (or n168 n120)) i_26) --> (and (and (xor (xor norm5 n168) n120) (and i_26 n226)) (or n168 n120))
(and norm1 (xor (and (not n369) (and n365 n325)) (not (and n365 n325)))) --> norm1
(and (not (xor (and n203 (not (xor n200 n197))) (xor n200 n197))) n188) --> (and (xor (not n200) n197) (and (not n203) n188))
(and n388 (and n359 (xor (xor n271 (and n262 n215)) (and n253 n215)))) --> (and (xor (and (xor n253 n262) n215) n271) (and n359 n388))
(xor (and n199 (not (xor (and n195 norm5) norm5))) (xor (and n195 norm5) norm5)) --> (xor (and norm5 (not (or n195 n199))) n199)
(xor (and (xor n359 (xor n271 (and n262 n215))) n186) (and (and n186 n215) n253)) --> (xor (and (and (xor n253 n262) n186) n215) (and (xor n359 n271) n186))
(and norm1 (xor (and (xor (and n384 n369) n387) (and n384 n369)) (not (and n384 n369)))) --> norm1
(and (not (and n149 (not (and (not norm6) n126)))) (not (and n142 (and (not norm6) n126)))) --> (xor (or (not (and (xor n149 n142) n126)) norm6) n149)
(xor n212 (xor (and (not (xor (and n203 n202) n201)) n188) (xor (and n203 n202) n201))) --> (xor (xor (and (and (not n188) n203) n202) (or n188 n201)) n212)
(xor (and (not (xor (xor (and i_16 i_8) i_7) i_15)) (and norm7 norm15)) (and norm7 norm15)) --> (and (and norm7 (xor i_15 i_7)) norm15)
(and (and norm2 (not (xor (and (not n215) (not n167)) (not (and (not n216) (not n119)))))) n225) --> (and (xor (or n167 n215) (or n216 n119)) (and norm2 n225))
(not (and (and n135 (not (and (and n63 n130) norm6))) (not (and n127 (not (and norm6 n63)))))) --> (or (xor (and (and (xor n130 n127) n63) norm6) n127) (not n135))
(and (and n450 (not (xor norm4 (not norm10)))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) --> (and (xor norm10 norm4) n450)
(and (and n135 (not (and (and n63 n130) (not n77)))) (not (and n127 (not (and (not n77) n63))))) --> (and (xor (or (not (and (xor n130 n127) n63)) n77) n127) n135)
(and (and (xor (xor n313 n273) norm4) (xor (and (xor n313 n273) norm4) (and (not n313) (not n273)))) n322) --> (and (and norm4 n322) (not (or n313 n273)))
(and (and (and n387 (xor norm4 (not norm10))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) i_26) --> (and (not (or norm4 norm10)) (and i_26 n387))
(and (and (xor n216 (not n119)) (not (xor (and (not n215) (not n167)) (not (and norm11 (not n119)))))) n225) --> (and (and (xor norm11 n119) n225) (xor (or n167 n215) n119))
(and (and (xor (not n217) (xor n168 n120)) (xor (and (not n217) (xor n168 n120)) (and (not n168) norm11))) n226) --> (and (not (or n217 n168)) (and norm11 n226))
(and (and (xor (xor n313 n273) norm4) (not (xor (and (xor n313 n273) norm4) (and (not n313) (not n273))))) n322) --> (and (and (xor (xor norm4 n313) n273) n322) (or n313 n273))
(and (and (and n373 (not (xor norm5 (not norm12)))) (xor (and (not (xor norm5 (not norm12))) norm12) (not norm12))) i_24) --> (and (and (xor norm5 norm12) i_24) n373)
(xor (and n305 (xor (and (xor n264 n257) (not n254)) (not n254))) (and n305 (not (xor (and (xor n264 n257) (not n254)) (not n254))))) --> n305
(and (xor (and (xor (xor n312 n288) (xor n167 n143)) norm6) (and (xor n312 n288) (xor n167 n143))) (and (xor (xor n312 n288) (xor n167 n143)) norm6)) --> (and (xor (xor (xor n288 n143) n312) n167) norm6)
(xor (and (xor (and (xor n313 n273) (xor n216 n192)) (and (not n313) (not n273))) (and (xor n313 n273) (xor n216 n192))) (not (and (xor n313 n273) (xor n216 n192)))) --> true
(and (and (xor norm3 (xor norm8 norm13)) (xor (and norm3 (xor norm8 norm13)) norm21)) (xor (and (xor (and norm3 (xor norm8 norm13)) norm21) (and norm3 (xor norm8 norm13))) (not (and norm3 (xor norm8 norm13))))) --> (and norm21 norm3)
(and (and (xor n364 (not n324)) (xor norm5 (not (and (not n364) (not n324))))) (xor (and (not (xor norm5 (not (and (not n364) (not n324))))) (and (not n364) (not n324))) (not (and (not n364) (not n324))))) --> (and (not norm5) (and n324 n364))
(and (and (xor (xor norm4 norm9) norm14) (xor (and (xor norm4 norm9) norm14) (and norm4 norm9))) (xor (and (xor (and (xor norm4 norm9) norm14) (and norm4 norm9)) (and (xor norm4 norm9) norm14)) (not (and (xor norm4 norm9) norm14)))) --> (and (and norm14 norm4) norm9)


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 652
selected cripath : 
m_29 n737 n736 n735 n730 n729 n728 n717 n709 n708 n705 n696 n695 n692 n518 n517 n516 n501 n500 n496 n495 n263 n226 n225 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n734
tmpvar#1  -->  CVar_n709
tmpvar#2  -->  CVar_n730
---------------------

old bexp : (not (and n379 (and norm7 norm3)))
new bexp : (not (and (and norm7 n379) norm3))
tgt bexp     : (not (and n734 (and n709 n730)))
sub old bexp : (not (and n734 (and n709 n730)))
sub new bexp : (not (and (and n709 n734) n730))
before depth : 17
after depth : 16
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n734
tmpvar#1  -->  CVar_n709
tmpvar#2  -->  CVar_n730
---------------------

old bexp : (and n322 (and n325 norm2))
new bexp : (and norm2 (and n322 n325))
tgt bexp     : (and n734 (and n709 n730))
sub old bexp : (and n734 (and n709 n730))
sub new bexp : (and n730 (and n734 n709))
before depth : 17
after depth : 16
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n709
tmpvar#1  -->  CVar_n724
tmpvar#2  -->  CVar_n729
---------------------

old bexp : (and n322 (and n325 norm2))
new bexp : (and norm2 (and n322 n325))
tgt bexp     : (and n709 (and n724 n729))
sub old bexp : (and n709 (and n724 n729))
sub new bexp : (and n729 (and n709 n724))
before depth : 16
after depth : 15
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n518
tmpvar#0  -->  CVar_n691
tmpvar#2  -->  CVar_n694
---------------------

old bexp : (not (and (and norm3 norm7) n379))
new bexp : (not (and (and norm7 n379) norm3))
tgt bexp     : (not (and (and n518 n691) n694))
sub old bexp : (not (and (and n518 n691) n694))
sub new bexp : (not (and (and n691 n694) n518))
before depth : 10
after depth : 9
graph replaced


unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#1  -->  CVar_n518
tmpvar#0  -->  CVar_n691
tmpvar#2  -->  CVar_n694
---------------------

old bexp : (and (and norm2 n325) n322)
new bexp : (and norm2 (and n322 n325))
tgt bexp     : (and (and n518 n691) n694)
sub old bexp : (and (and n518 n691) n694)
sub new bexp : (and n518 (and n694 n691))
before depth : 10
after depth : 9
graph replaced


graph size : 653
graph mult size : 392
optimal graph replaced, cost : 1925896
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
n145 n208 n559 n560 n561 n562 n566 n567 n583 n584 n585 n700 n701 n702 n703 n704 n705 n708 n709 n717 n728 n729 n730 tmp14 n737 m_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
m_29 n733 m_28 n731 n730 n729 n728 n717 n716 n715 n714 n711 n705 n704 n703 n697 n692 n518 n517 n493 n472 n460 n459 n456 n455 n231 n136 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
m_29 n733 m_28 n731 n730 n729 n728 n717 n716 n715 n714 n711 n705 n704 n703 n697 n692 n518 n517 n493 n492 n491 n485 n484 n483 n222 n157 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
n137 n138 n463 n464 n465 n471 n472 n493 n517 n518 n692 n697 n703 n704 n705 n708 n709 n717 n728 n729 n730 n731 m_28 n733 m_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
n139 n141 n530 n531 n532 n533 n552 n584 n585 n700 n701 n702 n703 n704 n705 n708 n709 n717 n728 n729 n730 tmp14 n737 m_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
m_29 n733 m_28 n731 n730 n729 n728 n717 n709 n708 n705 n704 n703 n697 n692 n518 n517 n493 n492 n491 n490 n489 n488 n106 n105 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
m_29 n733 m_28 n731 n730 n729 n728 n717 n709 n708 n705 n704 n703 n702 n701 n700 n585 n584 n583 n582 n581 n577 n576 n257 n250 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
m_29 n733 m_28 n731 n730 n729 n728 n717 n709 n708 n705 n704 n703 n702 n701 n700 n585 n584 n583 n582 n574 n570 n569 n222 n157 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 653
selected cripath : 
m_29 n737 tmp14 tmp15 n734 n718 n717 n709 n708 n705 n704 n703 n702 n701 n700 n585 n584 n552 n533 n525 n524 n523 n115 n114 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n709
tmpvar#1  -->  CVar_n690
tmpvar#2  -->  CVar_n717
---------------------

old bexp : (and n127 (not (and n63 norm3)))
new bexp : (xor (and norm3 (and n63 n127)) n127)
tgt bexp     : (and n709 (not (and n690 n717)))
sub old bexp : (and n709 (not (and n690 n717)))
sub new bexp : (xor (and n717 (and n690 n709)) n709)
before depth : 15
after depth : 14
graph replaced


graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 654
selected cripath : 
m_29 n737 tmp14 n730 n729 n728 n717 n709 n708 n705 n704 n703 n702 n701 n700 n585 n584 n552 n533 n525 n521 n520 n106 n104 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n718
tmpvar#2  -->  CVar_n723
tmpvar#1  -->  CVar_n729
tmpvar#3  -->  CVar_tmp15
---------------------

old bexp : (and (not (and n149 (not (and (not norm6) n126)))) (not (and (and (not norm6) n126) n142)))
new bexp : (xor (or (not (and (xor n149 n142) n126)) norm6) n149)
tgt bexp     : (and (not (and n718 (not (and (not n723) n729)))) (not (and (and (not n723) n729) tmp15)))
sub old bexp : (and (not (and n718 (not (and (not n723) n729)))) (not (and (and (not n723) n729) tmp15)))
sub new bexp : (xor (or (not (and (xor n718 tmp15) n729)) n723) n718)
before depth : 17
after depth : 16
graph replaced


graph size : 655
graph mult size : 393
optimal graph replaced, cost : 1609728
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
m_29 tmp4544 tmp4545 tmp4546 n729 n728 n717 n716 n715 n714 n711 n705 n704 n703 n702 n701 n700 n585 n584 n583 n567 n566 n562 n561 n560 n559 n208 n145 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
m_29 tmp4544 tmp4545 tmp4546 n729 n728 n717 n709 n708 n705 n704 n703 n702 n701 n700 n585 n584 n583 n582 n574 n570 n569 n222 n157 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
n217 n218 n227 n494 n496 n500 n501 n516 n517 n518 n692 n697 n703 n704 n705 n708 n709 n717 n728 n729 n730 n731 m_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
m_29 tmp4544 tmp4545 tmp4546 tmp4547 tmp15 tmp4152 tmp4153 n709 n708 n705 n704 n703 n697 n692 n518 n517 n516 n515 n514 n510 n509 n294 n220 n219 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
n149 n150 n379 n380 n506 n507 n515 n516 n517 n518 n692 n697 n703 n704 n705 n711 n714 n715 n716 n717 n718 tmp4547 tmp4546 tmp4545 tmp4544 m_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
m_28 n731 n730 n729 n728 n717 n716 n715 n714 n711 n705 n704 n703 n702 n701 n700 n585 n584 n583 n582 n581 n577 n576 n257 n252 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
m_28 n731 n730 n729 n728 n717 n716 n715 n714 n711 n705 n704 n703 n702 n701 n700 n585 n584 n583 n567 n566 n565 n563 n251 n224 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
n145 n208 n559 n560 n561 n562 n566 n567 n583 n584 n585 n700 n701 n702 n703 n704 n705 n708 n709 n717 n728 n729 tmp4546 tmp4545 tmp4544 m_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
n140 n141 n481 n482 n485 n491 n492 n493 n517 n518 n692 n697 n703 n704 n705 n711 n714 n715 n716 n717 n728 n729 tmp4546 tmp4545 tmp4544 m_29 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
n132 n133 n559 n560 n561 n562 n566 n567 n583 n584 n585 n700 n701 n702 n703 n704 n705 n708 n709 n717 n728 n729 n730 n731 m_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
n224 n226 n263 n495 n496 n500 n501 n516 n517 n518 n692 n697 n703 n704 n705 n708 n709 n717 n728 n729 n730 n731 m_28 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
m_28 n731 n730 n729 n728 n717 n716 n715 n714 n711 n705 n704 n703 n697 n692 n518 n517 n493 n472 n471 n470 n469 n468 n111 n98 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 655
selected cripath : 
m_29 tmp4544 tmp4545 tmp4546 n729 n728 n717 n716 n715 n714 n711 n705 n704 n703 n697 n692 n518 n517 n516 n501 n500 n496 n495 n263 n226 n224 

dangling node deleted : nodeVal : AND index : 1239
dangling node deleted : nodeVal : AND index : 1319
dangling node deleted : nodeVal : AND index : 1321
dangling node deleted : nodeVal : AND index : 1325
dangling node deleted : nodeVal : AND index : 1367
dangling node deleted : nodeVal : NOT index : 1241
dangling node deleted : nodeVal : NOT index : 1323
dangling node deleted : nodeVal : n695 index : 1
dangling node deleted : nodeVal : n733 index : 1
dangling node deleted : nodeVal : n735 index : 1
dangling node deleted : nodeVal : n736 index : 1
dangling node deleted : nodeVal : n737 index : 1
dangling node deleted : nodeVal : AND index : 1373
dangling node deleted : nodeVal : AND index : 1376
dangling node deleted : nodeVal : AND index : 1384
dangling node deleted : nodeVal : NOT index : 1315
dangling node deleted : nodeVal : NOT index : 1370
dangling node deleted : nodeVal : tmp14 index : 1
dangling node deleted : nodeVal : tmp257 index : 1
dangling node deleted : nodeVal : tmp64 index : 1
dangling node deleted : nodeVal : tmp67 index : 1
dangling node deleted : nodeVal : AND index : 1369
dangling node deleted : nodeVal : AND index : 1372
dangling node deleted : nodeVal : AND index : 1375
dangling node deleted : nodeVal : AND index : 1383
dangling node deleted : nodeVal : n734 index : 1
dangling node deleted : nodeVal : NOT index : 1317
cleanup fin
sharing detect fin
cleanup fin
graph opt finished
INORDER = i_9 i_8 i_7 i_6 i_5 i_4 i_33 i_32 i_31 i_30 i_3 i_29 i_28 i_27 i_26 i_25 i_24 i_23 i_22 i_21 i_20 i_2 i_19 i_18 i_17 i_16 i_15 i_14 i_13 i_12 i_11 i_10;
OUTORDER = m_9 m_8 m_7 m_6 m_5 m_4 m_31 m_30 m_3 m_29 m_28 m_27 m_26 m_25 m_24 m_23 m_22 m_21 m_20 m_2 m_19 m_18 m_17 m_16 m_15 m_14 m_13 m_12 m_11 m_10 m_1 m_0;
m_0 = false;
m_1 = false;
m_10 = false;
m_11 = false;
m_12 = false;
m_13 = false;
m_14 = false;
m_15 = false;
m_16 = false;
m_17 = false;
m_18 = false;
m_19 = false;
m_2 = false;
m_20 = false;
m_21 = false;
m_22 = false;
m_23 = false;
m_24 = false;
m_25 = false;
m_26 = false;
m_27 = false;
m_3 = false;
m_4 = false;
m_5 = false;
m_6 = false;
m_7 = false;
m_8 = false;
m_9 = false;
n101 = (i_24 * i_25);
n102 = (i_25 * i_26);
n104 = (i_27 * i_28);
n105 = (i_26 * i_27);
n114 = (i_32 * i_33);
n130 = (i_12 * i_13);
n132 = (i_19 * i_20);
n136 = (i_14 * i_15);
n137 = (i_15 * i_16);
n139 = (i_16 * i_17);
n140 = (i_17 * i_18);
n145 = (i_21 * i_22);
n146 = (i_20 * i_21);
n149 = (i_18 * i_19);
n157 = (i_13 * i_14);
n167 = (i_23 * i_24);
n181 = (i_22 * i_23);
n182 = (i_21 * n181);
n217 = (i_10 * i_11);
n218 = (i_9 * n217);
n219 = (i_11 * i_12);
n224 = (i_8 * i_9);
n225 = (i_10 * i_9);
n250 = (i_7 * i_8);
n252 = (i_6 * i_7);
n253 = (i_5 * i_6);
n258 = (i_4 * i_5);
n267 = (i_3 * i_4);
n269 = (i_2 * i_3);
n345 = (!i_22);
n346 = (!i_28);
n351 = (!i_15);
n352 = (!i_21);
n534 = (!i_2);
n535 = (!i_5);
n586 = (!i_20);
n588 = (!i_23);
n589 = (!i_24);
n592 = (!i_16);
n593 = (!i_17);
n595 = (!i_18);
n596 = (!i_19);
n600 = (!i_30);
n601 = (!i_31);
n603 = (!i_32);
n604 = (!i_33);
n607 = (!i_25);
n608 = (!i_26);
n610 = (!i_27);
n611 = (!i_29);
n616 = (!i_3);
n617 = (!i_4);
n619 = (!i_6);
n620 = (!i_7);
n625 = (!i_12);
n626 = (!i_13);
n628 = (!i_14);
n631 = (!i_8);
n632 = (!i_9);
n634 = (!i_10);
n635 = (!i_11);
n93 = (i_30 * i_31);
n94 = (i_31 * i_32);
n96 = (i_29 * i_30);
n98 = (i_28 * i_29);
n103 = (n101 * n102);
n106 = (n104 * n105);
n111 = (n96 * n98);
n115 = (n114 * n94);
n116 = (n115 * n93);
n117 = (n116 * n96);
n119 = (n104 * n98);
n120 = (n102 * n105);
n125 = (n93 * n96);
n131 = (!n130);
n133 = (!n132);
n138 = (n136 * n137);
n141 = (n139 * n140);
n147 = (n145 * n146);
n148 = (n132 * n146);
n150 = (n140 * n149);
n156 = (!n146);
n158 = (!n157);
n161 = (n137 * n139);
n166 = (!n139);
n168 = (!n167);
n171 = (n132 * n149);
n183 = (n167 * n182);
n185 = (n101 * n167);
n186 = (n181 * n185);
n190 = (!n102);
n191 = (!n149);
n196 = (!n104);
n199 = (n103 * n167);
n200 = (n181 * n199);
n207 = (!n98);
n208 = (!n145);
n220 = (n130 * n219);
n221 = (n218 * n220);
n222 = (n130 * n157);
n226 = (n224 * n225);
n227 = (n218 * n219);
n231 = (n136 * n157);
n234 = (n217 * n219);
n244 = (!n225);
n251 = (n224 * n250);
n254 = (n252 * n253);
n257 = (n250 * n252);
n259 = (n253 * n258);
n268 = (n259 * n267);
n270 = (n268 * n269);
n271 = (n254 * n258);
n281 = (n258 * n267);
n294 = (n217 * n220);
n347 = (n345 * n346);
n353 = (n351 * n352);
n359 = (n182 * n185);
n370 = (n125 * n98);
n372 = (n105 * n119);
n379 = (n139 * n150);
n450 = (n101 * n120);
n452 = (n269 * n281);
n455 = (n130 * n231);
n457 = (n140 * n171);
n461 = (n253 * n257);
n463 = (n138 * n157);
n466 = (n226 * n250);
n468 = (n104 * n111);
n473 = (n132 * n147);
n475 = (n148 * n149);
n477 = (n251 * n252);
n481 = (n137 * n141);
n483 = (n219 * n222);
n486 = (n136 * n161);
n488 = (n102 * n106);
n536 = (n534 * n535);
n548 = (!n182);
n553 = (!n101);
n554 = (!n181);
n578 = (!n218);
n587 = (n352 * n586);
n590 = (n588 * n589);
n594 = (n592 * n593);
n597 = (n595 * n596);
n602 = (n600 * n601);
n605 = (n603 * n604);
n609 = (n607 * n608);
n612 = (n610 * n611);
n618 = (n616 * n617);
n621 = (n619 * n620);
n627 = (n625 * n626);
n629 = (n351 * n628);
n633 = (n631 * n632);
n636 = (n634 * n635);
n642 = (!n140);
n643 = (!n258);
n645 = (!n93);
n646 = (!n94);
n650 = (!n136);
n651 = (!n137);
n655 = (!n105);
n656 = (!n114);
n659 = (!n96);
n664 = (!n224);
n665 = (!n250);
n670 = (!n217);
n671 = (!n219);
n673 = (!n267);
n674 = (!n269);
n677 = (!n252);
n678 = (!n253);
n95 = (n93 * n94);
n97 = (n95 * n96);
n99 = (n97 * n98);
n100 = (!n99);
n107 = (n103 * n106);
n112 = (n106 * n111);
n118 = (!n117);
n121 = (n119 * n120);
n126 = (n119 * n125);
n134 = (n131 * n133);
n142 = (n138 * n141);
n151 = (n148 * n150);
n152 = (n147 * n151);
n159 = (n156 * n158);
n162 = (n150 * n161);
n169 = (n166 * n168);
n172 = (n147 * n171);
n174 = (i_23 * n147);
n175 = (n171 * n174);
n184 = (n147 * n183);
n187 = (n184 * n186);
n192 = (n190 * n191);
n197 = (n156 * n196);
n203 = (n111 * n121);
n209 = (n207 * n208);
n211 = (n120 * n185);
n223 = (n221 * n222);
n228 = (n226 * n227);
n232 = (n220 * n231);
n233 = (n138 * n232);
n235 = (n222 * n234);
n239 = (n161 * n231);
n240 = (n141 * n239);
n245 = (n166 * n244);
n255 = (n251 * n254);
n256 = (n226 * n255);
n260 = (n257 * n259);
n263 = (i_11 * n226);
n272 = (n270 * n271);
n277 = (n257 * n263);
n280 = (n251 * n260);
n282 = (n254 * n281);
n289 = (n226 * n257);
n295 = (n228 * n294);
n312 = (n257 * n282);
n313 = (n270 * n312);
n332 = (n107 * n119);
n334 = (n138 * n222);
n335 = (n161 * n334);
n348 = (!n347);
n354 = (!n353);
n355 = (n141 * n171);
n360 = (n103 * n359);
n362 = (n126 * n95);
n371 = (!n116);
n373 = (!n372);
n380 = (!n379);
n405 = (!n359);
n418 = (!n200);
n429 = (!n270);
n438 = (!n221);
n451 = (!n450);
n453 = (!n452);
n456 = (!n455);
n458 = (!n457);
n462 = (!n461);
n464 = (!n463);
n467 = (!n466);
n469 = (!n468);
n474 = (!n473);
n476 = (!n475);
n478 = (!n477);
n482 = (!n481);
n484 = (!n483);
n487 = (!n486);
n489 = (!n488);
n494 = (!n227);
n497 = (!n268);
n498 = (!n271);
n503 = (!n199);
n505 = (!n370);
n508 = (!n97);
n509 = (!n294);
n511 = (!n183);
n512 = (!n186);
n519 = (!n103);
n520 = (!n106);
n522 = (!n111);
n523 = (!n115);
n526 = (!n161);
n527 = (!n234);
n529 = (!n95);
n530 = (!n141);
n537 = (!n536);
n540 = (!n150);
n541 = (!n171);
n544 = (!n119);
n545 = (!n120);
n547 = (!n125);
n549 = (n547 * n548);
n555 = (n553 * n554);
n559 = (n133 * n208);
n563 = (!n251);
n564 = (!n254);
n568 = (!n220);
n569 = (!n222);
n571 = (!n138);
n572 = (!n231);
n575 = (!n226);
n576 = (!n257);
n579 = (!n259);
n580 = (n578 * n579);
n591 = (n587 * n590);
n598 = (n594 * n597);
n606 = (n602 * n605);
n613 = (n609 * n612);
n622 = (n618 * n621);
n623 = (n347 * n536);
n630 = (n627 * n629);
n637 = (n633 * n636);
n644 = (n642 * n643);
n647 = (n645 * n646);
n649 = (n131 * n158);
n652 = (n650 * n651);
n657 = (n168 * n656);
n658 = (n655 * n657);
n660 = (n207 * n659);
n666 = (n664 * n665);
n672 = (n670 * n671);
n675 = (n673 * n674);
n679 = (n677 * n678);
n108 = (!n107);
n109 = (n100 * n108);
n122 = (!n121);
n123 = (n118 * n122);
n135 = (!n134);
n143 = (n135 * n142);
n153 = (!n152);
n160 = (!n159);
n163 = (n160 * n162);
n170 = (!n169);
n173 = (n170 * n172);
n176 = (n151 * n175);
n188 = (n132 * n174);
n189 = (n187 * n188);
n193 = (!n192);
n198 = (!n197);
n201 = (n198 * n200);
n204 = (!n203);
n210 = (!n209);
n212 = (n210 * n211);
n229 = (n223 * n228);
n236 = (n233 * n235);
n241 = (!n240);
n246 = (!n245);
n247 = (n232 * n246);
n261 = (n256 * n260);
n264 = (n250 * n263);
n265 = (n227 * n264);
n273 = (!n272);
n278 = (n255 * n277);
n283 = (n280 * n282);
n290 = (n265 * n289);
n296 = (n264 * n295);
n314 = (!n313);
n330 = (!n312);
n333 = (!n332);
n336 = (!n335);
n339 = (!n233);
n341 = (!n175);
n349 = (n211 * n348);
n356 = (n354 * n355);
n361 = (!n360);
n363 = (!n362);
n368 = (n183 * n188);
n374 = (n371 * n373);
n378 = (!n235);
n381 = (n378 * n380);
n387 = (!n256);
n388 = (!n277);
n390 = (!n223);
n391 = (!n280);
n394 = (!n187);
n395 = (!n295);
n401 = (!n211);
n402 = (!n334);
n404 = (!n355);
n406 = (n404 * n405);
n408 = (!n142);
n409 = (!n151);
n411 = (!n162);
n412 = (!n172);
n419 = (!n184);
n424 = (!n255);
n425 = (!n260);
n428 = (!n228);
n430 = (n428 * n429);
n432 = (!n239);
n434 = (!n112);
n435 = (!n126);
n439 = (!n282);
n440 = (n438 * n439);
n441 = (!n232);
n442 = (!n289);
n454 = (n451 * n453);
n459 = (n456 * n458);
n465 = (n462 * n464);
n470 = (n467 * n469);
n479 = (n476 * n478);
n480 = (n474 * n479);
n485 = (n482 * n484);
n490 = (n487 * n489);
n495 = (!n263);
n496 = (n494 * n495);
n499 = (n497 * n498);
n502 = (!n174);
n504 = (n502 * n503);
n506 = (n380 * n505);
n510 = (n508 * n509);
n513 = (n511 * n512);
n521 = (n519 * n520);
n524 = (n522 * n523);
n528 = (n526 * n527);
n531 = (n529 * n530);
n538 = (n267 * n537);
n542 = (n540 * n541);
n546 = (n544 * n545);
n550 = (n546 * n549);
n556 = (!n555);
n560 = (!n559);
n565 = (n563 * n564);
n570 = (n568 * n569);
n573 = (n571 * n572);
n577 = (n575 * n576);
n581 = (n577 * n580);
n599 = (n591 * n598);
n614 = (n606 * n613);
n624 = (n622 * n623);
n638 = (n630 * n637);
n648 = (n644 * n647);
n653 = (n649 * n652);
n661 = (n197 * n660);
n662 = (n658 * n661);
n667 = (n192 * n666);
n668 = (n555 * n559);
n676 = (n672 * n675);
n680 = (n245 * n679);
n110 = (!n109);
n124 = (!n123);
n144 = (!n143);
n154 = (n144 * n153);
n177 = (n173 * n176);
n194 = (n189 * n193);
n202 = (!n201);
n205 = (n202 * n204);
n230 = (!n229);
n237 = (!n236);
n262 = (!n261);
n266 = (!n265);
n274 = (n266 * n273);
n279 = (!n278);
n284 = (!n283);
n291 = (!n290);
n303 = (!n189);
n309 = (!n296);
n315 = (!n176);
n318 = (!n212);
n319 = (!n163);
n320 = (!n173);
n323 = (!n247);
n331 = (n204 * n330);
n337 = (n333 * n336);
n340 = (n241 * n339);
n342 = (n153 * n341);
n350 = (!n349);
n357 = (!n356);
n364 = (n361 * n363);
n369 = (!n368);
n375 = (!n374);
n382 = (!n381);
n389 = (n387 * n388);
n392 = (n390 * n391);
n396 = (n394 * n395);
n403 = (n401 * n402);
n407 = (n403 * n406);
n410 = (n408 * n409);
n413 = (n411 * n412);
n416 = (n109 * n123);
n420 = (!n188);
n421 = (n419 * n420);
n422 = (n418 * n421);
n423 = (!n264);
n426 = (n424 * n425);
n433 = (n378 * n432);
n436 = (n434 * n435);
n443 = (n441 * n442);
n444 = (n440 * n443);
n460 = (n454 * n459);
n471 = (n465 * n470);
n491 = (n485 * n490);
n492 = (n480 * n491);
n500 = (n496 * n499);
n501 = (n374 * n500);
n507 = (n504 * n506);
n514 = (n510 * n513);
n525 = (n521 * n524);
n532 = (n528 * n531);
n539 = (!n538);
n543 = (n539 * n542);
n551 = (n543 * n550);
n557 = (n167 * n556);
n561 = (n146 * n560);
n574 = (n570 * n573);
n582 = (n574 * n581);
n615 = (n599 * n614);
n639 = (n624 * n638);
n654 = (n648 * n653);
n663 = (n654 * n662);
n669 = (n667 * n668);
n681 = (n676 * n680);
n113 = (n110 * n112);
n127 = (n124 * n126);
n155 = (!n154);
n164 = (n155 * n163);
n178 = (!n177);
n195 = (!n194);
n206 = (!n205);
n213 = (n206 * n212);
n238 = (n230 * n237);
n242 = (n238 * n241);
n275 = (n262 * n274);
n285 = (n279 * n284);
n292 = (n230 * n291);
n308 = (n285 * n291);
n310 = (n238 * n309);
n316 = (n202 * n315);
n317 = (n314 * n316);
n321 = (n319 * n320);
n322 = (n318 * n321);
n324 = (n144 * n323);
n325 = (n262 * n324);
n338 = (n331 * n337);
n343 = (n340 * n342);
n358 = (n350 * n357);
n365 = (n358 * n364);
n366 = (n274 * n365);
n376 = (n370 * n375);
n383 = (n136 * n382);
n393 = (n389 * n392);
n397 = (n393 * n396);
n414 = (n410 * n413);
n415 = (n407 * n414);
n417 = (n415 * n416);
n427 = (n423 * n426);
n431 = (n427 * n430);
n437 = (n433 * n436);
n445 = (n437 * n444);
n472 = (n460 * n471);
n493 = (n472 * n492);
n515 = (n507 * n514);
n516 = (n501 * n515);
n533 = (n525 * n532);
n552 = (n533 * n551);
n558 = (!n557);
n562 = (!n561);
n640 = (n615 * n639);
n682 = (n669 * n681);
n683 = (n663 * n682);
n128 = (n113 * n127);
n165 = (!n164);
n179 = (n165 * n178);
n214 = (!n213);
n215 = (n195 * n214);
n243 = (!n242);
n276 = (!n275);
n286 = (!n285);
n293 = (!n292);
n297 = (n293 * n296);
n304 = (!n113);
n305 = (!n127);
n311 = (n308 * n310);
n326 = (n322 * n325);
n327 = (n317 * n326);
n344 = (n338 * n343);
n367 = (n344 * n366);
n377 = (!n376);
n384 = (!n383);
n446 = (n431 * n445);
n447 = (n422 * n446);
n448 = (n417 * n447);
n517 = (n493 * n516);
n566 = (n562 * n565);
n567 = (n558 * n566);
n583 = (n567 * n582);
n584 = (n552 * n583);
n641 = (!n640);
n684 = (!n641 * n683) + (n641 * !n683);
n693 = (!n683);
n129 = (!n128);
n180 = (n129 * n179);
n216 = (n180 * n215);
n248 = (n243 * n247);
n287 = (n276 * n286);
n298 = (!n297);
n306 = (n304 * n305);
n307 = (n303 * n306);
n328 = (n311 * n327);
n385 = (n377 * n384);
n449 = (!n448);
n518 = (!n517);
n585 = (!n584);
n685 = (!n585 * n684) + (n585 * !n684);
n694 = (n641 * n693);
n699 = (!n684);
n249 = (!n248);
n288 = (!n287);
n299 = (n288 * n298);
n329 = (n307 * n328);
n386 = (n369 * n385);
n398 = (n386 * n397);
n399 = (n367 * n398);
n686 = (!n518 * n685) + (n518 * !n685);
n687 = (!n449 * n686) + (n449 * !n686);
n691 = (!n685);
n692 = (n518 * n691);
n698 = (!n694);
n700 = (n585 * n699);
tmp250 = (n691 * n694);
n300 = (n249 * n299);
n301 = (n216 * n300);
n400 = (!n399);
n688 = (!n400 * n687) + (n400 * !n687);
n689 = (!n329 * n688) + (n329 * !n688);
n697 = (!n692);
n701 = (!n700);
n702 = (n698 * n701);
n706 = (!n687);
n712 = (!n686);
n713 = (n449 * n712);
n725 = (!n329);
tmp249 = (n518 * tmp250);
n302 = (!n301);
n690 = (n302 * n689);
n696 = (!tmp249);
n703 = (n697 * n702);
n707 = (n400 * n706);
n719 = (!n702);
n720 = (!n713);
n726 = (!n688);
n727 = (n725 * n726);
m_31 = (!n302 * n689) + (n302 * !n689);
n704 = (!n703);
n705 = (n696 * n704);
n708 = (n705 * n707);
n710 = (!n707);
n721 = (n705 * n720);
n740 = (!n690);
n741 = (!n727);
n709 = (!n708);
n711 = (!n705);
n714 = (!n711 * n713) + (n711 * !n713);
n715 = (n710 * n714);
n722 = (!n721);
n723 = (n719 * n722);
n742 = (n740 * n741);
tmp4153 = (n690 * n709);
n716 = (!n715);
n717 = (n709 * n716);
n718 = (n690 * n717);
n724 = (!n723);
n728 = (n717 * n727);
tmp4152 = (n717 * tmp4153);
n729 = (!n728);
n730 = (n724 * n729);
n739 = (!n717);
tmp15 = (!n709 * tmp4152) + (n709 * !tmp4152);
tmp4547 = (!n718 * tmp15) + (n718 * !tmp15);
m_30 = (!n739 * n742) + (n739 * !n742);
n731 = (!n730);
tmp4546 = (n729 * tmp4547);
m_28 = (n718 * n731);
tmp4545 = (!tmp4546);
tmp4544 = (n723 + tmp4545);
m_29 = (!n718 * tmp4544) + (n718 * !tmp4544);


new graph depth
---graph depth print---
var : m_0 depth : 0
var : m_1 depth : 0
var : m_2 depth : 0
var : m_3 depth : 0
var : m_4 depth : 0
var : m_5 depth : 0
var : m_6 depth : 0
var : m_7 depth : 0
var : m_8 depth : 0
var : m_9 depth : 0
var : m_10 depth : 0
var : m_11 depth : 0
var : m_12 depth : 0
var : m_13 depth : 0
var : m_14 depth : 0
var : m_15 depth : 0
var : m_16 depth : 0
var : m_17 depth : 0
var : m_18 depth : 0
var : m_19 depth : 0
var : m_20 depth : 0
var : m_21 depth : 0
var : m_22 depth : 0
var : m_23 depth : 0
var : m_24 depth : 0
var : m_25 depth : 0
var : m_26 depth : 0
var : m_27 depth : 0
var : m_28 depth : 16
var : m_29 depth : 16
var : m_30 depth : 13
var : m_31 depth : 11
---------------------
old mult depth : 18
new mult depth : 16
