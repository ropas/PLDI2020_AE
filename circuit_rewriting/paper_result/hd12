cir to graph finished
old graph depth
---graph depth print---
var : m_0 depth : 0
var : m_1 depth : 0
var : m_2 depth : 0
var : m_3 depth : 0
var : m_4 depth : 0
var : m_5 depth : 0
var : m_6 depth : 0
var : m_7 depth : 0
var : m_8 depth : 0
var : m_9 depth : 0
var : m_10 depth : 0
var : m_11 depth : 0
var : m_12 depth : 0
var : m_13 depth : 0
var : m_14 depth : 0
var : m_15 depth : 0
var : m_16 depth : 0
var : m_17 depth : 0
var : m_18 depth : 0
var : m_19 depth : 0
var : m_20 depth : 0
var : m_21 depth : 0
var : m_22 depth : 0
var : m_23 depth : 0
var : m_24 depth : 0
var : m_25 depth : 0
var : m_26 depth : 16
var : m_27 depth : 4
var : m_28 depth : 8
var : m_29 depth : 13
var : m_30 depth : 15
var : m_31 depth : 16
---------------------
============================================= graph opt start ===================================================
initial graph size : 232
initial mult size : 116
whole case num : 417
reduced case num : 83
max case size : 38
min case size : 4
average case size : 13
median case size : 12
(and (not false) norm2) --> norm2
(and (and n325 norm2) n322) --> (and norm2 (and n322 n325))
(not (and (and norm3 norm7) n379)) --> (not (and (and norm7 n379) norm3))
(and n127 (not (and norm3 n63))) --> (xor (and norm3 (and n63 n127)) n127)
(and (and (and n392 norm3) norm7) i_9) --> (and (and norm3 norm7) (and i_9 n392))
(and (and (and n393 norm3) norm7) i_2) --> (and (and norm7 (and i_2 n393)) norm3)
(and (and (and n325 norm3) n322) i_25) --> (and (and norm3 (and i_25 n322)) n325)
(xor (and (and n554 n390) i_9) n618) --> (xor (and (and n390 i_9) n554) n618)
(and (xor (and n107 i_13) n118) n117) --> (xor (and (and n117 i_13) n107) (and n117 n118))
(and (not (and norm3 i_7)) (not i_4)) --> (xor (or (not norm3) (or (not i_7) i_4)) i_4)
(and (and n379 (not (xor n371 n373))) n376) --> (and (xor (not n371) n373) (and n376 n379))
(and (and n441 (xor norm3 (not n218))) n225) --> (and (xor (not norm3) n218) (and n225 n441))
(xor (and n107 (not (and n78 n63))) n125) --> (xor (xor (and (and n107 n63) n78) n125) n107)
(and n261 (not (xor n215 (and n177 i_23)))) --> (xor (and (and i_23 n261) n177) (and (not n215) n261))
(and n199 (not (xor (and n195 norm4) norm4))) --> (xor (and norm4 (and (not n195) n199)) n199)
(and n101 (not (and (and n85 n78) n74))) --> (xor (and (and n74 n85) (and n78 n101)) n101)
(and (and (not n94) (not norm4)) (not n63)) --> (not (or norm4 (or n63 n94)))
(xor (xor n610 n609) (and (and n547 n322) i_24)) --> (xor (xor (and (and i_24 n322) n547) n610) n609)
(and (xor norm2 (and (not n313) (not n273))) norm2) --> norm2
(and (not (xor i_15 (not i_7))) (and norm5 norm11)) --> (and (and norm11 (xor i_15 i_7)) norm5)
(and n155 (and (and n135 (not n132)) (not n128))) --> (and (not (or n128 n132)) (and n155 n135))
(and (xor (xor n286 (and n269 n213)) n249) n193) --> (xor (and (xor n286 n249) n193) (and (and n193 n213) n269))
(and (xor n333 (and (and n329 norm4) n317)) n151) --> (and (xor (and norm4 (and n329 n317)) n333) n151)
(and (and (and n379 (not (xor n371 n373))) n376) i_10) --> (and (and (xor (not n373) n371) (and i_10 n376)) n379)
(and (and (and n441 (xor norm4 (not n218))) n225) i_9) --> (and (and (xor (not norm4) n218) (and i_9 n225)) n441)
(and (not (xor (xor n286 (and n269 n213)) n249)) n184) --> (xor (and (xor (not n286) n249) n184) (and (and n184 n213) n269))
(and (not (and (not (and i_7 (not i_6))) norm6)) i_8) --> (xor (and (or (not i_7) i_6) (and norm6 i_8)) i_8)
(and (not (and (not i_6) i_4)) (not (and i_8 i_6))) --> (xor (not (and (xor i_8 i_4) i_6)) i_4)
(xor (xor (xor n690 n689) (and (and n627 n322) i_24)) n686) --> (xor (xor (xor (and (and i_24 n322) n627) n686) n689) n690)
(and (and (not (or n217 n168)) (and (not n120) n226)) i_32) --> (and (and (and i_32 n226) (not n168)) (not (or n217 n120)))
(not (and (and (not (and (and n135 n133) n129)) norm6) n47)) --> (or (not (and norm6 n47)) (and (and n135 n129) n133))
(and (not (and (and n135 (not n132)) (not n128))) (not n47)) --> (xor (or (or (not n135) n47) (or n132 n128)) n47)
(and (xor (xor n286 (and n269 n213)) (and n248 n213)) n281) --> (xor (and (xor n269 n248) (and n281 n213)) (and n281 n286))
(and n251 (not (xor (and (not norm5) n143) (and norm5 i_25)))) --> (xor (and (and (xor i_25 n143) n251) norm5) (and (not n143) n251))
(and (xor (xor n359 (xor n272 (and n253 n215))) n186) n157) --> (xor (and (xor (xor n186 n272) n359) n157) (and (and n157 n215) n253))
(and (not (and (and norm4 i_6) i_7)) (not (and i_6 i_5))) --> (xor (or (or (not i_6) i_5) (and norm4 i_7)) i_6)
(and (xor (and (and i_6 i_8) i_7) i_4) (and i_7 i_6)) --> (and (and (xor i_8 i_4) i_6) i_7)
(and (and (not (and (not i_7) i_6)) i_3) (xor i_6 norm6)) --> (and (and (xor norm6 i_6) i_3) (or (not i_6) i_7))
(and (and n121 (not (and (not n115) n34))) (and norm6 i_3)) --> (and (and (and i_3 n121) norm6) (or (not n34) n115))
(and (and (not (and norm4 n333)) n150) (not (and (not norm4) n336))) --> (and (xor (or (xor (not n336) n333) norm4) n333) n150)
(and (and (and n251 (xor n247 (not n237))) n218) (and n214 n207)) --> (and (and (and (and n251 n218) n207) (xor (not n247) n237)) n214)
(and (and n251 (xor n247 (not (and (and n235 n232) n222)))) n218) --> (and (and (xor (not (and (and n235 n222) n232)) n247) n218) n251)
(and n80 (and (not (xor (xor (xor n48 n45) i_2) i_10)) n53)) --> (and (xor (xor (xor (not i_2) i_10) n45) n48) (and n53 n80))
(and (not (xor (xor n199 (and n188 n152)) (and n175 n152))) n138) --> (xor (and (xor n188 n175) (and n138 n152)) (and (not n199) n138))
(and n211 (not (and (not (and (and n204 n199) norm6)) (not n187)))) --> (or (and (and (and n199 n211) n204) norm6) (and n211 n187))
(and (and (not (and (not i_9) i_3)) i_7) (not (and i_9 norm7))) --> (and (xor norm7 i_9) i_7)
(and (not (and (not (and i_9 i_7)) i_8)) (not (and i_7 i_4))) --> (xor (not (and (and (xor i_4 i_8) i_7) (or i_4 i_9))) i_8)
(and (and (and (xor (xor norm5 n168) n120) n226) (or n168 n120)) i_26) --> (and (and (xor (xor norm5 n168) n120) (and i_26 n226)) (or n168 n120))
(and norm1 (xor (and (not n369) (and n365 n325)) (not (and n365 n325)))) --> norm1
(and (not (xor (and n203 (not (xor n200 n197))) (xor n200 n197))) n188) --> (and (xor (not n200) n197) (and (not n203) n188))
(and n388 (and n359 (xor (xor n271 (and n262 n215)) (and n253 n215)))) --> (and (xor (and (xor n253 n262) n215) n271) (and n359 n388))
(and (and (and n52 (not n47)) (not (and (and n30 n26) n23))) n22) --> (and (not (or (and (and n23 n26) n30) n47)) (and n22 n52))
(xor (and n199 (not (xor (and n195 norm5) norm5))) (xor (and n195 norm5) norm5)) --> (xor (and norm5 (not (or n195 n199))) n199)
(and (and (not (and i_8 (not i_7))) (not i_9)) (not (and (not i_8) i_7))) --> (not (or (xor i_7 i_8) i_9))
(xor (and (xor n359 (xor n271 (and n262 n215))) n186) (and (and n186 n215) n253)) --> (xor (and (and (xor n253 n262) n186) n215) (and (xor n359 n271) n186))
(and (and (not (and (not i_6) i_4)) i_5) (not (and (and norm8 i_6) (not i_4)))) --> (xor (and (and (xor i_4 i_6) i_5) (or norm8 i_4)) i_5)
(and (not (and (not (and i_9 i_5)) (and i_8 i_7))) (not (and (not i_7) i_5))) --> (xor (or (not (and i_7 i_8)) (and i_5 i_9)) (and (not i_7) i_5))
(and (not (not (or (xor i_7 i_8) i_9))) (not (and (not (and i_8 i_7)) i_5))) --> (and (xor (or (xor i_8 i_7) (xor i_5 i_9)) i_5) (or (not i_5) i_7))
(and norm1 (xor (and (xor (and n384 n369) n387) (and n384 n369)) (not (and n384 n369)))) --> norm1
(and (not (and n149 (not (and (not norm6) n126)))) (not (and n142 (and (not norm6) n126)))) --> (xor (or (not (and (xor n149 n142) n126)) norm6) n149)
(xor n212 (xor (and (not (xor (and n203 n202) n201)) n188) (xor (and n203 n202) n201))) --> (xor (xor (and (and (not n188) n203) n202) (or n188 n201)) n212)
(xor (and (not (xor (xor (and i_16 i_8) i_7) i_15)) (and norm7 norm15)) (and norm7 norm15)) --> (and (and norm7 (xor i_15 i_7)) norm15)
(and (and norm2 (not (xor (and (not n215) (not n167)) (not (and (not n216) (not n119)))))) n225) --> (and (xor (or n167 n215) (or n216 n119)) (and norm2 n225))
(not (and (and n135 (not (and (and n63 n130) norm6))) (not (and n127 (not (and norm6 n63)))))) --> (or (xor (and (and (xor n130 n127) n63) norm6) n127) (not n135))
(and (not (xor (or (not norm5) (or (not i_7) i_4)) i_4)) (not (and (and i_7 i_4) norm5))) --> (xor (and norm5 i_7) i_4)
(and (and n450 (not (xor norm4 (not norm10)))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) --> (and (xor norm10 norm4) n450)
(and (and n135 (not (and (and n63 n130) (not n77)))) (not (and n127 (not (and (not n77) n63))))) --> (and (xor (or (not (and (xor n130 n127) n63)) n77) n127) n135)
(and (not (and (not (and i_7 i_6)) i_9)) (not (and (and (not i_9) i_7) (not (and i_6 i_5))))) --> (xor (not (and (or i_5 i_9) (and i_6 i_7))) (or i_9 i_7))
(and (xor (and (or (not i_7) i_6) (and (not i_9) i_8)) i_8) (not (and (and i_9 i_7) norm10))) --> (and (xor (and norm10 i_7) i_9) i_8)
(and (and (xor (xor n313 n273) norm4) (xor (and (xor n313 n273) norm4) (and (not n313) (not n273)))) n322) --> (and (and norm4 n322) (not (or n313 n273)))
(and (and (and n387 (xor norm4 (not norm10))) (xor (and (not (xor norm4 (not norm10))) norm10) (not norm10))) i_26) --> (and (not (or norm4 norm10)) (and i_26 n387))
(and (and (xor n216 (not n119)) (not (xor (and (not n215) (not n167)) (not (and norm11 (not n119)))))) n225) --> (and (and (xor norm11 n119) n225) (xor (or n167 n215) n119))
(and (not (and (not (and i_8 i_7)) i_5)) (xor (or (or (not i_6) i_5) (and (not i_8) i_7)) i_6)) --> (xor (not (or (and (xor i_6 i_8) i_7) (xor i_5 i_8))) i_8)
(and (and (xor (not n217) (xor n168 n120)) (xor (and (not n217) (xor n168 n120)) (and (not n168) norm11))) n226) --> (and (not (or n217 n168)) (and norm11 n226))
(and (and (xor (xor n313 n273) norm4) (not (xor (and (xor n313 n273) norm4) (and (not n313) (not n273))))) n322) --> (and (and (xor (xor norm4 n313) n273) n322) (or n313 n273))
(and (and (and n373 (not (xor norm5 (not norm12)))) (xor (and (not (xor norm5 (not norm12))) norm12) (not norm12))) i_24) --> (and (and (xor norm5 norm12) i_24) n373)
(and (and (not (and (not (and i_7 i_6)) (not i_3))) i_4) (not (and (and (xor (not i_2) i_6) i_3) (or (not i_6) i_7)))) --> (and (or (and (xor i_7 i_3) i_6) (and (xor i_6 i_2) i_3)) i_4)
(and (xor (and (xor (xor n312 n288) (xor n167 n143)) norm6) (and (xor n312 n288) (xor n167 n143))) (and (xor (xor n312 n288) (xor n167 n143)) norm6)) --> (and (xor (xor (xor n288 n143) n312) n167) norm6)
(xor (and (xor (and (xor n313 n273) (xor n216 n192)) (and (not n313) (not n273))) (and (xor n313 n273) (xor n216 n192))) (not (and (xor n313 n273) (xor n216 n192)))) --> true
(and (not (xor (not (and (and (xor i_4 i_8) i_7) (or i_4 i_9))) i_8)) (not (and (and (not (and i_9 i_7)) i_8) (not (and (not (and (not i_9) (not i_7))) (not i_4)))))) --> (and (xor (and (xor i_9 i_7) i_8) i_4) (or (not i_4) i_7))
(and (and (xor norm3 (xor norm8 norm13)) (xor (and norm3 (xor norm8 norm13)) norm21)) (xor (and (xor (and norm3 (xor norm8 norm13)) norm21) (and norm3 (xor norm8 norm13))) (not (and norm3 (xor norm8 norm13))))) --> (and norm21 norm3)
(and (and (xor n364 (not n324)) (xor norm5 (not (and (not n364) (not n324))))) (xor (and (not (xor norm5 (not (and (not n364) (not n324))))) (and (not n364) (not n324))) (not (and (not n364) (not n324))))) --> (and (not norm5) (and n324 n364))
(and (and (xor (xor norm4 norm9) norm14) (xor (and (xor norm4 norm9) norm14) (and norm4 norm9))) (xor (and (xor (and (xor norm4 norm9) norm14) (and norm4 norm9)) (and (xor norm4 norm9) norm14)) (not (and (xor norm4 norm9) norm14)))) --> (and (and norm14 norm4) norm9)


graph_opt called
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n106 n107 n108 n109 n110 n117 n133 n149 n151 n164 n165 n166 n171 n172 n173 n176 n193 n194 m_28 n202 n218 n219 n224 n227 n228 n229 n230 n241 n242 n243 m_29 n264 n265 n266 m_30 n320 m_31 

unsat
pattern matched!
tgt, new_tgt same? : true
----print_subst start----
tmpvar#0  -->  CVar_n226
tmpvar#1  -->  CVar_n230
tmpvar#2  -->  CVar_n240
---------------------

old bexp : (and n322 (and norm2 n325))
new bexp : (and norm2 (and n322 n325))
tgt bexp     : (and n226 (and n230 n240))
sub old bexp : (and n226 (and n230 n240))
sub new bexp : (and n230 (and n226 n240))
before depth : 13
after depth : 12
graph replaced


graph size : 232
graph mult size : 116
optimal graph replaced, cost : 391500
graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
m_31 n320 m_30 n266 n265 n257 n256 m_29 n243 n242 tmp430 n226 n225 n224 n219 n218 n202 m_28 n194 n193 n176 n173 n172 n171 n166 n165 n163 n149 n133 n117 n110 n109 n108 n107 n105 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
m_31 n320 m_30 n266 n265 n257 n256 m_29 n243 n242 n230 n229 n228 n217 n216 n215 m_28 n194 n193 n192 n191 n190 n189 n187 n149 n133 n117 n110 n109 n108 n104 n103 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n125 n127 n131 n132 n133 n149 n158 n160 n161 n162 n172 n173 n176 n193 n194 m_28 n235 n236 n237 n240 tmp430 n242 n243 m_29 n264 n265 n266 m_30 n320 m_31 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
m_26 n306 n268 m_30 n266 n265 n264 m_29 n243 n242 n230 n229 n228 n227 n224 n223 m_28 n194 n193 n176 n173 n172 n171 n170 n169 n167 n149 n133 n117 n110 n109 n108 n104 n103 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n128 n130 n131 n132 n133 n149 n183 n185 n186 n191 n192 n193 n194 m_28 n202 n203 n238 n239 n240 tmp430 n242 n243 m_29 n253 n254 n255 n266 m_30 n268 n306 m_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n102 n104 n108 n109 n110 n117 n133 n149 n158 n160 n161 n162 n172 n173 n176 n193 n194 m_28 n202 n218 n219 n224 n225 n226 tmp430 n242 n243 m_29 n264 n265 n266 m_30 n320 m_31 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n91 n92 n93 n97 n98 n101 n109 n110 n117 n133 n149 n151 n159 n160 n161 n162 n172 n173 n176 n193 n194 m_28 n215 n216 n217 n225 n226 tmp430 n242 n243 m_29 n256 n257 n265 n266 m_30 n307 m_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n129 n130 n131 n132 n133 n149 n154 n156 n157 n161 n162 n172 n173 n176 n193 n194 m_28 n202 n203 n238 n239 n240 tmp430 n242 n243 m_29 n264 n265 n266 m_30 n320 m_31 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n95 n96 n97 n98 n101 n109 n110 n117 n133 n149 n151 n179 n180 n181 n182 n192 n193 n194 m_28 n202 n231 n236 n237 n240 tmp430 n242 n243 m_29 n264 n265 n266 m_30 n320 m_31 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n106 n107 n108 n109 n110 n117 n133 n149 n151 n155 n156 n157 n161 n162 n172 n173 n176 n193 n194 m_28 n223 n224 n227 n228 n229 n230 n242 n243 m_29 n253 n254 n255 n266 m_30 n268 n306 m_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
m_31 n320 m_30 n266 n265 n264 m_29 n243 n242 n230 n229 n228 n227 n224 n223 m_28 n194 n193 n192 n182 n181 n180 n179 n151 n149 n133 n132 n131 n130 n128 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
n102 n104 n108 n109 n110 n117 n133 n149 n151 n155 n156 n157 n161 n162 n172 n173 n176 n193 n194 m_28 n215 n216 n217 n228 n229 n230 n242 n243 m_29 n253 n254 n255 n266 m_30 n307 m_26 

graph opt iter finished
============================================= graph opt iter once ===================================================
now graph size : 232
selected cripath : 
m_26 n307 m_30 n266 n255 n254 n253 m_29 n243 n242 tmp430 n240 n237 n236 n231 n202 m_28 n194 n193 n176 n173 n172 n171 n166 n165 n164 n151 n149 n133 n117 n110 n109 n108 n104 n102 

dangling node deleted : nodeVal : AND index : 333
dangling node deleted : nodeVal : n241 index : 1
dangling node deleted : nodeVal : AND index : 331
cleanup fin
redundant node deleted : nodeVal : n216 index : 1 is same with nodeVal : n311 index : 1
sharing detect fin
dangling node deleted : nodeVal : XOR index : 279
cleanup fin
graph opt finished
INORDER = i_9 i_8 i_7 i_6 i_5 i_4 i_33 i_32 i_31 i_30 i_3 i_29 i_28 i_27 i_26 i_25 i_24 i_23 i_22 i_21 i_20 i_2 i_19 i_18 i_17 i_16 i_15 i_14 i_13 i_12 i_11 i_10;
OUTORDER = m_9 m_8 m_7 m_6 m_5 m_4 m_31 m_30 m_3 m_29 m_28 m_27 m_26 m_25 m_24 m_23 m_22 m_21 m_20 m_2 m_19 m_18 m_17 m_16 m_15 m_14 m_13 m_12 m_11 m_10 m_1 m_0;
m_0 = false;
m_1 = false;
m_10 = false;
m_11 = false;
m_12 = false;
m_13 = false;
m_14 = false;
m_15 = false;
m_16 = false;
m_17 = false;
m_18 = false;
m_19 = false;
m_2 = false;
m_20 = false;
m_21 = false;
m_22 = false;
m_23 = false;
m_24 = false;
m_25 = false;
m_3 = false;
m_4 = false;
m_5 = false;
m_6 = false;
m_7 = false;
m_8 = false;
m_9 = false;
n102 = (!i_10);
n103 = (!i_11);
n105 = (!i_12);
n106 = (!i_13);
n111 = (i_13 * n105);
n112 = (!i_12 * n111) + (i_12 * !n111);
n114 = (i_11 * n102);
n118 = (!i_2);
n119 = (!i_3);
n121 = (!i_4);
n122 = (!i_5);
n125 = (!i_6);
n126 = (!i_7);
n128 = (!i_8);
n129 = (!i_9);
n134 = (i_9 * n128);
n135 = (!i_8 * n134) + (i_8 * !n134);
n138 = (i_7 * n125);
n142 = (i_5 * n121);
n143 = (!i_4 * n142) + (i_4 * !n142);
n145 = (i_3 * n118);
n146 = (!i_2 * n145) + (i_2 * !n145);
n269 = (!i_26);
n270 = (!i_27);
n272 = (!i_28);
n273 = (!i_29);
n276 = (!i_22);
n277 = (!i_23);
n279 = (!i_24);
n280 = (!i_25);
n284 = (!i_30);
n285 = (!i_31);
n287 = (!i_32);
n288 = (!i_33);
n293 = (!i_18);
n294 = (!i_19);
n296 = (!i_20);
n297 = (!i_21);
n300 = (!i_17);
n91 = (!i_16);
n92 = (i_17 * n91);
n93 = (!i_16 * n92) + (i_16 * !n92);
n94 = (!i_14);
n95 = (!i_15);
n99 = (i_15 * n94);
n100 = (!n94 * n99) + (n94 * !n99);
n104 = (n102 * n103);
n107 = (n105 * n106);
n113 = (n104 * n112);
n115 = (!n102 * n114) + (n102 * !n114);
n120 = (n118 * n119);
n123 = (n121 * n122);
n127 = (n125 * n126);
n130 = (n128 * n129);
n136 = (n127 * n135);
n139 = (!n125 * n138) + (n125 * !n138);
n144 = (n120 * n143);
n147 = (!n144 * n146) + (n144 * !n146);
n271 = (n269 * n270);
n274 = (n272 * n273);
n278 = (n276 * n277);
n281 = (n279 * n280);
n286 = (n284 * n285);
n289 = (n287 * n288);
n295 = (n293 * n294);
n298 = (n296 * n297);
n301 = (n300 * n91);
n96 = (n94 * n95);
n97 = (n93 * n96);
n108 = (n104 * n107);
n116 = (!n113 * n115) + (n113 * !n115);
n124 = (n120 * n123);
n131 = (n127 * n130);
n137 = (!n136);
n140 = (!n137 * n139) + (n137 * !n139);
n275 = (n271 * n274);
n282 = (n278 * n281);
n290 = (n286 * n289);
n299 = (n295 * n298);
n302 = (n301 * n96);
n98 = (!n97);
n101 = (!n100 * n98) + (n100 * !n98);
n109 = (n101 * n108);
n132 = (n124 * n131);
n141 = (n124 * n140);
n148 = (!n141 * n147) + (n141 * !n147);
n283 = (n275 * n282);
n291 = (n108 * n290);
n303 = (n299 * n302);
n110 = (!n109);
n117 = (!n110 * n116) + (n110 * !n116);
n133 = (n117 * n132);
n149 = (!n133 * n148) + (n133 * !n148);
n292 = (n283 * n291);
n304 = (n132 * n303);
n150 = (i_2 * n149);
n151 = (!n149);
n154 = (i_8 * n149);
n158 = (i_9 * n149);
n163 = (i_7 * n149);
n167 = (i_6 * n149);
n178 = (i_3 * n149);
n183 = (i_5 * n149);
n187 = (i_4 * n149);
n205 = (i_10 * n149);
n212 = (i_12 * n149);
n220 = (i_13 * n149);
n232 = (i_11 * n149);
n248 = (i_14 * n149);
n259 = (i_15 * n149);
n305 = (n292 * n304);
n309 = (!n133);
n313 = (i_16 * n149);
m_27 = (!n148 * n309) + (n148 * !n309);
n152 = (i_18 * n151);
n153 = (!n150 * n152) + (n150 * !n152);
n155 = (i_24 * n151);
n156 = (!n154 * n155) + (n154 * !n155);
n159 = (i_25 * n151);
n160 = (!n158 * n159) + (n158 * !n159);
n164 = (i_23 * n151);
n165 = (!n163 * n164) + (n163 * !n164);
n168 = (i_22 * n151);
n169 = (!n167 * n168) + (n167 * !n168);
n179 = (i_19 * n151);
n180 = (!n178 * n179) + (n178 * !n179);
n184 = (i_21 * n151);
n185 = (!n183 * n184) + (n183 * !n184);
n188 = (i_20 * n151);
n189 = (!n187 * n188) + (n187 * !n188);
n206 = (i_26 * n151);
n207 = (!n205 * n206) + (n205 * !n206);
n213 = (i_28 * n151);
n214 = (!n212 * n213) + (n212 * !n213);
n221 = (i_29 * n151);
n222 = (!n220 * n221) + (n220 * !n221);
n233 = (i_27 * n151);
n234 = (!n232 * n233) + (n232 * !n233);
n249 = (i_30 * n151);
n250 = (!n248 * n249) + (n248 * !n249);
n260 = (i_31 * n151);
n261 = (!n259 * n260) + (n259 * !n260);
n314 = (i_32 * n151);
n315 = (!n313 * n314) + (n313 * !n314);
n157 = (!n156);
n161 = (n157 * n160);
n162 = (!n156 * n161) + (n156 * !n161);
n166 = (!n165);
n170 = (!n169);
n174 = (n165 * n170);
n177 = (!n153);
n181 = (!n180);
n186 = (!n185);
n190 = (!n189);
n195 = (n185 * n190);
n196 = (!n189 * n195) + (n189 * !n195);
n198 = (n177 * n180);
n199 = (!n153 * n198) + (n153 * !n198);
n171 = (n166 * n170);
n172 = (n162 * n171);
n175 = (!n170 * n174) + (n170 * !n174);
n182 = (n177 * n181);
n191 = (n186 * n190);
n197 = (n182 * n196);
n200 = (!n197 * n199) + (n197 * !n199);
n173 = (!n172);
n176 = (!n173 * n175) + (n173 * !n175);
n192 = (n182 * n191);
n193 = (n176 * n192);
n194 = (!n193);
m_28 = (!n194 * n200) + (n194 * !n200);
n208 = (m_28 * n207);
n215 = (m_28 * n214);
n223 = (m_28 * n222);
n235 = (m_28 * n234);
n251 = (m_28 * n250);
n262 = (m_28 * n261);
n316 = (m_28 * n315);
n202 = (!m_28);
n203 = (n153 * n202);
n211 = (n189 * n202);
n218 = (n185 * n202);
n231 = (n180 * n202);
n236 = (!n231 * n235) + (n231 * !n235);
n238 = (!n203 * n208) + (n203 * !n208);
n247 = (n169 * n202);
n252 = (!n247 * n251) + (n247 * !n251);
n258 = (n165 * n202);
n263 = (!n258 * n262) + (n258 * !n262);
n311 = (!n211 * n215) + (n211 * !n215);
n312 = (n156 * n202);
n317 = (!n312 * n316) + (n312 * !n316);
n204 = (!n203);
n209 = (!n204 * n208) + (n204 * !n208);
n217 = (!n311);
n219 = (!n218);
n224 = (!n219 * n223) + (n219 * !n223);
n237 = (!n236);
n239 = (!n238);
n244 = (n236 * n239);
n245 = (!n238 * n244) + (n238 * !n244);
n210 = (!n209);
n225 = (n217 * n224);
n227 = (!n224);
n228 = (n217 * n227);
n229 = (n228 * n311);
n240 = (n237 * n239);
n226 = (!n225);
n230 = (!n229);
tmp430 = (n226 * n240);
n242 = (n230 * tmp430);
n243 = (!n242);
m_29 = (!n243 * n245) + (n243 * !n245);
n253 = (m_29 * n252);
n254 = (!n210 * n253) + (n210 * !n253);
n264 = (m_29 * n263);
n310 = (!n209 * n253) + (n209 * !n253);
n318 = (m_29 * n317);
n319 = (!n311 * n318) + (n311 * !n318);
n255 = (!n254);
n256 = (!m_29);
n257 = (n236 * n256);
n265 = (!n257 * n264) + (n257 * !n264);
n266 = (n255 * n265);
m_30 = (!n255 * n266) + (n255 * !n266);
n320 = (m_30 * n319);
m_31 = (!n310 * n320) + (n310 * !n320);
n268 = (!m_30);
n307 = (m_30 * n305);
n306 = (n268 * n305);
m_26 = (!n306 * n307) + (n306 * !n307);


new graph depth
---graph depth print---
var : m_0 depth : 0
var : m_1 depth : 0
var : m_2 depth : 0
var : m_3 depth : 0
var : m_4 depth : 0
var : m_5 depth : 0
var : m_6 depth : 0
var : m_7 depth : 0
var : m_8 depth : 0
var : m_9 depth : 0
var : m_10 depth : 0
var : m_11 depth : 0
var : m_12 depth : 0
var : m_13 depth : 0
var : m_14 depth : 0
var : m_15 depth : 0
var : m_16 depth : 0
var : m_17 depth : 0
var : m_18 depth : 0
var : m_19 depth : 0
var : m_20 depth : 0
var : m_21 depth : 0
var : m_22 depth : 0
var : m_23 depth : 0
var : m_24 depth : 0
var : m_25 depth : 0
var : m_26 depth : 15
var : m_27 depth : 4
var : m_28 depth : 8
var : m_29 depth : 12
var : m_30 depth : 14
var : m_31 depth : 15
---------------------
old mult depth : 16
new mult depth : 15
